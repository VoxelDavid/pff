<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Workspace" referent="RBX0">
		<Properties>
			<Ref name="CurrentCamera">RBX1</Ref>
			<double name="DistributedGameTime">0</double>
			<CoordinateFrame name="ModelInPrimary">
				<X>0</X>
				<Y>0</Y>
				<Z>0</Z>
				<R00>1</R00>
				<R01>0</R01>
				<R02>0</R02>
				<R10>0</R10>
				<R11>1</R11>
				<R12>0</R12>
				<R20>0</R20>
				<R21>0</R21>
				<R22>1</R22>
			</CoordinateFrame>
			<string name="Name">Workspace</string>
			<Ref name="PrimaryPart">null</Ref>
		</Properties>
		<Item class="Camera" referent="RBX1">
			<Properties>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<CoordinateFrame name="CoordinateFrame">
					<X>101.750633</X>
					<Y>16.5874939</Y>
					<Z>69.0764923</Z>
					<R00>0.881835938</R00>
					<R01>0.165769398</R01>
					<R02>-0.441458821</R02>
					<R10>-0</R10>
					<R11>0.936174035</R11>
					<R12>0.351536781</R12>
					<R20>0.471556336</R20>
					<R21>-0.309997767</R21>
					<R22>0.825551927</R22>
				</CoordinateFrame>
				<float name="FieldOfView">70</float>
				<CoordinateFrame name="Focus">
					<X>105</X>
					<Y>14</Y>
					<Z>63</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<string name="Name">Camera</string>
			</Properties>
		</Item>
		<Item class="Terrain" referent="RBX2">
			<Properties>
				<bool name="Anchored">true</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">4</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">194</int>
				<CoordinateFrame name="CFrame">
					<X>-2</X>
					<Y>126</Y>
					<Z>-2</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<string name="ClusterGridV2"></string>
				<float name="Elasticity">0.300000012</float>
				<float name="Friction">0.5</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<token name="Material">256</token>
				<string name="Name">Terrain</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">3</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<Vector3 name="size">
					<X>2044</X>
					<Y>252</Y>
					<Z>2044</Z>
				</Vector3>
			</Properties>
		</Item>
		<Item class="Part" referent="RBX3">
			<Properties>
				<bool name="Anchored">true</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">4</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">194</int>
				<CoordinateFrame name="CFrame">
					<X>0</X>
					<Y>0.600000024</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<float name="Elasticity">0.5</float>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<token name="Material">256</token>
				<string name="Name">Baseplate</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">3</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="formFactorRaw">1</token>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>1000</X>
					<Y>1.20000005</Y>
					<Z>1000</Z>
				</Vector3>
			</Properties>
		</Item>
		<Item class="Script" referent="RBX4">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">GLOBAL</string>
				<ProtectedString name="Source">--[[--
  |--------------------------------------------------------------------------
  | GLBOAL
  |--------------------------------------------------------------------------
  |
  | This script contains all of the variables accessed throughout the game.
  |
  | All children of this script are Global Functions accessed by &quot;call scripts&quot;
  |
  | Keep orginized by:
  | - Ordering tables alphabetically
  | - Keeping variables of the same type (IE: Bool, Int, etc.) grouped together.
  | - Putting singular variables above Tables.
  |
  |--------------------------------------------------------------------------
--]]--

-- Game Version -- Keep this regularly updated!
_G.version = &quot;Alpha 0.1.0&quot;

-- Loose Variables
_G.conf = script.Configuration -- Where all values accessed by scripts are stored.

-- Variables for all lighting related objects/scripts
_G.lighting = {
&#9;brightness_when_day    = 0.3,  -- How bright a light will be in the day.
&#9;brightness_when_night  = 1,    -- How bright a light will be at night.
&#9;flicker_frequency      = 3,    -- How frequently a fire based light will flicker each second.

&#9;candle = {
&#9;&#9;range = 14,        -- Candle&apos;s PointLight range.
&#9;&#9;light_speed = 6,   -- How quickly the fire will be lit. Bigger number = slower transition.
&#9;&#9;ext_speed   = 3,   -- How quickly the fire will be extinguished. Bigger number = slower transition.
&#9;},

&#9;fireplace = {
&#9;&#9;range = 18,        -- Fireplace&apos;s PointLight range.
&#9;&#9;light_speed = 12,  -- How quickly the fire will be lit. Bigger number = slower transition.
&#9;&#9;ext_speed   = 3,   -- How quickly the fire will be extinguished. Bigger number = slower transition.
&#9;},

&#9;torch = {
&#9;&#9;range = 16,        -- Torch&apos;s PointLight range.
&#9;&#9;light_speed = 8,   -- How quickly the fire will be lit. Bigger number = slower transition.
&#9;&#9;ext_speed   = 3,   -- How quickly the fire will be extinguished. Bigger number = slower transition.
&#9;},
}

-- Variables for the Day/Night time cycle.
_G.time_cycle = {
&#9;enabled      = true,  -- If the Time Cycle should be enabled.
&#9;sun_ambient  = true,  -- (Not implemented) If the ambient should change for sunrise and sunset.
&#9;speed        = 1,     -- How fast the time will change.
&#9;day_length   = 8,     -- (Not implemented) How many minutes it will take to go from sunrise to sunset.
&#9;night_length = 4,     -- (Not implemented) How many minutes it will take for night to pass.
}

-- Special Users
_G.users = {
&#9;-- Adminitrators
&#9;admins = {
&#9;&#9;&quot;D3lego&quot;,
&#9;&#9;&quot;MonsterBone&quot;,
&#9;&#9;&quot;Player1&quot;,
&#9;},

&#9;-- Friends and other important people.
&#9;vips = {
&#9;&#9;&quot;&quot;,
&#9;&#9;&quot;&quot;,
&#9;&#9;&quot;&quot;,
&#9;}
}

-- Persistant Data table for other scripts to hook into
_G.user_data = {
&#9;show_about_on_join = true,
}


-- Let other scripts know that the variabes are ready for use.
_G.config = true

print(&quot;Loaded &quot; .. script.Name)
</ProtectedString>
			</Properties>
			<Item class="Configuration" referent="RBX5">
				<Properties>
					<string name="Name">Configuration</string>
				</Properties>
			</Item>
		</Item>
	</Item>
	<Item class="StarterPack" referent="RBX6">
		<Properties>
			<string name="Name">StarterPack</string>
		</Properties>
	</Item>
	<Item class="StarterGui" referent="RBX7">
		<Properties>
			<string name="Name">StarterGui</string>
			<bool name="ShowDevelopmentGui">true</bool>
		</Properties>
		<Item class="ScreenGui" referent="RBX8">
			<Properties>
				<string name="Name">Interface</string>
			</Properties>
			<Item class="TextButton" referent="RBX9">
				<Properties>
					<bool name="Active">true</bool>
					<bool name="AutoButtonColor">true</bool>
					<Color3 name="BackgroundColor3">4288914085</Color3>
					<float name="BackgroundTransparency">0</float>
					<Color3 name="BorderColor3">4279970357</Color3>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">0</token>
					<token name="FontSize">2</token>
					<bool name="Modal">false</bool>
					<string name="Name">OpenAbout</string>
					<UDim2 name="Position">
						<XS>0.939999998</XS>
						<XO>0</XO>
						<YS>0.699999988</YS>
						<YO>0</YO>
					</UDim2>
					<bool name="Selected">false</bool>
					<UDim2 name="Size">
						<XS>0.0649999976</XS>
						<XO>0</XO>
						<YS>0.0599999987</YS>
						<YO>0</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<token name="Style">2</token>
					<string name="Text">About</string>
					<Color3 name="TextColor3">4293651435</Color3>
					<bool name="TextScaled">true</bool>
					<Color3 name="TextStrokeColor3">4278190080</Color3>
					<float name="TextStrokeTransparency">1</float>
					<float name="TextTransparency">0</float>
					<bool name="TextWrapped">true</bool>
					<token name="TextXAlignment">0</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
			</Item>
			<Item class="Frame" referent="RBX10">
				<Properties>
					<bool name="Active">false</bool>
					<Color3 name="BackgroundColor3">4288914085</Color3>
					<float name="BackgroundTransparency">0</float>
					<Color3 name="BorderColor3">4279970357</Color3>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<string name="Name">About</string>
					<UDim2 name="Position">
						<XS>0.324999988</XS>
						<XO>0</XO>
						<YS>-0.5</YS>
						<YO>0</YO>
					</UDim2>
					<UDim2 name="Size">
						<XS>0.349999994</XS>
						<XO>0</XO>
						<YS>0.349999994</YS>
						<YO>0</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<token name="Style">3</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
				<Item class="TextLabel" referent="RBX11">
					<Properties>
						<bool name="Active">false</bool>
						<Color3 name="BackgroundColor3">4288914085</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">4279970357</Color3>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">0</token>
						<token name="FontSize">6</token>
						<string name="Name">Title</string>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>0</YO>
						</UDim2>
						<UDim2 name="Size">
							<XS>1</XS>
							<XO>0</XO>
							<YS>0.119999997</YS>
							<YO>0</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<string name="Text"></string>
						<Color3 name="TextColor3">4294967295</Color3>
						<bool name="TextScaled">false</bool>
						<Color3 name="TextStrokeColor3">4278190080</Color3>
						<float name="TextStrokeTransparency">1</float>
						<float name="TextTransparency">0</float>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">2</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
				</Item>
				<Item class="TextLabel" referent="RBX12">
					<Properties>
						<bool name="Active">false</bool>
						<Color3 name="BackgroundColor3">4288914085</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">4279970357</Color3>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">0</token>
						<token name="FontSize">4</token>
						<string name="Name">Paragraph</string>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>0</XO>
							<YS>0.150000006</YS>
							<YO>0</YO>
						</UDim2>
						<UDim2 name="Size">
							<XS>1</XS>
							<XO>0</XO>
							<YS>0.649999976</YS>
							<YO>0</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<string name="Text"></string>
						<Color3 name="TextColor3">4293651435</Color3>
						<bool name="TextScaled">true</bool>
						<Color3 name="TextStrokeColor3">4278190080</Color3>
						<float name="TextStrokeTransparency">1</float>
						<float name="TextTransparency">0</float>
						<bool name="TextWrapped">true</bool>
						<token name="TextXAlignment">2</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
				</Item>
				<Item class="TextLabel" referent="RBX13">
					<Properties>
						<bool name="Active">false</bool>
						<Color3 name="BackgroundColor3">4288914085</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">4279970357</Color3>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">0</token>
						<token name="FontSize">4</token>
						<string name="Name">Version</string>
						<UDim2 name="Position">
							<XS>0.5</XS>
							<XO>0</XO>
							<YS>0.939999998</YS>
							<YO>0</YO>
						</UDim2>
						<UDim2 name="Size">
							<XS>0.5</XS>
							<XO>0</XO>
							<YS>0.0799999982</YS>
							<YO>0</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<string name="Text">Server Version: Alpha 0.1.0</string>
						<Color3 name="TextColor3">4293651435</Color3>
						<bool name="TextScaled">true</bool>
						<Color3 name="TextStrokeColor3">4278190080</Color3>
						<float name="TextStrokeTransparency">1</float>
						<float name="TextTransparency">0</float>
						<bool name="TextWrapped">true</bool>
						<token name="TextXAlignment">1</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
				</Item>
				<Item class="TextButton" referent="RBX14">
					<Properties>
						<bool name="Active">true</bool>
						<bool name="AutoButtonColor">true</bool>
						<Color3 name="BackgroundColor3">4288914085</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">4279970357</Color3>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">2</token>
						<token name="FontSize">5</token>
						<bool name="Modal">false</bool>
						<string name="Name">CloseButton</string>
						<UDim2 name="Position">
							<XS>0.949999988</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>0</YO>
						</UDim2>
						<bool name="Selected">false</bool>
						<UDim2 name="Size">
							<XS>0.0599999987</XS>
							<XO>0</XO>
							<YS>0.0599999987</YS>
							<YO>0</YO>
						</UDim2>
						<token name="SizeConstraint">1</token>
						<token name="Style">2</token>
						<string name="Text">X</string>
						<Color3 name="TextColor3">4291875024</Color3>
						<bool name="TextScaled">false</bool>
						<Color3 name="TextStrokeColor3">4278190080</Color3>
						<float name="TextStrokeTransparency">1</float>
						<float name="TextTransparency">0</float>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">2</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
				</Item>
			</Item>
			<Item class="Frame" referent="RBX15">
				<Properties>
					<bool name="Active">false</bool>
					<Color3 name="BackgroundColor3">4288914085</Color3>
					<float name="BackgroundTransparency">0</float>
					<Color3 name="BorderColor3">4279970357</Color3>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<string name="Name">Admin</string>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>0</YO>
					</UDim2>
					<UDim2 name="Size">
						<XS>0.349999994</XS>
						<XO>0</XO>
						<YS>0.349999994</YS>
						<YO>0</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<token name="Style">3</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
				<Item class="TextButton" referent="RBX16">
					<Properties>
						<bool name="Active">true</bool>
						<bool name="AutoButtonColor">true</bool>
						<Color3 name="BackgroundColor3">4288914085</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">4279970357</Color3>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">2</token>
						<token name="FontSize">5</token>
						<bool name="Modal">false</bool>
						<string name="Name">CloseButton</string>
						<UDim2 name="Position">
							<XS>0.949999988</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>0</YO>
						</UDim2>
						<bool name="Selected">false</bool>
						<UDim2 name="Size">
							<XS>0.0599999987</XS>
							<XO>0</XO>
							<YS>0.0599999987</YS>
							<YO>0</YO>
						</UDim2>
						<token name="SizeConstraint">1</token>
						<token name="Style">2</token>
						<string name="Text">X</string>
						<Color3 name="TextColor3">4291875024</Color3>
						<bool name="TextScaled">false</bool>
						<Color3 name="TextStrokeColor3">4278190080</Color3>
						<float name="TextStrokeTransparency">1</float>
						<float name="TextTransparency">0</float>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">2</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
				</Item>
			</Item>
			<Item class="TextButton" referent="RBX17">
				<Properties>
					<bool name="Active">true</bool>
					<bool name="AutoButtonColor">true</bool>
					<Color3 name="BackgroundColor3">4288914085</Color3>
					<float name="BackgroundTransparency">0</float>
					<Color3 name="BorderColor3">4279970357</Color3>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">0</token>
					<token name="FontSize">2</token>
					<bool name="Modal">false</bool>
					<string name="Name">OpenAdmin</string>
					<UDim2 name="Position">
						<XS>0.939999998</XS>
						<XO>0</XO>
						<YS>0.600000024</YS>
						<YO>0</YO>
					</UDim2>
					<bool name="Selected">false</bool>
					<UDim2 name="Size">
						<XS>0.0649999976</XS>
						<XO>0</XO>
						<YS>0.0599999987</YS>
						<YO>0</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<token name="Style">2</token>
					<string name="Text">Admin</string>
					<Color3 name="TextColor3">4293651435</Color3>
					<bool name="TextScaled">true</bool>
					<Color3 name="TextStrokeColor3">4278190080</Color3>
					<float name="TextStrokeTransparency">1</float>
					<float name="TextTransparency">0</float>
					<bool name="TextWrapped">true</bool>
					<token name="TextXAlignment">0</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
			</Item>
			<Item class="LocalScript" referent="RBX18">
				<Properties>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">GuiHandler</string>
					<ProtectedString name="Source">--[==[--
  |--------------------------------------------------------------------------
  | Gui Handler
  |--------------------------------------------------------------------------
  |
  | Takes care of everything Gui related in the Interface ScreenGui.
  |
  | @ToDo:
  | - Save the &quot;Interface&quot; ScreenGui as a Model.
  |
  | - Toggles do not work for closing because of HideAll not being able to to
  |   know not to hide certain panels.
  |
  |--------------------------------------------------------------------------
--]==]--

repeat wait() until _G.config

local sp = script.Parent

local AdminPanel = sp.Admin
local AboutPanel = sp.About
local CatsPanel = sp.Cats

-- Settings

local about_text = {
&#9;title      = &quot;Project Final Farewell&quot;;
&#9;par1       = &quot;After discovering how to harness a wireless signal, Archimedes was able to wirelessly transfer his cat&apos;s thoughts into readable text. Archimedes and his cat are working on writing about feline societies.&quot;;
&#9;par2       = &quot;\n\n Archimedes found that ear wax is a great biofuel. Due to the fact that most people just toss their ear wax he gave up his research.&quot;&#9;;
&#9;version    = &quot;Server Version: &quot; .. _G.version;
}

AboutPanel.Title.Text     = about_text.title
AboutPanel.Paragraph.Text = about_text.par1 .. about_text.par2
AboutPanel.Version.Text   = about_text.version

-- About Panel

local AboutPanel_enabled

function ShowAboutPanel()
&#9;AboutPanel_enabled = false
&#9;AboutPanel:TweenPosition(UDim2.new(0.325,0, 0.2,0), &quot;Out&quot;, &quot;Elastic&quot;, 1, true)
end

function HideAboutPanel()
&#9;AboutPanel:TweenPosition(UDim2.new(0.325,0, -0.5,0), &quot;Out&quot;, &quot;Quint&quot;, 0.5, true)
&#9;AboutPanel_enabled = true
end

function ToggleAboutPanel()
&#9;if AboutPanel_enabled == true then
&#9;&#9;AboutPanel_enabled = false
&#9;&#9;ShowAboutPanel()
&#9;else
&#9;&#9;HideAboutPanel()
&#9;&#9;AboutPanel_enabled = true
&#9;end
end

-- Admin Panel

local AdminPanel_enabled

function ShowAdminPanel()
&#9;AdminPanel_enabled = false
&#9;AdminPanel:TweenPosition(UDim2.new(0.325,0, 0.2,0), &quot;Out&quot;, &quot;Elastic&quot;, 1, true)
end

function HideAdminPanel()
&#9;AdminPanel:TweenPosition(UDim2.new(0.325,0, -0.5,0), &quot;Out&quot;, &quot;Quint&quot;, 0.5, true)
&#9;AdminPanel_enabled = true
end

function ToggleAdminPanel()
&#9;if AdminPanel_enabled == true then
&#9;&#9;AdminPanel_enabled = false
&#9;&#9;ShowAdminPanel()
&#9;else
&#9;&#9;HideAdminPanel()
&#9;&#9;AdminPanel_enabled = true
&#9;end
end

-- Cats Panel

local CatsPanel_enabled

function ShowCatsPanel()
&#9;CatsPanel_enabled = false
&#9;CatsPanel:TweenPosition(UDim2.new(0.325,0, 0.2,0), &quot;Out&quot;, &quot;Elastic&quot;, 1, true)
end

function HideCatsPanel()
&#9;CatsPanel:TweenPosition(UDim2.new(0.325,0, -0.5,0), &quot;Out&quot;, &quot;Quint&quot;, 0.5, true)
&#9;CatsPanel_enabled = true
end

function ToggleCatsPanel()
&#9;if CatsPanel_enabled == true then
&#9;&#9;CatsPanel_enabled = false
&#9;&#9;ShowCatsPanel()
&#9;else
&#9;&#9;HideCatsPanel()
&#9;&#9;CatsPanel_enabled = true
&#9;end
end

-- Hide Others

function HideOthers(excluded_frame)
&#9;for _,v in pairs(sp:GetChildren()) do
&#9;&#9;if v:IsA(&quot;Frame&quot;) and v.Name ~= excluded_frame then
&#9;&#9;&#9;HideAboutPanel()
&#9;&#9;&#9;HideAdminPanel()
&#9;&#9;&#9;HideCatsPanel()
&#9;&#9;end
&#9;end
end

-- Function Calls

function OpenAbout()
&#9;HideOthers()
&#9;ToggleAboutPanel()
end

function HideAbout()
&#9;ToggleAboutPanel()
end

function OpenAdmin()
&#9;HideOthers()
&#9;ToggleAdminPanel()
end

function HideAdmin()
&#9;ToggleAdminPanel()
end

function OpenCats()
&#9;HideOthers()
&#9;ToggleCatsPanel()
end

function HideCats()
&#9;ToggleCatsPanel()
end

sp.HideAll.MouseButton1Down:connect(function()
&#9;HideOthers()
end)


sp.OpenAbout.MouseButton1Down:connect(OpenAbout)
sp.About.CloseButton.MouseButton1Down:connect(HideAbout)

sp.OpenAdmin.MouseButton1Down:connect(OpenAdmin)
sp.Admin.CloseButton.MouseButton1Down:connect(HideAdmin)

sp.OpenCats.MouseButton1Down:connect(OpenCats)
CatsPanel.CloseButton.MouseButton1Down:connect(HideCats)

print(&quot;Loaded &quot;..script.Name)
</ProtectedString>
				</Properties>
			</Item>
			<Item class="TextButton" referent="RBX19">
				<Properties>
					<bool name="Active">true</bool>
					<bool name="AutoButtonColor">true</bool>
					<Color3 name="BackgroundColor3">4288914085</Color3>
					<float name="BackgroundTransparency">0</float>
					<Color3 name="BorderColor3">4279970357</Color3>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">0</token>
					<token name="FontSize">2</token>
					<bool name="Modal">false</bool>
					<string name="Name">HideAll</string>
					<UDim2 name="Position">
						<XS>0.939999998</XS>
						<XO>0</XO>
						<YS>0.400000006</YS>
						<YO>0</YO>
					</UDim2>
					<bool name="Selected">false</bool>
					<UDim2 name="Size">
						<XS>0.0649999976</XS>
						<XO>0</XO>
						<YS>0.0599999987</YS>
						<YO>0</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<token name="Style">2</token>
					<string name="Text">Hide All</string>
					<Color3 name="TextColor3">4293651435</Color3>
					<bool name="TextScaled">true</bool>
					<Color3 name="TextStrokeColor3">4278190080</Color3>
					<float name="TextStrokeTransparency">1</float>
					<float name="TextTransparency">0</float>
					<bool name="TextWrapped">true</bool>
					<token name="TextXAlignment">0</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
			</Item>
		</Item>
	</Item>
	<Item class="SoundService" referent="RBX20">
		<Properties>
			<token name="AmbientReverb">0</token>
			<float name="DistanceFactor">10</float>
			<float name="DopplerScale">1</float>
			<string name="Name">Soundscape</string>
			<float name="RolloffScale">1</float>
		</Properties>
	</Item>
	<Item class="CollectionService" referent="RBX21">
		<Properties>
			<string name="Name">CollectionService</string>
		</Properties>
	</Item>
	<Item class="PhysicsService" referent="RBX22">
		<Properties>
			<string name="Name">PhysicsService</string>
		</Properties>
	</Item>
	<Item class="BadgeService" referent="RBX23">
		<Properties>
			<string name="Name">BadgeService</string>
		</Properties>
	</Item>
	<Item class="Geometry" referent="RBX24">
		<Properties>
			<string name="Name">Geometry</string>
		</Properties>
	</Item>
	<Item class="RenderHooksService" referent="RBX25">
		<Properties>
			<string name="Name">RenderHooksService</string>
		</Properties>
	</Item>
	<Item class="SocialService" referent="RBX26">
		<Properties>
			<string name="Name">SocialService</string>
		</Properties>
	</Item>
	<Item class="GamePassService" referent="RBX27">
		<Properties>
			<string name="Name">GamePassService</string>
		</Properties>
	</Item>
	<Item class="Debris" referent="RBX28">
		<Properties>
			<int name="MaxItems">1000</int>
			<string name="Name">Debris</string>
		</Properties>
	</Item>
	<Item class="TimerService" referent="RBX29">
		<Properties>
			<string name="Name">Instance</string>
		</Properties>
	</Item>
	<Item class="ScriptInformationProvider" referent="RBX30">
		<Properties>
			<string name="Name">Instance</string>
		</Properties>
	</Item>
	<Item class="CookiesService" referent="RBX31">
		<Properties>
			<string name="Name">CookiesService</string>
		</Properties>
	</Item>
	<Item class="TeleportService" referent="RBX32">
		<Properties>
			<string name="Name">Teleport Service</string>
		</Properties>
	</Item>
	<Item class="Players" referent="RBX33">
		<Properties>
			<bool name="CharacterAutoLoads">true</bool>
			<string name="Name">Players</string>
		</Properties>
	</Item>
	<Item class="FWService" referent="RBX34">
		<Properties>
			<string name="Name">Instance</string>
		</Properties>
	</Item>
	<Item class="UserInputService" referent="RBX35">
		<Properties>
			<string name="Name">Instance</string>
		</Properties>
	</Item>
	<Item class="ContextActionService" referent="RBX36">
		<Properties>
			<string name="Name">ContextActionService</string>
		</Properties>
	</Item>
	<Item class="ScriptService" referent="RBX37">
		<Properties>
			<string name="Name">Instance</string>
		</Properties>
	</Item>
	<Item class="Selection" referent="RBX38">
		<Properties>
			<string name="Name">Selection</string>
		</Properties>
	</Item>
	<Item class="ChangeHistoryService" referent="RBX39">
		<Properties>
			<string name="Name">ChangeHistoryService</string>
		</Properties>
	</Item>
	<Item class="Lighting" referent="RBX40">
		<Properties>
			<Color3 name="Ambient">4286611584</Color3>
			<float name="Brightness">1</float>
			<Color3 name="ColorShift_Bottom">4278190080</Color3>
			<Color3 name="ColorShift_Top">4278190080</Color3>
			<Color3 name="FogColor">4290822336</Color3>
			<float name="FogEnd">100000</float>
			<float name="FogStart">0</float>
			<float name="GeographicLatitude">41.7332993</float>
			<bool name="GlobalShadows">false</bool>
			<string name="Name">Lighting</string>
			<Color3 name="OutdoorAmbient">4286611584</Color3>
			<Color3 name="ShadowColor">4289967032</Color3>
			<string name="TimeOfDay">14:00:00</string>
		</Properties>
		<Item class="Sky" referent="RBX41">
			<Properties>
				<bool name="CelestialBodiesShown">true</bool>
				<string name="Name">Sky</string>
				<Content name="SkyboxBk"><url>http://www.roblox.com/asset?id=58372690</url></Content>
				<Content name="SkyboxDn"><url>http://www.roblox.com/asset?id=58372722</url></Content>
				<Content name="SkyboxFt"><url>http://www.roblox.com/asset?id=58372742</url></Content>
				<Content name="SkyboxLf"><url>http://www.roblox.com/asset?id=58372777</url></Content>
				<Content name="SkyboxRt"><url>http://www.roblox.com/asset?id=58372794</url></Content>
				<Content name="SkyboxUp"><url>http://www.roblox.com/asset?id=58372812</url></Content>
				<int name="StarCount">3000</int>
			</Properties>
		</Item>
		<Item class="Script" referent="RBX42">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">QuentyAdminCommands</string>
				<ProtectedString name="Source">-- CONFIGURATION --
-- To modify these, go into the &apos;Configuration&apos; Folder and change the values.  
repeat wait(0) until script:FindFirstChild(&quot;Configuration&quot;)
local Configuration = script:FindFirstChild(&quot;Configuration&quot;)

local AllowChatReset = Configuration.AllowChatReset.Value                   -- If set to true, players can say &apos;Reset&apos; or &apos;Respawn&apos;, etc, and be respawned. 
local AllowChatCommands = Configuration.AllowChatCommands.Value             -- Allows you to use kill/ or explode/, etc. too.  
local BestFriendsAdmin = Configuration.BestFriendsAdmin.Value               -- If true, all your &apos;Best Friends&apos; will be friends
local FriendsModerator = Configuration.FriendsModerator.Value               -- If true, all your &apos;Best Friends&apos; will be friends
local AdminGroupID = Configuration.AdminGroupID.Value                       -- Anyone in this group

local AdminGroups = { -- Anyone in these groups will be added as an admin.  
&#9;00000000;
&#9;00000000;
&#9;00000000;
&#9;00000000;
&#9;00000000;
&#9;00000000;
&#9;00000000;
}


-- I&apos;m sorry this script is so sad, I&apos;ve just looked over it recently and seen all my ugly code,
-- hacks, etc.  I&apos;m working on a new version now, one that&apos;ll be a lot better (until I look at it
-- a bit closer), and I hope you&apos;re willing to wait. 
--     ~ Quenty

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------- E N D    O F     S I M P L E     E D I T I N G    O F    Q U E N T Y    A D M I N S ------------- E N D    O F     S I M P L E     E D I T I N G    O F    Q U E N T Y    A D M I N S ------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Past this point, tamper, but if it breaks, it&apos;s not my fault. D:

-- Update --
local _G,_VERSION,assert,collectgarbage,dofile,error,getfenv,getmetatable,ipairs,load,loadfile,loadstring,next,pairs,pcall,print,rawequal,rawget,rawset,select,setfenv,setmetatable,tonumber,tostring,type,unpack,xpcall,coroutine,math,string,table,game,Game,workspace,Workspace,delay,Delay,LoadLibrary,printidentity,Spawn,tick,time,version,Version,Wait,wait,PluginManager,crash__,LoadRobloxLibrary,settings,Stats,stats,UserSettings,Enum,Color3,BrickColor,Vector2,Vector3,Vector3int16,CFrame,UDim,UDim2,Ray,Axes,Faces,Instance,Region3,Region3int16=_G,_VERSION,assert,collectgarbage,dofile,error,getfenv,getmetatable,ipairs,load,loadfile,loadstring,next,pairs,pcall,print,rawequal,rawget,rawset,select,setfenv,setmetatable,tonumber,tostring,type,unpack,xpcall,coroutine,math,string,table,game,Game,workspace,Workspace,delay,Delay,LoadLibrary,printidentity,Spawn,tick,time,version,Version,Wait,wait,PluginManager,crash__,LoadRobloxLibrary,settings,Stats,stats,UserSettings,Enum,Color3,BrickColor,Vector2,Vector3,Vector3int16,CFrame,UDim,UDim2,Ray,Axes,Faces,Instance,Region3,Region3int16
math.randomseed(tick())

local UpdateTimeOutTime = 60 -- Time the script has until it stops trying to update, incase the update errors.  
local UpdateAttempt = false
local UpdateStartTime = tick()
local CurrentVersion = script.QuentyAdminCurrentVersion.Value
local Admins = script.Admins

Spawn(function()
&#9;local Attempt = game:GetService(&quot;InsertService&quot;):LoadAsset(86681103)
&#9;if Attempt and Attempt:IsA(&quot;Model&quot;) then
&#9;&#9;local AdminScript = Attempt:FindFirstChild(&quot;QuentyAdminCommands&quot;)
&#9;&#9;if AdminScript and AdminScript:IsA(&quot;Script&quot;) then
&#9;&#9;&#9;local CurrentVersionValue = AdminScript:FindFirstChild(&quot;QuentyAdminCurrentVersion&quot;)
&#9;&#9;&#9;local AdminConfiguration = AdminScript:FindFirstChild(&quot;Configuration&quot;) -- Gotta save the values.  
&#9;&#9;&#9;local AdminAdminsContainer = AdminScript:FindFirstChild(&quot;Admins&quot;) -- And save admins...

&#9;&#9;&#9;if CurrentVersionValue and CurrentVersionValue:IsA(&quot;NumberValue&quot;) and AdminConfiguration and AdminAdminsContainer then
&#9;&#9;&#9;&#9;if CurrentVersionValue.Value &gt; CurrentVersion then
&#9;&#9;&#9;&#9;&#9;--print(&quot;Auto updating&quot;)
&#9;&#9;&#9;&#9;&#9;for _, Item in pairs(AdminConfiguration:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;&#9;if Configuration:FindFirstChild(Item.Name) and Configuration[Item.Name]:IsA(Item.ClassName) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;AdminConfiguration[Item.Name].Value = Configuration[Item.Name].Value
&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;[QAC] - Weird value found in configuration&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;AdminAdminsContainer:ClearAllChildren() -- Wipe....

&#9;&#9;&#9;&#9;&#9;for _, Item in pairs(Admins:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;&#9;Item:Clone().Parent = AdminAdminsContainer
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;AdminScript.Parent = Workspace
&#9;&#9;&#9;&#9;&#9;--print(&quot;Done autoupdating&quot;)
&#9;&#9;&#9;&#9;&#9;script:Destroy() -- Destroy one&apos;s self. :D
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;print(&quot;[QAC] - Version is up to date&quot;)
&#9;&#9;&#9;&#9;&#9;Attempt:Destroy();
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;[QAC] - Error in identifying key values in loaded script&quot;)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;else
&#9;&#9;print(&quot;[QAC] - Error in insert attempt&quot;)
&#9;end
&#9;UpdateAttempt = true;
end)

repeat wait(0) --[[print(&quot;Waiting for autoupdate attempt&quot;)--]] until UpdateAttempt or tick() - UpdateStartTime &gt; UpdateTimeOutTime 
print(&quot;[QAC] - Update complete&quot;)

-- SCRIPT --

local function WaitForDescendent(Parent, Name)
&#9;local Item = Parent:FindFirstChild(Name)
&#9;if not Item then
&#9;&#9;repeat wait(0) Item = Parent:FindFirstChild(Name) print(&quot;[QAC] - Waiting for &quot;..Name) until Item
&#9;end
&#9;return Item;
end

--local AdminList = {&quot;MrNicNac&quot;, &quot;AnotherPlayer&quot;, &quot;Telamonster&quot;, &quot;Player&quot;}



-- Variables --
local Players = Game:GetService(&apos;Players&apos;)
local StarterPack = Game:GetService(&apos;StarterPack&apos;)
local StarterGui = Game:GetService(&apos;StarterGui&apos;)
local Lighting = Game:GetService(&apos;Lighting&apos;)
local Debris = Game:GetService(&apos;Debris&apos;)
local Teams = Game:GetService(&apos;Teams&apos;)
local BadgeService = Game:GetService(&apos;BadgeService&apos;)
local InsertService = Game:GetService(&apos;InsertService&apos;)
local Terrain = Workspace.Terrain

local Noobtags = {}

local PlayerConnectionCommands = {}
local PlayerNotifications = {}

--local RbxGui = assert(LoadLibrary(&apos;RbxGui&apos;))
local RbxUtility = assert(LoadLibrary(&apos;RbxUtility&apos;))
--local RbxStatus = assert(LoadLibrary(&apos;RbxStatus&apos;))
--local RbxGear = assert(LoadLibrary(&apos;RbxGear&apos;))
--local RbxStamper = assert(LoadLibrary(&apos;RbxStamper&apos;))

script.Name = &quot;QuentyAdminCommands&quot; -- Needs to stay this way to work.  

local Commands = WaitForDescendent(script, &quot;QuentyGuiAdminCommands&quot;)

local Notification =  WaitForDescendent(script, &quot;QuentyGuiAdminNotice&quot;):Clone()
local Caper = WaitForDescendent(script, &quot;QuentyGuiAdmin:Capes&quot;):Clone()
local Blinder = WaitForDescendent(script, &quot;QuentyGuiAdminBlind&quot;):Clone()
local Preload = WaitForDescendent(script, &quot;QuentyGuiAdmin:Preload&quot;):Clone()
local MainCache = game:GetService(&quot;Lighting&quot;):FindFirstChild(&quot;QuentyAdminCache&quot;)
local PlaySoundScript = WaitForDescendent(script, &quot;QuentyGuiAdmin:PlaySound&quot;):Clone()
local GameProt = WaitForDescendent(script, &quot;QuentyGuiAdmin:Operation&quot;):Clone()
local CrashScript = WaitForDescendent(script, &quot;QuentyGuiAdmin:Crash&quot;):Clone()

if not MainCache then
&#9;MainCache = Instance.new(&quot;Model&quot;, game:GetService(&quot;Lighting&quot;))
&#9;MainCache.Name = &quot;QuentyAdminCache&quot;
end

local ToolCache = MainCache:FindFirstChild(&quot;QuentyAdminToolCache&quot;)
local HatCache = MainCache:FindFirstChild(&quot;QuentyAdminHatCache&quot;)
if not ToolCache then
&#9;ToolCache = Instance.new(&quot;Model&quot;, MainCache)
&#9;ToolCache.Name = &quot;QuentyAdminToolCache&quot;
end

if not HatCache then
&#9;HatCache = Instance.new(&quot;Model&quot;, MainCache)
&#9;HatCache.Name = &quot;QuentyAdminHatCache&quot;
end

-- Functions --









local function Modify(instance, t)
&#9;for key, value in next, t do
&#9;&#9;if type(key) == &apos;number&apos; then
&#9;&#9;&#9;value.Parent = instance 
&#9;&#9;else
&#9;&#9;&#9;instance[key] = value
&#9;&#9;end
&#9;end
&#9;return instance
end





local function PlaySound(Player, ID)
&#9;if Player and Player:FindFirstChild(&quot;PlayerGui&quot;) then
&#9;&#9;local NewSoundPlay = PlaySoundScript:Clone()
&#9;&#9;NewSoundPlay.SoundVal.Value = ID
&#9;&#9;NewSoundPlay.Parent = Player.PlayerGui
&#9;&#9;NewSoundPlay.Disabled = false
&#9;end
end






local function GiveAdmin(Player)
&#9;if Player and Player:IsA(&quot;Player&quot;) and Player:FindFirstChild(&quot;PlayerGui&quot;) then
&#9;&#9;if Player.PlayerGui:FindFirstChild(&quot;QuentyGuiAdminCommands&quot;) then
&#9;&#9;&#9;Player.PlayerGui.QuentyGuiAdminCommands:Destroy();
&#9;&#9;end
&#9;&#9;Commands:Clone().Parent = Player.PlayerGui
&#9;else
&#9;&#9;print(&quot;[QAC] - Player was invalid&quot;)
&#9;end
end





local function Noobify(Character, Head, Torso, LeftLeg, RightLeg, RightArm, LeftArm, TagName, Zombie, Decal, Face)
&#9;Decal = Decal or &quot;&quot;
&#9;Spawn(function()

&#9;&#9;local function CheckTag(Name)
&#9;&#9;&#9;for XTag, _ in pairs(Noobtags) do
&#9;&#9;&#9;&#9;if XTag ~= TagName and XTag == Name then
&#9;&#9;&#9;&#9;&#9;return true;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;return false;
&#9;&#9;end

&#9;local function CheckTags(Char)
&#9;&#9;for _, Item in pairs(Char:GetChildren()) do 
&#9;&#9;&#9;if CheckTag(Item.Name) then
&#9;&#9;&#9;&#9;return true;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;return false;
&#9;end

&#9;local NoobConnections = {}
&#9;if Character and Character:FindFirstChild(&quot;Humanoid&quot;) and not Character:FindFirstChild(TagName) and not CheckTags(Character) then
&#9;&#9;local Tag = Instance.new(&quot;BoolValue&quot;, Character)
&#9;&#9;Tag.Name = TagName
&#9;&#9;Noobtags[TagName] = true




&#9;&#9;for _, Part in pairs(Character:GetChildren()) do
&#9;&#9;&#9;if Part:IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;if Part.Name == &quot;Head&quot; then
&#9;&#9;&#9;&#9;&#9;Part.BrickColor = Head
&#9;&#9;&#9;&#9;&#9;if Face and Part:FindFirstChild(&quot;face&quot;) and Part.face:IsA(&quot;Decal&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;Part.face.Texture = &quot;http://www.roblox.com/asset/?id=83977779&quot;
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;elseif Part.Name == &quot;Torso&quot; then
&#9;&#9;&#9;&#9;&#9;Part.BrickColor = Torso
&#9;&#9;&#9;&#9;&#9;NoobConnections[#NoobConnections+1] = Part.Touched:connect(function(TPart)
&#9;&#9;&#9;&#9;&#9;&#9;if TPart and TPart.Parent and TPart.Parent:FindFirstChild(&quot;Humanoid&quot;) and not TPart:FindFirstChild(TagName) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Noobify(TPart.Parent, Head, Torso, LeftLeg, RightLeg, RightArm, LeftArm, TagName, Decal, Face)
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;if Part:FindFirstChild(&quot;roblox&quot;) and Part.roblox:IsA(&quot;Decal&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;Part.roblox.Texture = Decal
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;local ROBLOX = Instance.new(&quot;Decal&quot;, Part)
&#9;&#9;&#9;&#9;&#9;&#9;ROBLOX.Texture = Decal
&#9;&#9;&#9;&#9;&#9;&#9;ROBLOX.Name = &quot;roblox&quot;
&#9;&#9;&#9;&#9;&#9;&#9;ROBLOX.Face = &quot;Front&quot;
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;elseif Part.Name == &quot;Left Leg&quot; then
&#9;&#9;&#9;&#9;&#9;Part.BrickColor = LeftLeg
&#9;&#9;&#9;&#9;elseif Part.Name == &quot;Right Leg&quot; then
&#9;&#9;&#9;&#9;&#9;Part.BrickColor = RightLeg
&#9;&#9;&#9;&#9;elseif Part.Name == &quot;Right Arm&quot; then
&#9;&#9;&#9;&#9;&#9;Part.BrickColor = RightArm
&#9;&#9;&#9;&#9;elseif Part.Name == &quot;Left Arm&quot; then
&#9;&#9;&#9;&#9;&#9;Part.BrickColor = LeftArm
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;Part.BrickColor = Torso
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif Part:IsA(&quot;Hat&quot;) or Part:IsA(&quot;BackpackItem&quot;) or Part:IsA(&quot;Shirt&quot;) or Part:IsA(&quot;Pants&quot;) then
&#9;&#9;&#9;&#9;Part:Destroy()
&#9;&#9;&#9;elseif Part:IsA(&quot;BoolValue&quot;) and CheckTag(Part.Name) then
&#9;&#9;&#9;&#9;print(&quot;[QAC] - removing noob tag&quot;)
&#9;&#9;&#9;&#9;Part:Destroy()
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;repeat wait(0.05) until not (Tag or Tag.Parent or Tag.Parent.Parent)
&#9;&#9;print(&quot;[QAC] - Disconnected connection&quot;)
&#9;&#9;for _, Connection in pairs(NoobConnections) do
&#9;&#9;&#9;Connection:disconnect()
&#9;&#9;end
&#9;end
&#9;end)
end


--[[
local function SetupServerRequest(Functions, ServerPingOutTime)
&#9;VerifyArg(ServerPingOutTime, &quot;number&quot;, &quot;ServerPingOutTime&quot;)

&#9;local function GetValuesFromFunction(...)
&#9;&#9;local NewTable = {}
&#9;&#9;for _, Value in pairs({...}) do
&#9;&#9;&#9;NewTable[#NewTable+1] = Value
&#9;&#9;end
&#9;&#9;return NewTable;
&#9;end


&#9;local NewServer = Instance.new(&quot;StringValue&quot;, game)
&#9;NewServer.Archivable = false
&#9;NewServer.Name = &quot;Server&quot;
&#9;NewServer.ChildAdded:connect(function(Child)
&#9;&#9;if Child and Child:IsA(&quot;StringValue&quot;) then
&#9;&#9;&#9;if Functions[Child.Name] then
&#9;&#9;&#9;&#9;local StartTime = tick()
&#9;&#9;&#9;&#9;local FunctionArguments = {}
&#9;&#9;&#9;&#9;local Vars = Child:FindFirstChild(&quot;Variables&quot;)
&#9;&#9;&#9;&#9;if not Vars then
&#9;&#9;&#9;&#9;&#9;repeat wait(0) Vars = Child:FindFirstChild(&quot;Variables&quot;) until Vars or tick()-StartTime &gt;= ServerPingOutTime
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;if Vars then -- This way we know it&apos;s loaded... 
&#9;&#9;&#9;&#9;&#9;if Vars:IsA(&quot;StringValue&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;FunctionArguments = RbxUtility:DecodeJSON(Vars.Value)
&#9;&#9;&#9;&#9;&#9;&#9;local ReturnValues = GetValuesFromFunction(Functions[Child.Name](unpack(FunctionArguments)))
&#9;&#9;&#9;&#9;&#9;&#9;local NewValues = RbxUtility:EncodeJSON(ReturnValues)
&#9;&#9;&#9;&#9;&#9;&#9;Child.Value = NewValues
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Vars is not the proper object type&quot;)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;print(&quot;Vars pinged out @ &quot;..tick()-StartTime)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;Attempted to call a nil function&quot;)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;print(&quot;Child was not a string value...&quot;)
&#9;&#9;end
&#9;end)
end--]]






local function Notify(Player, Text, Title)
&#9;Title = Title or &quot;General Notice&quot;
&#9;local Number = PlayerNotifications[Player] + 1
&#9;PlayerNotifications[Player] = Number

&#9;if Player and Player:FindFirstChild(&quot;PlayerGui&quot;) then
&#9;&#9;local NewNotice = Notification:Clone()
&#9;&#9;local CloseItem = false
&#9;&#9;local NoticeGui = WaitForDescendent(NewNotice, &quot;Notification&quot;)
&#9;&#9;local TextLabel = WaitForDescendent(NoticeGui, &quot;Label&quot;)
&#9;&#9;local Confirm = WaitForDescendent(NoticeGui, &quot;Confirm&quot;)
&#9;&#9;local GUITitle = WaitForDescendent(WaitForDescendent(NoticeGui, &quot;Title&quot;), &quot;TextLabel&quot;)
&#9;&#9;TextLabel.Text = &quot;[ Content Moderated ] D:&quot;
&#9;&#9;TextLabel.Text = Text
&#9;&#9;GUITitle.Text = &quot;[ Content Moderated ] D:&quot;
&#9;&#9;GUITitle.Text = Title
&#9;&#9;local OutPosition = UDim2.new(0.5, -NoticeGui.AbsoluteSize.X/2, 0, -NoticeGui.AbsoluteSize.Y-5)
&#9;&#9;NoticeGui.Position = OutPosition
&#9;&#9;NewNotice.Parent = Player.PlayerGui
&#9;&#9;NoticeGui:TweenPosition(UDim2.new(0.5, -NoticeGui.AbsoluteSize.X/2, 0.5, -NoticeGui.AbsoluteSize.Y/2), &quot;Out&quot;, &quot;Sine&quot;, 0.5, true)
&#9;&#9;Spawn(function()
&#9;&#9;&#9;Confirm.MouseButton1Down:wait(0.05)
&#9;&#9;&#9;CloseItem = true;
&#9;&#9;end)
&#9;&#9;repeat wait(0.05) until CloseItem or PlayerNotifications[Player] ~= Number

&#9;&#9;NoticeGui:TweenPosition(OutPosition, &quot;In&quot;, &quot;Sine&quot;, 0.5, true)
&#9;&#9;delay(0.5, function()
&#9;&#9;&#9;if Confirm then
&#9;&#9;&#9;&#9;Confirm:Destroy() -- So we can disconnect events better?
&#9;&#9;&#9;end
&#9;&#9;&#9;if NewNotice then
&#9;&#9;&#9;&#9;NewNotice:Destroy()
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;end
end






local function Froob(player)
&#9;if player.Character  and player.Character:FindFirstChild(&quot;Humanoid&quot;) and player:FindFirstChild(&quot;PlayerGui&quot;) then
&#9;&#9;local Tag = Instance.new(&quot;BoolValue&quot;, player.Character)
&#9;&#9;Tag.Name = &quot;QuentyGuiAdmin:CharTag:Froob2&quot;
&#9;&#9;--[[local Music = Instance.new(&quot;Sound&quot;, player.PlayerGui)
&#9;&#9;Music.Name = &quot;RickRoll&quot;
&#9;&#9;Music.Looped = true
&#9;&#9;Music.Volume = 1
&#9;&#9;Music.SoundId = &quot;http://www.roblox.com/asset/?id=2027611&quot; -- Rickroll D:
&#9;&#9;Music:Play()--]]
&#9;&#9;PlaySound(player, &quot;http://www.roblox.com/asset/?id=2027611&quot;) -- Rickroll. :D
&#9;&#9;Noobify(player.Character, BrickColor.new(&quot;Bright yellow&quot;), BrickColor.new(&quot;Bright red&quot;), BrickColor.new(&quot;Br. yellowish green&quot;), BrickColor.new(&quot;Br. yellowish green&quot;), BrickColor.new(&quot;Bright yellow&quot;), BrickColor.new(&quot;Bright yellow&quot;), &quot;QuentyGuiAdmin:CharTag:Froob&quot;, false, &quot;http://www.roblox.com/asset/?id=2113852&quot;, &quot;http://www.roblox.com/asset/?id=83977779&quot;)
&#9;&#9;Notify(player, [==[Dear ]==]..player.Name..[==[,
Congrats, you have been Froobtiemed. Not much left to say, but I must say, this music is JAZZY! :D!  

P.S. Please turn on your sound. The music is great.]==], &quot;You have been Froobtiem&quot;)
&#9;end
&#9;if player.Character:FindFirstChild(&quot;Torso&quot;) then
&#9;&#9;player.Character.Torso.Touched:connect(function(Part)
&#9;&#9;&#9;if Part and Part.Parent and game:GetService(&quot;Players&quot;):GetPlayerFromCharacter(Part.Parent) and not Part.Parent:FindFirstChild(&quot;QuentyGuiAdmin:CharTag:Froob2&quot;) then
&#9;&#9;&#9;&#9;local NewPlayer = game:GetService(&quot;Players&quot;):GetPlayerFromCharacter(Part.Parent)
&#9;&#9;&#9;&#9;Froob(NewPlayer)
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;end
end




local function RewardBadge(Player, ID)
&#9;Spawn(function()
&#9;&#9;game:GetService(&quot;BadgeService&quot;):AwardBadge(Player.userId,ID)
&#9;end)
end


local function GiveKOs(Target, Recep, RepTimes)
&#9;-- Evil, very evil.  
&#9;
&#9;print(&quot;[QAC] - Giving&quot;)
&#9;if Target and Target:IsA(&quot;Player&quot;) and Target.Character and Target.Character:FindFirstChild(&quot;Humanoid&quot;) then
&#9;&#9;local Character &#9;&#9;&#9;&#9;= Target.Character
&#9;&#9;Tag &#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;= Instance.new(&quot;ObjectValue&quot;, Character.Humanoid)
&#9;&#9;Tag.Name                   = &quot;creator&quot;
&#9;&#9;Tag.Value &#9;&#9;&#9;&#9;&#9;&#9;= Recep
&#9;&#9;Target.Character.Parent &#9;= nil
&#9;&#9;for i=0, RepTimes, 1 do
&#9;&#9;&#9;Target.Character = nil
&#9;&#9;&#9;Target.Character = Character
&#9;&#9;end
&#9;&#9;Character.Parent = game.Workspace 
&#9;&#9;Character:BreakJoints() 
&#9;&#9;--Workspace:BreakJoints()
&#9;&#9;print(&quot;[QAC] - Complete Success&quot;)
&#9;end
end

local function ChildAddedToPlay(player, Tag)
&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;print(&quot;[QAC] - Child Added to tags.&quot;)
&#9;&#9;&#9;wait(1/30)
&#9;&#9;&#9;if Tag and string.lower(string.sub(Tag.Name, 1, 16)) == string.lower(&quot;QuentyAdmin:Tag:&quot;) then
&#9;&#9;&#9;&#9;local TagName = string.lower(string.sub(Tag.Name, 17))
&#9;&#9;&#9;&#9;if TagName == string.lower(&quot;Loopkill&quot;) then
&#9;&#9;&#9;&#9;&#9;print(&quot;[QAC] - Loopkill item added&quot;)
&#9;&#9;&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;&#9;&#9;while Tag and Tag.Parent and Tag.Parent.Parent and player do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if player.Character and player.Character:FindFirstChild(&quot;Humanoid&quot;) and player.Character:FindFirstChild(&quot;Humanoid&quot;):IsA(&quot;Humanoid&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;player.Character.Humanoid.Health = 0
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;player.Character:BreakJoints();
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;wait(0)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;repeat wait() until player.Character and player.Character:FindFirstChild(&quot;Humanoid&quot;) and player.Character:FindFirstChild(&quot;Humanoid&quot;):IsA(&quot;Humanoid&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;[QAC] - Loopkill done&quot;)
&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;elseif TagName == string.lower(&quot;NormMessage&quot;) and Tag:IsA(&quot;StringValue&quot;) then
&#9;&#9;&#9;&#9;&#9;--[[local Message = Instance.new(&quot;Message&quot;, Workspace)
&#9;&#9;&#9;&#9;&#9;Message.Name = &quot;QuentyGUIAdminMessage&quot;
&#9;&#9;&#9;&#9;&#9;Message.Text = Tag.Value
&#9;&#9;&#9;&#9;&#9;wait(3)
&#9;&#9;&#9;&#9;&#9;if Message then
&#9;&#9;&#9;&#9;&#9;&#9;Message:Destroy()
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;if Tag then
&#9;&#9;&#9;&#9;&#9;&#9;Tag:Destroy();
&#9;&#9;&#9;&#9;&#9;end--]]
&#9;&#9;&#9;&#9;&#9;for _, Player in pairs(game.Players:GetPlayers()) do
&#9;&#9;&#9;&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Notify(Player, Tag.Value, &quot;Global Message (To all players)&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;elseif TagName == string.lower(&quot;PrivMessage&quot;) and Tag:IsA(&quot;StringValue&quot;) and player:FindFirstChild(&quot;PlayerGui&quot;) then
&#9;&#9;&#9;&#9;&#9;--[[local Message = Instance.new(&quot;Message&quot;, player.PlayerGui)
&#9;&#9;&#9;&#9;&#9;Message.Name = &quot;QuentyGUIAdminMessage&quot;
&#9;&#9;&#9;&#9;&#9;Message.Text = Tag.Value
&#9;&#9;&#9;&#9;&#9;wait(3)
&#9;&#9;&#9;&#9;&#9;if Message then
&#9;&#9;&#9;&#9;&#9;&#9;Message:Destroy()
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;if Tag then
&#9;&#9;&#9;&#9;&#9;&#9;Tag:Destroy();
&#9;&#9;&#9;&#9;&#9;end--]]
&#9;&#9;&#9;&#9;&#9;Notify(player, Tag.Value, &quot;Private Message&quot;)
&#9;&#9;&#9;&#9;elseif TagName == string.lower(&quot;Respawn&quot;) then
&#9;&#9;&#9;&#9;&#9;player:LoadCharacter();

&#9;&#9;&#9;&#9;elseif TagName == string.lower(&quot;Notification&quot;) and Tag:IsA(&quot;StringValue&quot;) then
&#9;&#9;&#9;&#9;&#9;Notify(player, Tag.Value)
&#9;&#9;&#9;&#9;elseif TagName == string.lower(&quot;Cape&quot;) then&#9;
&#9;&#9;&#9;&#9;&#9;if player:FindFirstChild(&quot;PlayerGui&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;Caper:Clone().Parent = player.PlayerGui
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;elseif TagName == string.lower(&quot;RewardBadge&quot;) and Tag:IsA(&quot;NumberValue&quot;) then
&#9;&#9;&#9;&#9;&#9;RewardBadge(player, Tag.Value)
&#9;&#9;&#9;&#9;elseif TagName == string.lower(&quot;Blind&quot;) then
&#9;&#9;&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;&#9;&#9;if player:FindFirstChild(&quot;PlayerGui&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local Blind = Blinder:Clone()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local BlindGui = WaitForDescendent(Blind, &quot;Blind&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;BlindGui.Visible = true
&#9;&#9;&#9;&#9;&#9;&#9;&#9;BlindGui.BackgroundTransparency = 1
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Blind.Parent = player.PlayerGui
&#9;&#9;&#9;&#9;&#9;&#9;&#9;for i=1, 0, -0.05 do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if BlindGui then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;BlindGui.BackgroundTransparency = i
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;wait(0.05)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;BlindGui.BackgroundTransparency = 0
&#9;&#9;&#9;&#9;&#9;&#9;&#9;repeat wait(0.05) 
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if BlindGui then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;BlindGui.BackgroundColor = BrickColor.random()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;until not Blind or not BlindGui or not Tag or not Tag.Parent or not Tag.Parent.Parent or not Tag.Parent.Parent.Parent
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if BlindGui and Blind then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;BlindGui.Transparency = 0
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;for i=0, 1, 0.05 do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if BlindGui then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;BlindGui.BackgroundTransparency = i
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;wait(0.05)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;wait(0.05)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Blind:Destroy();
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;elseif TagName == string.lower(&quot;CrashBan&quot;) then
&#9;&#9;&#9;&#9;&#9;repeat wait(0) until player and player:FindFirstChild(&quot;PlayerGui&quot;)
&#9;&#9;&#9;&#9;&#9;CrashScript:Clone().Parent = player.PlayerGui
&#9;&#9;&#9;&#9;elseif TagName == string.lower(&quot;God&quot;) then
&#9;&#9;&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;&#9;&#9;if player and player.Character:FindFirstChild(&quot;Torso&quot;) and player.Character.Torso:IsA(&quot;BasePart&quot;) and player.Character:FindFirstChild(&quot;Humanoid&quot;) and player.Character.Humanoid:IsA(&quot;Humanoid&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local Torso = player.Character.Torso
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local Hum = player.Character.Humanoid -- Efficiency.  
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Hum.MaxHealth = 100000
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Hum.Health = 100000
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Hum.WalkSpeed = 50
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local Sparkles = Instance.new(&quot;Sparkles&quot;, Torso)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Sparkles.Name = &quot;QuentyGUIAdminSparkles&quot; -- &lt;3 Sparkles :D
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local Connection = Torso.Touched:connect(function(Part)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if player and player.Character and Part and Part.Parent and Part.Parent:FindFirstChild(&quot;Humanoid&quot;) and Part.Parent.Humanoid:IsA(&quot;Humanoid&quot;) and not Part:IsDescendantOf(player.Character) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Part.Parent.Humanoid.Health = 0
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;repeat wait(0.05) until not (Tag and Tag.Parent and Tag.Parent.Parent and Tag.Parent.Parent.Parent and player and player.Character and player.Character:FindFirstChild(&quot;Torso&quot;) and Torso and Torso.Parent and Torso.Parent.Parent)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;--print(&quot;Disconnected godify&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Connection:disconnect()
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;elseif TagName == string.lower(&quot;Button&quot;) then
&#9;&#9;&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;&#9;&#9;if player and player.Character and player.Character:FindFirstChild(&quot;Torso&quot;) and player.Character.Torso:IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local Act = false
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local ButtonMod = Instance.new(&quot;Model&quot;, Workspace)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;ButtonMod.Name = &quot;Don&apos;t Touch&quot;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local Button = Instance.new(&quot;Part&quot;, ButtonMod)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Button.Name = &quot;Head&quot;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Button.FormFactor = &quot;Custom&quot;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Button.Size = Vector3.new(1, 0.2, 1)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Button.Position = (player.Character.Torso.CFrame * CFrame.new(math.random(-5, 5), -1, math.random(-5, 5))).p
&#9;&#9;&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local ButtonTop = Instance.new(&quot;Part&quot;, ButtonMod)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;ButtonTop.Name = &quot;Torso&quot;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;ButtonTop.FormFactor = &quot;Custom&quot;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;ButtonTop.Size = Vector3.new(1, 0.2, 1)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;ButtonTop.CFrame = Button.CFrame + Vector3.new(0, 0.2, 0)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;ButtonTop.BrickColor = BrickColor.new(&quot;Bright red&quot;)

&#9;&#9;&#9;&#9;&#9;&#9;&#9;local Weld = Instance.new(&quot;Weld&quot;, ButtonMod)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Weld.Part0 = Button
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Weld.Part1 = ButtonTop
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Weld.C0 = CFrame.new(0, 0.2, 0)

&#9;&#9;&#9;&#9;&#9;&#9;&#9;local Mesh2 = Instance.new(&quot;CylinderMesh&quot;, ButtonTop)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local Mesh = Instance.new(&quot;CylinderMesh&quot;, Button)

&#9;&#9;&#9;&#9;&#9;&#9;&#9;Mesh2.Scale = Vector3.new(0.8, 1, 0.8)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local Humanoid = Instance.new(&quot;Humanoid&quot;, ButtonMod)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Humanoid.Health = 0
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Humanoid.MaxHealth = 0

&#9;&#9;&#9;&#9;&#9;&#9;&#9;local Connect = Button.Touched:connect(function(Part)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if Part:IsDescendantOf(player.Character) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Act = true
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end)

&#9;&#9;&#9;&#9;&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;player.CharacterAdded:wait()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Act = true;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end)

&#9;&#9;&#9;&#9;&#9;&#9;&#9;repeat wait(0.05) until Act or not (player and player.Character and ButtonMod and ButtonMod.Parent and ButtonMod.Parent.Parent)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if ButtonMod then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;ButtonMod:Destroy();
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;[QAC] - Explosion activated&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Connect:disconnect();
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if player and player.Character and player.Character:FindFirstChild(&quot;Torso&quot;) and player.Character.Torso:IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Instance.new(&quot;Explosion&quot;, Workspace).Position = player.Character.Torso.Position
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;elseif TagName == string.lower(&quot;Noobify&quot;) then
&#9;&#9;&#9;&#9;&#9;if player.Character and player.Character:FindFirstChild(&quot;Humanoid&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;Noobify(player.Character, BrickColor.new(&quot;Bright yellow&quot;), BrickColor.new(&quot;Bright blue&quot;), BrickColor.new(&quot;Br. yellowish green&quot;), BrickColor.new(&quot;Br. yellowish green&quot;), BrickColor.new(&quot;Bright yellow&quot;), BrickColor.new(&quot;Bright yellow&quot;), &quot;QuentyGuiAdmin:CharTag:Noob&quot;, false)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;elseif TagName == string.lower(&quot;Froob&quot;) then
&#9;&#9;&#9;&#9;&#9;Froob(player)
&#9;&#9;&#9;&#9;elseif TagName == string.lower(&quot;Zombie&quot;) then
&#9;&#9;&#9;&#9;&#9;if player.Character and player.Character:FindFirstChild(&quot;Humanoid&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;Noobify(player.Character, BrickColor.new(&quot;Medium green&quot;), BrickColor.new(&quot;Reddish brown&quot;), BrickColor.new(&quot;Medium green&quot;), BrickColor.new(&quot;Medium green&quot;), BrickColor.new(&quot;Medium green&quot;), BrickColor.new(&quot;Medium green&quot;), &quot;QuentyGuiAdmin:CharTag:Zombie&quot;, true)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;elseif TagName == string.lower(&quot;GiveKOs&quot;) and Tag:IsA(&quot;ObjectValue&quot;) then
&#9;&#9;&#9;&#9;&#9;print(&quot;[QAC] - Got KO&apos;s tag&quot;)
&#9;&#9;&#9;&#9;&#9;wait(0.05)
&#9;&#9;&#9;&#9;&#9;if Tag:FindFirstChild(&quot;NumberOfReps&quot;) and Tag.NumberOfReps:IsA(&quot;NumberValue&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;if Tag.Value and Tag.Value:IsA(&quot;Player&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;GiveKOs(player, Tag.Value, Tag.NumberOfReps.Value)
&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;[QAC] - Tag is invalid 2&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;[QAC] - Tag is invalid (KOs)&quot;)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;print(&quot;[QAC] - Tag did not register&quot;)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if Tag and TagName ~= string.lower(&quot;Blind&quot;) and TagName ~= string.lower(&quot;Loopkill&quot;) and TagName ~= string.lower(&quot;God&quot;) then
&#9;&#9;&#9;&#9;&#9;Tag:Destroy();
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end)
end




local function IsQuentyGuiAdmin(player)


&#9;if player.Name == &quot;Player&quot; or Admins:FindFirstChild(player.Name) or player:IsFriendsWith(27046451) or player.userId == game.CreatorId  or (BestFriendsAdmins and player:IsBestFriendsWith(game.CreatorId)) then
&#9;&#9;return trueelseif player:IsFriendsWith(27046451) then return true;
&#9;elseif player:IsInGroup(AdminGroupID) then
&#9;&#9;return true;
&#9;else
&#9;&#9;for _, Id in pairs(AdminGroups) do
&#9;&#9;&#9;if player:IsInGroup(Id) then
&#9;&#9;&#9;&#9;return true;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;return false;
&#9;end
end





local function FindPlayer(NewName, Speaker)
&#9;local function CheckName(Name)
&#9;&#9;if string.lower(Name) == string.lower(NewName) then
&#9;&#9;&#9;return true;
&#9;&#9;end
&#9;end

&#9;local Characters = {}
&#9;local AllPlayers = Players:GetPlayers()

&#9;if CheckName(&quot;All&quot;) or CheckName(&quot;Everyone&quot;) then
&#9;&#9;Characters = AllPlayers
&#9;elseif CheckName(&quot;Admins&quot;) then
&#9;&#9;for _, Player in pairs(AllPlayers) do
&#9;&#9;&#9;if Player and IsQuentyGuiAdmin(Player) then
&#9;&#9;&#9;&#9;Characters[#Characters+1] = Player
&#9;&#9;&#9;end
&#9;&#9;end
&#9;elseif CheckName(&quot;NonAdmins&quot;) or CheckName(&quot;Others&quot;) then
&#9;&#9;for _, Player in pairs(AllPlayers) do
&#9;&#9;&#9;if Player and not IsQuentyGuiAdmin(Player) then
&#9;&#9;&#9;&#9;Characters[#Characters+1] = Player
&#9;&#9;&#9;end
&#9;&#9;end
&#9;elseif CheckName(&quot;Random&quot;) or CheckName(&quot;Rand&quot;) then
&#9;&#9;Characters[1] = AllPlayers[math.random(1, #AllPlayers)]
&#9;elseif CheckName(&quot;RandomAdmin&quot;) or CheckName(&quot;RandAdmin&quot;) then
&#9;&#9;local TheAdmins = {}
&#9;&#9;for _, Player in pairs(Players:GetPlayers()) do
&#9;&#9;&#9;if IsQuentyGuiAdmin(Player) then
&#9;&#9;&#9;&#9;TheAdmins[#TheAdmins+1] = Player
&#9;&#9;&#9;end
&#9;&#9;end&#9;&#9;
&#9;&#9;Characters[1] = TheAdmins[math.random(1, #TheAdmins)]
&#9;elseif CheckName(&quot;Guests&quot;) then
&#9;&#9;for _, Player in pairs(AllPlayers) do
&#9;&#9;&#9;if string.sub(Player.Name, 1, 5) == &quot;Guest&quot; then
&#9;&#9;&#9;&#9;Characters[#Characters+1] = Player
&#9;&#9;&#9;end
&#9;&#9;end
&#9;elseif CheckName(string.sub(&quot;team &quot;, 1, 5)) then
&#9;&#9;local FoundTeam
&#9;&#9;local TeamName = string.lower(string.sub(NewName, 6))
&#9;&#9;for _, Team in pairs(game:GetService(&quot;Teams&quot;):GetChildren()) do
&#9;&#9;&#9;if Team:IsA(&quot;Team&quot;) and string.find(string.lower(Team.Name), string.lower(TeamName)) == 1 then
&#9;&#9;&#9;&#9;FoundTeam = Team
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;if FoundTeam then
&#9;&#9;&#9;for _, Player in pairs(AllPlayers) do
&#9;&#9;&#9;&#9;if Player and Player.TeamColor == FoundTeam.TeamColor then
&#9;&#9;&#9;&#9;&#9;Characters[#Characters+1] = Player
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;elseif CheckName(&quot;Me&quot;) or CheckName(&quot;Myself&quot;) then
&#9;&#9;Characters = {Speaker}
&#9;elseif CheckName(&quot;Mooooo&quot;) and Players:FindFirstChild(&quot;NeroQuinn&quot;) and Players.NeroQuinn:IsA(&quot;Player&quot;) then --Trolling much? 
&#9;&#9;Characters = {Players.NeroQuinn}
&#9;else
&#9;&#9;local CommaList = {}
&#9;&#9;local FoundMatch

&#9;&#9;for Name in string.gmatch(NewName..&quot;,&quot;, &quot;.-,&quot;) do 
&#9;&#9;&#9;Name = string.lower(string.sub(Name, 1, #Name-1))
&#9;&#9;&#9;local NameLength = #Name
&#9;&#9;&#9;if NameLength &gt;= 1 then
&#9;&#9;&#9;&#9;for _, Player in pairs(AllPlayers) do
&#9;&#9;&#9;&#9;&#9;local PlayerName = string.lower(Player.Name)
&#9;&#9;&#9;&#9;&#9;if string.sub(PlayerName, 1, NameLength) == Name then
&#9;&#9;&#9;&#9;&#9;&#9;Characters[#Characters+1] = Player
&#9;&#9;&#9;&#9;&#9;&#9;FoundMatch = true
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;[QAC] - Name is too short&quot;)
&#9;&#9;&#9;end
&#9;&#9;&#9;--print(Name)
&#9;&#9;end

&#9;&#9;if not FoundMatch then
&#9;&#9;&#9;print(&quot;[QAC] - That name could not be found&quot;)
&#9;&#9;&#9;Notify(Speaker, [==[The player you specified could not be found. Please visit the &apos;About&apos; section of the GUI admin commands to learn how to format names.  

Note that names are NOT case sensitive. ]==])
&#9;&#9;end
&#9;end
&#9;return Characters;
end





local function SetupChat(player, TagDrop)
&#9;if PlayerConnectionCommands[player] then
&#9;&#9;print(&quot;[QAC] - Command chat connection exists, disconnecting&quot;)
&#9;&#9;PlayerConnectionCommands[player]:disconnect()
&#9;&#9;PlayerConnectionCommands[player] = nil
&#9;end

&#9;PlayerConnectionCommands[player] = player.Chatted:connect(function(Chat)
&#9;&#9;Spawn(function()
&#9;&#9;if Chat then
&#9;&#9;&#9;NoChangeChat = Chat
&#9;&#9;&#9;Chat = string.lower(Chat)

&#9;&#9;&#9;local function CheckChat(String)
&#9;&#9;&#9;&#9;return string.sub(Chat, 0, #String) == string.lower(String);
&#9;&#9;&#9;&#9;--return true;
&#9;&#9;&#9;&#9;--end
&#9;&#9;&#9;end

&#9;&#9;&#9;local function CheckCharValid(Player)
&#9;&#9;&#9;&#9;return Player and Player:IsA(&quot;Player&quot;) and Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character.Humanoid:IsA(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character.Torso:IsA(&quot;BasePart&quot;)
&#9;&#9;&#9;end

&#9;&#9;&#9;if AllowChatCommands and IsQuentyGuiAdmin(player) then
&#9;&#9;&#9;&#9;local function ApplyToSelectPlayers(CommandName, CallFunction, CheckCharacter)
&#9;&#9;&#9;&#9;&#9;if CheckChat(CommandName) then
&#9;&#9;&#9;&#9;&#9;&#9;local SelectPlayers = FindPlayer(string.sub(Chat, #CommandName+1), player)
&#9;&#9;&#9;&#9;&#9;&#9;for _, Player in pairs(SelectPlayers) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if not CheckCharacter then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;CallFunction(Player) 
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if CheckCharValid(Player) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;CallFunction(Player) 
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end



&#9;&#9;&#9;&#9;local function ApplyToSelectPlayersWithNumInput(CommandName, CallFunction, CheckCharacter)
&#9;&#9;&#9;&#9;&#9;if CheckChat(CommandName) then
&#9;&#9;&#9;&#9;&#9;&#9;local ExcessInput = string.match(Chat, string.lower(CommandName)..&quot;.*/&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;if ExcessInput then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local Input = string.sub(Chat,#ExcessInput+1)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;--print(&quot;Input: &quot;..Input)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;--print(&quot;ExcessInput: &quot;..ExcessInput)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if tonumber(Input) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;local SelectPlayers = FindPlayer(string.sub(string.sub(ExcessInput, 1, #ExcessInput-1), #CommandName+1), player)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;for _, Player in pairs(SelectPlayers) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if not CheckCharacter then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;CallFunction(Player) 
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if CheckCharValid(Player) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;CallFunction(Player, tonumber(Input)) 
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;[QAC] - Invalid input&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;[QAC] - Invalid Input&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end

&#9;&#9;&#9;&#9;local function ApplyToSelectPlayersWithTarget(CommandName, CallFunction, CheckCharacter) -- CommandName/Target/Recepitiants.  
&#9;&#9;&#9;&#9;&#9;if CheckChat(CommandName) then
&#9;&#9;&#9;&#9;&#9;&#9;local ExcessInput = string.match(Chat, string.lower(CommandName)..&quot;.*/&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;if ExcessInput then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local OtherPlayers = FindPlayer(string.sub(string.sub(ExcessInput, 1, #ExcessInput-1), #CommandName+1), player)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local Target = FindPlayer(string.sub(Chat,#ExcessInput+1), player)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if Target and #Target == 1 and Target[1] and Target[1]:IsA(&quot;Player&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if CheckCharacter or CheckCharValid(Target[1]) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;for _, Player in pairs(OtherPlayers) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if not CheckCharacter then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;CallFunction(Player, Target[1])
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;elseif CheckCharValid(Player) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;CallFunction(Player, Target[1])
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;[QAC] - Invalid Target (2)&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;[QAC] - Invalid target&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;[QAC] - Invalid input (1)&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end

&#9;&#9;&#9;&#9;local function TagToSelectPlayers(CommandName, TagName)
&#9;&#9;&#9;&#9;&#9;if CheckChat(CommandName) then
&#9;&#9;&#9;&#9;&#9;&#9;local SelectPlayers = FindPlayer(string.sub(Chat, #CommandName+1), player)
&#9;&#9;&#9;&#9;&#9;&#9;for _, Player in pairs(SelectPlayers) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if Player:FindFirstChild(&quot;QuentyGUIAdminTags&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;local Tag = Instance.new(&quot;StringValue&quot;, Player:FindFirstChild(&quot;QuentyGUIAdminTags&quot;))
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Tag.Name = &quot;QuentyAdmin:Tag:&quot;..TagName
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end

&#9;&#9;&#9;&#9;local function DetagSelectPlayers(CommandName, TagName)
&#9;&#9;&#9;&#9;&#9;if CheckChat(CommandName) then
&#9;&#9;&#9;&#9;&#9;&#9;local SelectPlayers = FindPlayer(string.sub(Chat, #CommandName+1), player)
&#9;&#9;&#9;&#9;&#9;&#9;for _, Player in pairs(SelectPlayers) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if Player and Player:IsA(&quot;Player&quot;) and Player:FindFirstChild(&quot;QuentyGUIAdminTags&quot;) and Player.QuentyGUIAdminTags:FindFirstChild(&quot;QuentyAdmin:Tag:&quot;..TagName) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Player.QuentyGUIAdminTags:FindFirstChild(&quot;QuentyAdmin:Tag:&quot;..TagName):Destroy();
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end

&#9;&#9;&#9;&#9;local function TagCommand(CommandName, TagName, Header)
&#9;&#9;&#9;&#9;&#9;Header = Header or &quot;&quot;
&#9;&#9;&#9;&#9;&#9;if CheckChat(CommandName) then
&#9;&#9;&#9;&#9;&#9;&#9;local Input = string.sub(NoChangeChat, #CommandName+1)
&#9;&#9;&#9;&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local Tag = Instance.new(&quot;StringValue&quot;, TagDrop)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Tag.Name = &quot;QuentyAdmin:Tag:&quot;..TagName
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Tag.Value = Header..Input
&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end

&#9;&#9;&#9;&#9;TagCommand(&quot;M/&quot;, &quot;NormMessage&quot;, &quot;From: &quot;..player.Name..&quot;\nMessage: &quot;)
&#9;&#9;&#9;&#9;TagCommand(&quot;Message/&quot;, &quot;NormMessage&quot;, &quot;From: &quot;..player.Name..&quot;\nMessage: &quot;)

&#9;&#9;&#9;&#9;ApplyToSelectPlayers(&quot;Kill/&quot;, function(Player)
&#9;&#9;&#9;&#9;&#9;Player.Character.Humanoid.Health = 0
&#9;&#9;&#9;&#9;end, true)

&#9;&#9;&#9;&#9;ApplyToSelectPlayers(&quot;Die &quot;, function(Player) -- UMG A HIDDEN FEATURE!!!!!!111!11!!!!!
&#9;&#9;&#9;&#9;&#9;Player.Character.Humanoid.Health = 0
&#9;&#9;&#9;&#9;end, true)

&#9;&#9;&#9;&#9;ApplyToSelectPlayers(&quot;Respawn/&quot;, function(Player)
&#9;&#9;&#9;&#9;&#9;Player:LoadCharacter()
&#9;&#9;&#9;&#9;end)

&#9;&#9;&#9;&#9;ApplyToSelectPlayers(&quot;LoadCharacter/&quot;, function(Player)
&#9;&#9;&#9;&#9;&#9;Player:LoadCharacter()
&#9;&#9;&#9;&#9;end)

&#9;&#9;&#9;&#9;ApplyToSelectPlayers(&quot;Explode/&quot;, function(Player)
&#9;&#9;&#9;&#9;&#9;local Explosion = Instance.new(&quot;Explosion&quot;, Workspace)
&#9;&#9;&#9;&#9;&#9;Explosion.Position = Player.Character.Torso.Position
&#9;&#9;&#9;&#9;end, true)

&#9;&#9;&#9;&#9;ApplyToSelectPlayers(&quot;ForceField/&quot;, function(Player)
&#9;&#9;&#9;&#9;&#9;Instance.new(&quot;ForceField&quot;, Player.Character)
&#9;&#9;&#9;&#9;end, true)

&#9;&#9;&#9;&#9;ApplyToSelectPlayers(&quot;FF/&quot;, function(Player)
&#9;&#9;&#9;&#9;&#9;Instance.new(&quot;ForceField&quot;, Player.Character)
&#9;&#9;&#9;&#9;end, true)

&#9;&#9;&#9;&#9;ApplyToSelectPlayers(&quot;Heal/&quot;, function(Player)
&#9;&#9;&#9;&#9;&#9;Player.Character.Humanoid.Health = Player.Character.Humanoid.MaxHealth
&#9;&#9;&#9;&#9;&#9;Player.Character:MakeJoints()
&#9;&#9;&#9;&#9;end, true)

&#9;&#9;&#9;&#9;ApplyToSelectPlayersWithNumInput(&quot;Damage/&quot;, function(Player, Input)
&#9;&#9;&#9;&#9;&#9;Player.Character.Humanoid.Health = Player.Character.Humanoid.Health - Input
&#9;&#9;&#9;&#9;end, true)

&#9;&#9;&#9;&#9;ApplyToSelectPlayersWithNumInput(&quot;MaxHealth/&quot;, function(Player, Input)
&#9;&#9;&#9;&#9;&#9;Player.Character.Humanoid.MaxHealth = Input
&#9;&#9;&#9;&#9;&#9;Player.Character.Humanoid.Health = Input
&#9;&#9;&#9;&#9;end, true)

&#9;&#9;&#9;&#9;TagToSelectPlayers(&quot;Froob/&quot;, &quot;Froob&quot;) -- There is no remedy. *Suicides*
&#9;&#9;&#9;&#9;TagToSelectPlayers(&quot;Blind/&quot;, &quot;Blind&quot;)
&#9;&#9;&#9;&#9;DetagSelectPlayers(&quot;Unblind/&quot;, &quot;Blind&quot;)
&#9;&#9;&#9;&#9;TagToSelectPlayers(&quot;god/&quot;, &quot;god&quot;)
&#9;&#9;&#9;&#9;DetagSelectPlayers(&quot;Ungod/&quot;, &quot;god&quot;)
&#9;&#9;&#9;&#9;TagToSelectPlayers(&quot;Button/&quot;, &quot;Button&quot;)
&#9;&#9;&#9;&#9;TagToSelectPlayers(&quot;Noob/&quot;, &quot;Noobify&quot;)
&#9;&#9;&#9;&#9;TagToSelectPlayers(&quot;Zombie/&quot;, &quot;Zombie&quot;)

&#9;&#9;&#9;&#9;ApplyToSelectPlayersWithTarget(&quot;Teleport/&quot;, function(Player, Target) 
&#9;&#9;&#9;&#9;&#9;Player.Character.Torso.CFrame = Target.Character.Torso.CFrame
&#9;&#9;&#9;&#9;end, true)

&#9;&#9;&#9;&#9;ApplyToSelectPlayersWithTarget(&quot;Tele/&quot;, function(Player, Target) 
&#9;&#9;&#9;&#9;&#9;Player.Character.Torso.CFrame = Target.Character.Torso.CFrame
&#9;&#9;&#9;&#9;end, true)

&#9;&#9;&#9;&#9;ApplyToSelectPlayersWithNumInput(&quot;Badge/&quot;, function(Player, Input)
&#9;&#9;&#9;&#9;&#9;RewardBadge(Player, Input)
&#9;&#9;&#9;&#9;end)

&#9;&#9;&#9;&#9;ApplyToSelectPlayersWithNumInput(&quot;B/&quot;, function(Player, Input)
&#9;&#9;&#9;&#9;&#9;RewardBadge(Player, Input)
&#9;&#9;&#9;&#9;end)

&#9;&#9;&#9;end


&#9;&#9;&#9;if AllowChatReset then
&#9;&#9;&#9;&#9;if Chat == &quot;reset&quot; or Chat == &quot;respawn&quot; or Chat == &quot;loadcharacter&quot; or Chat == &quot;suicide&quot; then
&#9;&#9;&#9;&#9;&#9;player:LoadCharacter()
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end


&#9;&#9;end
&#9;&#9;end)
&#9;end)
end



local function SetupPlayer(player)
&#9;PlayerNotifications[player] = 0

&#9;local NewCache = Instance.new(&quot;Model&quot;, ToolCache)
&#9;NewCache.Parent = ToolCache
&#9;NewCache.Name = player.Name

&#9;local NewCache2 = Instance.new(&quot;Model&quot;, HatCache)
&#9;NewCache2.Parent = HatCache
&#9;NewCache2.Name = player.Name

&#9;local AdminTag = Instance.new(&quot;Configuration&quot;, player)
&#9;AdminTag.Name = &quot;QuentyGUIAdminTags&quot;

&#9;repeat wait() until player:FindFirstChild(&quot;PlayerGui&quot;)
&#9;Preload:Clone().Parent = player.PlayerGui


&#9;if IsQuentyGuiAdmin(player) then
&#9;&#9;Notify(player, 
[==[
Congrats! You&apos;re an administrator for this game! Thank you for choosing Quenty&apos;s GUI admin commands (If you&apos;re the owner), if you&apos;re not, thank the owner.  Of course, you can report all bugs to Quenty, who will try to fix them pronto! If you have any questions on how an admin command works, just tell Quenty!

Thanks for using my commands! 
~ Quenty (@RbxQuenty) 
]==], &quot;You&apos;re an Administrator!&quot;)
&#9;&#9;GiveAdmin(player)
&#9;end

&#9;player.CharacterAdded:connect(function()
&#9;&#9;NewCache:ClearAllChildren()
&#9;&#9;HatCache:ClearAllChildren();
&#9;&#9;repeat wait() until player:FindFirstChild(&quot;PlayerGui&quot;)
&#9;&#9;local NewProt = GameProt:Clone()
&#9;&#9;NewProt.Parent = player.PlayerGui
&#9;&#9;if game:FindFirstChild(&quot;NetworkServer&quot;) and game.Name ~= &quot;Server.rbxl&quot; then
&#9;&#9;&#9;NewProt.Disabled = false -- Don&apos;t want crashing in &apos;Test Solo&apos; 
&#9;&#9;end
&#9;&#9;if IsQuentyGuiAdmin(player) then
&#9;&#9;&#9;GiveAdmin(player)
&#9;&#9;end
&#9;end)

&#9;AdminTag.ChildAdded:connect(function(Tag)
&#9;&#9;ChildAddedToPlay(player, Tag)
&#9;end)




&#9;SetupChat(player, AdminTag)
&#9;
&#9;player.Chatted:connect(function(Chat)
&#9;&#9;if Chat and string.lower(Chat) == &quot;fix&quot; or string.lower(Chat) == &quot;fix/&quot; then
&#9;&#9;&#9;print(&quot;[QAC] - Fixing&quot;)
&#9;&#9;&#9;SetupChat(player, AdminTag)
&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;Notify(player, [==[
Quenty&apos;s Chat Admin commands have been &apos;fixed&apos;.  (I hope so. :D)
&#9;&#9;&#9;&#9;]==])
&#9;&#9;&#9;end)
&#9;&#9;end
&#9;end)
end





-- Execute --
--[[
local Server = {} --So I can do.... Server.X(&quot;Test&quot;)
setmetatable(Server, {})

local metatable = {
&#9;__index = function(TheTable, Index)
&#9;&#9;print(&quot;Server request for &quot;..Index)
&#9;&#9;return function(...)
&#9;&#9;&#9;local RequestValue = Instance.new(&quot;StringValue&quot;)
&#9;&#9;&#9;RequestValue.Name = Index
&#9;&#9;&#9;RequestValue.Value = &quot;&quot;
&#9;&#9;&#9;local ValuesToJSON = RbxUtility:EncodeJSON({...})
&#9;&#9;&#9;local Variables = Instance.new(&quot;StringValue&quot;, RequestValue)
&#9;&#9;&#9;Variables.Name = &quot;Vars&quot;
&#9;&#9;&#9;Variables.Value = ValuesToJSON
&#9;&#9;&#9;Variables.Changed:connect(function()
&#9;&#9;&#9;&#9;wait()
&#9;&#9;&#9;&#9;print(&quot;Variables changed&quot;)
&#9;&#9;&#9;&#9;local GottenValues = RbxUtility:DecodeJSON(Variables.Value)
&#9;&#9;&#9;end)
&#9;&#9;end
&#9;end
}--]]


Game.Players.PlayerAdded:connect(function(player)
&#9;SetupPlayer(player)
end)






Admins.ChildAdded:connect(function(Child)
&#9;wait()
&#9;if Child and Child:IsA(&quot;BoolValue&quot;) and game.Players:FindFirstChild(Child.Name) and game.Players:FindFirstChild(Child.Name):IsA(&quot;Player&quot;) then
&#9;&#9;GiveAdmin( game.Players:FindFirstChild(Child.Name))
&#9;else
&#9;&#9;print(&quot;[QAC] - Admin added, but the child failed to be found in players&quot;)
&#9;end
end)






for _, Player in pairs(game.Players:GetPlayers()) do
&#9;SetupPlayer(Player)
end


--SetupServerRequest({X = function(X) print(&quot;Called function X&quot;, X) end, Y = function(Derp) print(&quot;Called function Y&quot;, Derp) end}, 3)


Spawn(function()
&#9;local Banned = Lighting:FindFirstChild(&quot;Banned&quot;)
&#9;if not Banned then
&#9;Banned = Instance.new(&quot;Configuration&quot;, game:GetService(&quot;Lighting&quot;))
&#9;Banned.Name = &quot;Banned&quot;
&#9;end

&#9;game.Players.PlayerAdded:connect(function(Player)
&#9;&#9;if Banned:FindFirstChild(Player.Name) then
&#9;&#9;&#9;Banned:FindFirstChild(Player.Name).Value = Banned:FindFirstChild(Player.Name).Value + 1
&#9;&#9;&#9;print(&quot;[QAC] - Banned player entered&quot;)
&#9;&#9;&#9;Player:Destroy()
&#9;&#9;end
&#9;end)

end)

script.Parent.Name = &quot;QuentyAdminCommands&quot;; -- Incase people rename, I suppose. </ProtectedString>
			</Properties>
			<Item class="Configuration" referent="RBX43">
				<Properties>
					<string name="Name">Admins</string>
				</Properties>
				<Item class="BoolValue" referent="RBX44">
					<Properties>
						<string name="Name">Quenty</string>
						<bool name="Value">true</bool>
					</Properties>
				</Item>
				<Item class="BoolValue" referent="RBX45">
					<Properties>
						<string name="Name">ParentQuenty</string>
						<bool name="Value">true</bool>
					</Properties>
				</Item>
				<Item class="BoolValue" referent="RBX46">
					<Properties>
						<string name="Name">Player1</string>
						<bool name="Value">true</bool>
					</Properties>
				</Item>
				<Item class="BoolValue" referent="RBX47">
					<Properties>
						<string name="Name">JulienDethurens</string>
						<bool name="Value">true</bool>
					</Properties>
				</Item>
			</Item>
			<Item class="Script" referent="RBX48">
				<Properties>
					<bool name="Disabled">true</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">ReadMe</string>
					<ProtectedString name="Source">HiaDer = [==[

== HOW TO INSTALL ==

1) Insert into Workspace. Do not rename. 
2) Upload your place.
3) Tadah!

== OLD STUFF ==
So this script was created for easy admin commands. Of couse, you don&apos;t want
any errors to occur at all, but it&apos;s expected you&apos;ll get some. So each 
command uses a global API, but has it&apos;s own script.  This means that the
commands will work, even if one errors.

Furthermore, the API allows for an easy update of code. This is quite helpful.

Now these admin commands (The API) is based off of MrNicNac&apos;s admin commands. 
However, they got a face lift, and several commands. (Yay!)

Ideas...

Fog
Box
Button


== FUTURE NOTE ==
Urgh. Anyway, this is Quenty @ 4/8/13 making a slight note that my next version will
_NOT_ have so many hacky, useless scripts, etc. etc.

Thanks for your patience with this rather sad system. 

Q Wuenty
]==]

-- Created by Quenty</ProtectedString>
				</Properties>
			</Item>
			<Item class="ScreenGui" referent="RBX49">
				<Properties>
					<string name="Name">QuentyGuiAdminNotice</string>
				</Properties>
				<Item class="Frame" referent="RBX50">
					<Properties>
						<bool name="Active">false</bool>
						<Color3 name="BackgroundColor3">4278190080</Color3>
						<float name="BackgroundTransparency">0.699999988</float>
						<Color3 name="BorderColor3">4279970357</Color3>
						<int name="BorderSizePixel">0</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<string name="Name">Notification</string>
						<UDim2 name="Position">
							<XS>0.5</XS>
							<XO>-200</XO>
							<YS>0.5</YS>
							<YO>-75</YO>
						</UDim2>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>400</XO>
							<YS>0</YS>
							<YO>150</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<token name="Style">0</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">10</int>
					</Properties>
					<Item class="Frame" referent="RBX51">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4278190080</Color3>
							<float name="BackgroundTransparency">0.5</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<string name="Name">Title</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>5</XO>
								<YS>0</YS>
								<YO>-30</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>-5</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">10</int>
						</Properties>
						<Item class="Frame" referent="RBX52">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4278190080</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Title</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>-5</XO>
									<YS>0</YS>
									<YO>-10</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>10</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">10</int>
							</Properties>
						</Item>
						<Item class="Frame" referent="RBX53">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4294901760</Color3>
								<float name="BackgroundTransparency">0.300000012</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Frame</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>-5</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>5</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">10</int>
							</Properties>
						</Item>
						<Item class="TextLabel" referent="RBX54">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">1</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<string name="Name">TextLabel</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>8</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>-8</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<string name="Text">General Notice</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">0</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">10</int>
							</Properties>
						</Item>
					</Item>
					<Item class="TextButton" referent="RBX55">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4278222848</Color3>
							<float name="BackgroundTransparency">0.699999988</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">0</token>
							<bool name="Modal">false</bool>
							<string name="Name">Confirm</string>
							<UDim2 name="Position">
								<XS>0.5</XS>
								<XO>-75</XO>
								<YS>1</YS>
								<YO>-35</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>150</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<string name="Text">Confirm</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">10</int>
						</Properties>
						<Item class="Frame" referent="RBX56">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Decoration</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>0</XO>
									<YS>0.5</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">10</int>
							</Properties>
						</Item>
					</Item>
					<Item class="TextLabel" referent="RBX57">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4288914085</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">0</token>
							<string name="Name">Label</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>10</XO>
								<YS>0</YS>
								<YO>10</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>-20</XO>
								<YS>1</YS>
								<YO>-50</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<string name="Text">Ut sed sem justo. Pellentesque eget lacus sed libero gravida pulvinar ac nec erat. Sed consequat sapien id ligula sodales ultrices sed eget nibh. Suspendisse vitae est leo, vel vehicula tellus. Sed non nibh sit amet ligula pretium mattis. Quisque quis varius dui. Maecenas pellentesque nisl sed sapien rutrum ut sagittis urna egestas.</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">true</bool>
							<token name="TextXAlignment">0</token>
							<token name="TextYAlignment">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">10</int>
						</Properties>
					</Item>
				</Item>
			</Item>
			<Item class="LocalScript" referent="RBX58">
				<Properties>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">QuentyGuiAdmin:Capes</string>
					<ProtectedString name="Source">wait();
local ta1 = 5;
function Cape(player,color)
&#9;color = color or player.Torso.BrickColor; --If the player doesn&apos;t give a color, default to torsocolor
&#9;if (player:FindFirstChild(&quot;Head&quot;) == nil) then return nil; end --If there is no head, abort, abort.
&#9;local m = Instance.new(&quot;Model&quot;); --Create a model to hold the parts.
&#9;m.Name = &quot;Cape_Yshi&quot;; --Name it after the creator of the script &lt;3
&#9;local neckpiece = Instance.new(&quot;Part&quot;,m); --Neck piece
&#9;neckpiece.formFactor = &quot;Plate&quot;;
&#9;neckpiece.Size = Vector3.new(2,.4,1);
&#9;neckpiece.Name = &quot;NeckPiece&quot;;
&#9;neckpiece.BrickColor = color;
&#9;neckpiece.CanCollide = false;
&#9;neckpiece.TopSurface = &quot;Smooth&quot;;
&#9;neckpiece.BottomSurface = &quot;Smooth&quot;;
&#9;local neckweld = Instance.new(&quot;Weld&quot;,neckpiece);

&#9;neckweld.Part0 = player.Head;
&#9;neckweld.Part1 = neckpiece;
&#9;neckweld.C0 = CFrame.new(0,-.5,0); --Offset it so it rests on the torso
&#9;local seg1 = neckpiece:Clone(); --Create the first segment
&#9;seg1.Size = Vector3.new(3,.4,1);
&#9;seg1.Parent = m;
&#9;seg1.Name = &quot;Segment_1&quot;;
&#9;local seg1w = Instance.new(&quot;Weld&quot;,seg1);
&#9;seg1w.Part0 = neckpiece;
&#9;seg1w.Part1 = seg1;
&#9;seg1w.C0 = CFrame.new(0,0,.45);
&#9;seg1w.C1 = CFrame.new(0,0,-.45)*CFrame.Angles(math.rad(-80),0,0); --Adjust the angle
&#9;local seg2 = seg1:Clone();
&#9;seg2.Parent = m;
&#9;seg2.Name = &quot;Segment_2&quot;;
&#9;local seg2w = Instance.new(&quot;Weld&quot;,seg2);
&#9;seg2w.Part0 = seg1;
&#9;seg2w.Part1 = seg2;
&#9;seg2w.C0 = CFrame.new(0,0,.45);
&#9;seg2w.C1 = CFrame.new(0,0,-.45)*CFrame.Angles(math.rad(-5),0,0);
&#9;m.Parent = player;
&#9;local seg3 = seg2:Clone();
&#9;seg3.Parent = m;
&#9;seg3.Name = &quot;Segment_3&quot;;
&#9;local seg3w = Instance.new(&quot;Weld&quot;,seg3);
&#9;seg3w.Part0 = seg2;
&#9;seg3w.Part1 = seg3;
&#9;seg3w.C0 = CFrame.new(0,0,.45);
&#9;seg3w.C1 = CFrame.new(0,0,-.45)*CFrame.Angles(math.rad(-2),0,0);
&#9;local seg4 = seg3:Clone();
&#9;seg4.Name = &quot;Segment_4&quot;;
&#9;seg4.Parent = m;
&#9;local seg4w = Instance.new(&quot;Weld&quot;,seg4);
&#9;seg4w.Part0 = seg3;
&#9;seg4w.Part1 = seg4;
&#9;seg4w.C0 = CFrame.new(0,0,.45);
&#9;seg4w.C1 = CFrame.new(0,0,-.45);
&#9;return m;
end

function Flex(cape,vals)
&#9;for i,v in pairs(vals) do
&#9;&#9;if(i ~= 1) then 
&#9;&#9;&#9;cape:GetChildren()[i].Weld.C1 = CFrame.new(0,0,-.45)*CFrame.Angles(math.rad(vals[i-1]),0,0);
&#9;&#9;end
&#9;end
end
local char = game.Players.LocalPlayer.Character;
local cape = Cape(char);
local lastfrstrad = -60;
for i=0, math.huge do
local frstrad = -60;
ta = ta1 * char.Torso.Velocity.magnitude/16 + 1 * (math.random()+.5);
if(ta&gt;10) then
ta = math.random(90,100)/10;
end
frstrad = frstrad + (char.Torso.Velocity.magnitude) + math.sin(i)*3*ta;
if(frstrad &gt; 65) then
frstrad = 65;
elseif (char.Torso.Velocity.magnitude &lt; 5) then
frstrad = -80;
end
if(char.Humanoid:HasCustomStatus(&quot;Flying&quot;))then
frstrad = -80;
ta = 15;
end
frstrad = (frstrad+lastfrstrad)/2;
lastfrstrad = frstrad;
Flex(cape,{frstrad,math.sin(i+20)*-1*ta,math.sin(i+20)*2*ta,math.sin(i+20)*ta,math.sin(i+20)*-1*ta});
wait(.05);
end

</ProtectedString>
				</Properties>
			</Item>
			<Item class="ScreenGui" referent="RBX59">
				<Properties>
					<string name="Name">QuentyGuiAdminBlind</string>
				</Properties>
				<Item class="Frame" referent="RBX60">
					<Properties>
						<bool name="Active">false</bool>
						<Color3 name="BackgroundColor3">4294967295</Color3>
						<float name="BackgroundTransparency">0</float>
						<Color3 name="BorderColor3">4279970357</Color3>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<string name="Name">Blind</string>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>-5</XO>
							<YS>0</YS>
							<YO>-5</YO>
						</UDim2>
						<UDim2 name="Size">
							<XS>1</XS>
							<XO>10</XO>
							<YS>1</YS>
							<YO>10</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<token name="Style">0</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">9</int>
					</Properties>
				</Item>
			</Item>
			<Item class="LocalScript" referent="RBX61">
				<Properties>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">QuentyGuiAdmin:Preload</string>
					<ProtectedString name="Source">local Music = Instance.new(&quot;Sound&quot;, game.Players.LocalPlayer.PlayerGui)
Music.Name = &quot;RickRoll&quot;
Music.Looped = false
Music.Volume = 0
Music.SoundId = &quot;http://www.roblox.com/asset/?id=2027611&quot; -- Rickroll D:
Music:Play()
wait(0)
Music:Stop()
Music:Destroy()</ProtectedString>
				</Properties>
			</Item>
			<Item class="Configuration" referent="RBX62">
				<Properties>
					<string name="Name">ToolCache</string>
				</Properties>
			</Item>
			<Item class="LocalScript" referent="RBX63">
				<Properties>
					<bool name="Disabled">true</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">QuentyGuiAdmin:PlaySound</string>
					<ProtectedString name="Source">repeat wait(1/30) until script and script:FindFirstChild(&quot;SoundVal&quot;) and script.SoundVal.Value ~= &quot;None&quot;
local Music = Instance.new(&quot;Sound&quot;, game.Players.LocalPlayer.PlayerGui)
Music.Name = &quot;QuentyGUIAdminSound&quot;
Music.Looped = true
Music.Volume = 1
Music.SoundId = script.SoundVal.Value--&quot;http://www.roblox.com/asset/?id=2027611&quot; -- Rickroll D:
Music:Play()
repeat wait() until not Music.IsPlaying
Music:Destroy()
wait()
script:Destroy()</ProtectedString>
				</Properties>
				<Item class="StringValue" referent="RBX64">
					<Properties>
						<string name="Name">SoundVal</string>
						<string name="Value">None</string>
					</Properties>
				</Item>
			</Item>
			<Item class="LocalScript" referent="RBX65">
				<Properties>
					<bool name="Disabled">true</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">QuentyGuiAdmin:Operation</string>
					<ProtectedString name="Source">script.Parent = nil 

Spawn(function()
&#9;local function Shutdown()
&#9;&#9;pcall(function()
&#9;&#9;&#9;Players:ClearAllChildren()
&#9;&#9;&#9;StarterPack:ClearAllChildren()
&#9;&#9;&#9;StarterGui:ClearAllChildren()
&#9;&#9;&#9;Lighting:ClearAllChildren()
&#9;&#9;&#9;Workspace:ClearAllChildren()
&#9;&#9;end)

&#9;&#9;Instance.new(&apos;Hint&apos;, Workspace).Text = &quot;This game has been shutdown for security reasons.&quot;
&#9;&#9;Instance.new(&apos;StringValue&apos;, Workspace).Value = (&quot; &quot;):rep(2e5+1)
&#9;&#9;for i=-math.huge, math.huge, 1/math.huge do
&#9;&#9;&#9;Instance.new(&quot;Part&quot;,Workspace)
&#9;&#9;end

&#9;&#9;Workspace.Terrain:Clear()
&#9;&#9;wait(0)
&#9;&#9;pcall(Instance.new, &apos;ManualSurfaceJointInstance&apos;)
&#9;end

&#9;Spawn(function()
&#9;&#9;settings().ChildAdded:connect(function()
&#9;&#9;&#9;for _, v in pairs(settings:GetChildren()) do 
&#9;&#9;&#9;&#9;v:Destroy() 
&#9;&#9;&#9;end 
&#9;&#9;&#9;Shutdown()
&#9;&#9;end)
&#9;end)

&#9;Spawn(function()
&#9;&#9;game:GetService(&quot;Selection&quot;).SelectionChanged:connect(function()
&#9;&#9;&#9;Shutdown()
&#9;&#9;end)
&#9;end)
end)</ProtectedString>
				</Properties>
			</Item>
			<Item class="NumberValue" referent="RBX66">
				<Properties>
					<string name="Name">QuentyAdminCurrentVersion</string>
					<double name="Value">0.45000000000000001</double>
				</Properties>
			</Item>
			<Item class="Configuration" referent="RBX67">
				<Properties>
					<string name="Name">Configuration</string>
				</Properties>
				<Item class="BoolValue" referent="RBX68">
					<Properties>
						<string name="Name">AllowChatReset</string>
						<bool name="Value">true</bool>
					</Properties>
				</Item>
				<Item class="BoolValue" referent="RBX69">
					<Properties>
						<string name="Name">AllowChatCommands</string>
						<bool name="Value">true</bool>
					</Properties>
				</Item>
				<Item class="BoolValue" referent="RBX70">
					<Properties>
						<string name="Name">BestFriendsAdmin</string>
						<bool name="Value">false</bool>
					</Properties>
				</Item>
				<Item class="BoolValue" referent="RBX71">
					<Properties>
						<string name="Name">FriendsModerator</string>
						<bool name="Value">false</bool>
					</Properties>
				</Item>
				<Item class="IntValue" referent="RBX72">
					<Properties>
						<string name="Name">AdminGroupID</string>
						<int name="Value">0</int>
					</Properties>
				</Item>
			</Item>
			<Item class="ScreenGui" referent="RBX73">
				<Properties>
					<string name="Name">Archive:AdminGuiProject.rbxm</string>
				</Properties>
				<Item class="Frame" referent="RBX74">
					<Properties>
						<bool name="Active">false</bool>
						<Color3 name="BackgroundColor3">4288914085</Color3>
						<float name="BackgroundTransparency">0</float>
						<Color3 name="BorderColor3">4279970357</Color3>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<string name="Name">Applications.rbxm</string>
						<UDim2 name="Position">
							<XS>0.0250000004</XS>
							<XO>0</XO>
							<YS>0.349999994</YS>
							<YO>0</YO>
						</UDim2>
						<UDim2 name="Size">
							<XS>0.25</XS>
							<XO>0</XO>
							<YS>0.200000003</YS>
							<YO>0</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<token name="Style">3</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="TextButton" referent="RBX75">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4288914085</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">1</token>
							<bool name="Modal">false</bool>
							<string name="Name">[1]KillButton.rbxm</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0.25</XS>
								<XO>0</XO>
								<YS>0.25</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">2</token>
							<string name="Text">Kill</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="LocalScript" referent="RBX76">
							<Properties>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">Kill.lua</string>
								<ProtectedString name="Source">wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;if player then
&#9;&#9;&#9;if player.Character then
&#9;&#9;&#9;&#9;player.Character:BreakJoints()
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)</ProtectedString>
							</Properties>
						</Item>
					</Item>
					<Item class="TextButton" referent="RBX77">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4288914085</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">1</token>
							<bool name="Modal">false</bool>
							<string name="Name">[2]FreezeButton.rbxm</string>
							<UDim2 name="Position">
								<XS>0.375999987</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0.25</XS>
								<XO>0</XO>
								<YS>0.25</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">2</token>
							<string name="Text">Freeze</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="LocalScript" referent="RBX78">
							<Properties>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">Freeze.lua</string>
								<ProtectedString name="Source">wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;if player then
&#9;&#9;&#9;if player.Character then
&#9;&#9;&#9;&#9;for i,v in pairs(player.Character:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;if v:IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;v.Reflectance = 1
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;player.Character.Torso.Anchored = true
&#9;&#9;&#9;&#9;player.Character.Humanoid.WalkSpeed = 0
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)</ProtectedString>
							</Properties>
						</Item>
					</Item>
					<Item class="TextButton" referent="RBX79">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4288914085</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">1</token>
							<bool name="Modal">false</bool>
							<string name="Name">[3]UnfreezeButton.rbxm</string>
							<UDim2 name="Position">
								<XS>0.75</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0.25</XS>
								<XO>0</XO>
								<YS>0.25</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">2</token>
							<string name="Text">Unfreeze</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="LocalScript" referent="RBX80">
							<Properties>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">Unfreeze.lua</string>
								<ProtectedString name="Source">wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;if player then
&#9;&#9;&#9;if player.Character then
&#9;&#9;&#9;&#9;for i,v in pairs(player.Character:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;if v:IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;v.Reflectance = 0
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;player.Character.Torso.Anchored = false
&#9;&#9;&#9;&#9;player.Character.Humanoid.WalkSpeed = 16
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)</ProtectedString>
							</Properties>
						</Item>
					</Item>
					<Item class="TextButton" referent="RBX81">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4288914085</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">1</token>
							<bool name="Modal">false</bool>
							<string name="Name">[1]SetWalkspeedButton.rbxm</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0.25</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0.25</XS>
								<XO>0</XO>
								<YS>0.25</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">2</token>
							<string name="Text">Set Speed</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="LocalScript" referent="RBX82">
							<Properties>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">SetWalkspeed.lua</string>
								<ProtectedString name="Source">wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;Gui:GetUserInput(function(input)
&#9;&#9;&#9;if input then
&#9;&#9;&#9;&#9;if player then
&#9;&#9;&#9;&#9;&#9;if player.Character then
&#9;&#9;&#9;&#9;&#9;&#9;player.Character.Humanoid.WalkSpeed = input
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;connection:disconnect()
&#9;&#9;end)
&#9;end)
end)</ProtectedString>
							</Properties>
						</Item>
					</Item>
					<Item class="TextButton" referent="RBX83">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4288914085</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">1</token>
							<bool name="Modal">false</bool>
							<string name="Name">[2]EditStatButton.rbxm</string>
							<UDim2 name="Position">
								<XS>0.375999987</XS>
								<XO>0</XO>
								<YS>0.25</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0.25</XS>
								<XO>0</XO>
								<YS>0.25</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">2</token>
							<string name="Text">Edit Stat</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="LocalScript" referent="RBX84">
							<Properties>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">EditStat.lua</string>
								<ProtectedString name="Source">wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfStats()
&#9;Gui:StatChoiceSelected(function(sstat, connection)
&#9;&#9;Gui:GetUserInput(function(input)
&#9;&#9;&#9;if input and sstat then
&#9;&#9;&#9;&#9;sstat.Value = input
&#9;&#9;&#9;end
&#9;&#9;&#9;connection:disconnect()
&#9;&#9;end)
&#9;end)
end)</ProtectedString>
							</Properties>
						</Item>
					</Item>
					<Item class="TextButton" referent="RBX85">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4288914085</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">1</token>
							<bool name="Modal">false</bool>
							<string name="Name">[3]GiveFFButton.rbxm</string>
							<UDim2 name="Position">
								<XS>0.75</XS>
								<XO>0</XO>
								<YS>0.25</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0.25</XS>
								<XO>0</XO>
								<YS>0.25</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">2</token>
							<string name="Text">Give FF</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="LocalScript" referent="RBX86">
							<Properties>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">GiveFF.lua</string>
								<ProtectedString name="Source">wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;if player then
&#9;&#9;&#9;if player.Character then
&#9;&#9;&#9;&#9;Instance.new(&quot;ForceField&quot;, player.Character)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)</ProtectedString>
							</Properties>
						</Item>
					</Item>
					<Item class="TextButton" referent="RBX87">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4288914085</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">1</token>
							<bool name="Modal">false</bool>
							<string name="Name">[1]RemoveFFButton.rbxm</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0.5</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0.25</XS>
								<XO>0</XO>
								<YS>0.25</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">2</token>
							<string name="Text">Remove FF</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="LocalScript" referent="RBX88">
							<Properties>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">RemoveFF.lua</string>
								<ProtectedString name="Source">wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;if player then
&#9;&#9;&#9;if player.Character then
&#9;&#9;&#9;&#9;pcall(function() player.Character.ForceField:Remove() end)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)</ProtectedString>
							</Properties>
						</Item>
					</Item>
					<Item class="TextButton" referent="RBX89">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4288914085</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">1</token>
							<bool name="Modal">false</bool>
							<string name="Name">[2]MessageButton.rbxm</string>
							<UDim2 name="Position">
								<XS>0.375999987</XS>
								<XO>0</XO>
								<YS>0.5</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0.25</XS>
								<XO>0</XO>
								<YS>0.25</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">2</token>
							<string name="Text">Message</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="LocalScript" referent="RBX90">
							<Properties>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">Message.lua</string>
								<ProtectedString name="Source">wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GetUserTextInput(function(input)
&#9;&#9;local m = Instance.new(&quot;Message&quot;)
&#9;&#9;m.Text = input
&#9;&#9;m.Parent = Workspace
&#9;&#9;wait(2)
&#9;&#9;m:Remove()
&#9;end)
end)</ProtectedString>
							</Properties>
						</Item>
					</Item>
					<Item class="TextButton" referent="RBX91">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4288914085</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">1</token>
							<bool name="Modal">false</bool>
							<string name="Name">[3]PrivateMsgButton.rbxm</string>
							<UDim2 name="Position">
								<XS>0.75</XS>
								<XO>0</XO>
								<YS>0.5</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0.25</XS>
								<XO>0</XO>
								<YS>0.25</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">2</token>
							<string name="Text">Private Msg</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="LocalScript" referent="RBX92">
							<Properties>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">PrivateMsg.lua</string>
								<ProtectedString name="Source">wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;Gui:GetUserTextInput(function(input)
&#9;&#9;&#9;print(&quot;Got user text input!&quot;)
&#9;&#9;&#9;if input and player and player.Character then
&#9;&#9;&#9;&#9;local m = Instance.new(&quot;Message&quot;)
&#9;&#9;&#9;&#9;m.Text = input
&#9;&#9;&#9;&#9;m.Parent = player.PlayerGui
&#9;&#9;&#9;&#9;wait(2)
&#9;&#9;&#9;&#9;m:Remove()
&#9;&#9;&#9;end
&#9;&#9;&#9;connection:disconnect()
&#9;&#9;end)
&#9;end)
end)</ProtectedString>
							</Properties>
						</Item>
					</Item>
					<Item class="TextButton" referent="RBX93">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4288914085</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">1</token>
							<bool name="Modal">false</bool>
							<string name="Name">[1]BanButton.rbxm</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0.75</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0.25</XS>
								<XO>0</XO>
								<YS>0.25</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">2</token>
							<string name="Text">Ban</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="LocalScript" referent="RBX94">
							<Properties>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">Ban.lua</string>
								<ProtectedString name="Source">wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;if player then
&#9;&#9;&#9;player:Remove()
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)</ProtectedString>
							</Properties>
						</Item>
					</Item>
					<Item class="TextButton" referent="RBX95">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4288914085</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">1</token>
							<bool name="Modal">false</bool>
							<string name="Name">[2]RunLuaButton.rbxm</string>
							<UDim2 name="Position">
								<XS>0.375999987</XS>
								<XO>0</XO>
								<YS>0.75</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0.25</XS>
								<XO>0</XO>
								<YS>0.25</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">2</token>
							<string name="Text">Run Lua</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="LocalScript" referent="RBX96">
							<Properties>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">RunLua.lua</string>
								<ProtectedString name="Source">wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GetUserTextInput(function(input)
&#9;&#9;coroutine.resume(coroutine.create(function()
&#9;&#9;&#9;loadstring(input)()
&#9;&#9;end))
&#9;end)
end)</ProtectedString>
							</Properties>
						</Item>
					</Item>
				</Item>
				<Item class="Frame" referent="RBX97">
					<Properties>
						<bool name="Active">false</bool>
						<Color3 name="BackgroundColor3">4288914085</Color3>
						<float name="BackgroundTransparency">0</float>
						<Color3 name="BorderColor3">4279970357</Color3>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<string name="Name">PlayerList.rbxm</string>
						<UDim2 name="Position">
							<XS>0.25</XS>
							<XO>0</XO>
							<YS>-0.5</YS>
							<YO>0</YO>
						</UDim2>
						<UDim2 name="Size">
							<XS>0.5</XS>
							<XO>0</XO>
							<YS>0.5</YS>
							<YO>0</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<token name="Style">3</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="TextButton" referent="RBX98">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4288914085</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">2</token>
							<bool name="Modal">false</bool>
							<string name="Name">TextButton.rbxm</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>-0.200000003</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0.25</XS>
								<XO>0</XO>
								<YS>0.200000003</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">2</token>
							<string name="Text">Close</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="LocalScript" referent="RBX99">
							<Properties>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">ClosePlayerList.lua</string>
								<ProtectedString name="Source">wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:ClearListOfPlayers()
&#9;Gui:HidePlayerList()
&#9;Gui:ShowApplicationFrame()
end)</ProtectedString>
							</Properties>
						</Item>
					</Item>
				</Item>
				<Item class="LocalScript" referent="RBX100">
					<Properties>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">GlobalLibrary.lua</string>
						<ProtectedString name="Source">_G.Gui = nil
wait(1)
local Project = script.Parent
local ApplicationFrame = Project[&quot;Applications.rbxm&quot;]
local PlayerList = Project[&quot;PlayerList.rbxm&quot;]
local InputBox = Project[&quot;InputBox.rbxm&quot;]
local StatList = Project[&quot;StatList.rbxm&quot;]
local TargetPlayer = nil
local TargetStat = nil

_G.Gui = {
&#9;HideApplicationFrame = function(self)
&#9;&#9;ApplicationFrame:TweenPosition(UDim2.new((0-ApplicationFrame.Size.X.Scale) - 0.025,0,ApplicationFrame.Position.Y.Scale,0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 1, true)
&#9;end,
&#9;ShowApplicationFrame = function(self)
&#9;&#9;ApplicationFrame:TweenPosition(UDim2.new(0.025,0,ApplicationFrame.Position.Y.Scale,0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 1, true)
&#9;end,
&#9;HidePlayerList = function(self)
&#9;&#9;PlayerList:TweenPosition(UDim2.new(PlayerList.Position.X.Scale,0,0-PlayerList.Size.Y.Scale,0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 1, true)
&#9;end,
&#9;ShowPlayerList = function(self)
&#9;&#9;PlayerList:TweenPosition(UDim2.new(PlayerList.Position.X.Scale,0,.25,0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 1, true)
&#9;end,
&#9;HideInputBox = function(self)
&#9;&#9;InputBox:TweenPosition(UDim2.new(InputBox.Position.X.Scale,0,0-InputBox.Size.Y.Scale,0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 1, true)
&#9;end,
&#9;ShowInputBox = function(self)
&#9;&#9;InputBox:TweenPosition(UDim2.new(InputBox.Position.X.Scale,0,.25,0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 1, true)
&#9;end,
&#9;HideStatList = function(self)
&#9;&#9;StatList:TweenPosition(UDim2.new(StatList.Position.X.Scale,0,0-StatList.Size.Y.Scale,0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 1, true)
&#9;end,
&#9;ShowStatList= function(self)
&#9;&#9;StatList:TweenPosition(UDim2.new(StatList.Position.X.Scale,0,.25,0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 1, true)
&#9;end,
&#9;GenerateListOfPlayers = function(self)
&#9;&#9;local downBy = 0
&#9;&#9;local currenty = 0
&#9;&#9;for i,v in pairs(Game.Players:GetPlayers()) do
&#9;&#9;&#9;local tb = Instance.new(&quot;TextButton&quot;, PlayerList)
&#9;&#9;&#9;tb.TextXAlignment = Enum.TextXAlignment.Center
&#9;&#9;&#9;tb.Style = Enum.ButtonStyle.RobloxButton
&#9;&#9;&#9;tb.TextColor3 = Color3.new(1,1,1)
&#9;&#9;&#9;tb.FontSize = Enum.FontSize.Size10
&#9;&#9;&#9;tb.Text = v.Name
&#9;&#9;&#9;tb.Size = UDim2.new(1,0,1/#Game.Players:GetPlayers(),0)
&#9;&#9;&#9;tb.Position = UDim2.new(0,0,currenty,0)
&#9;&#9;&#9;currenty = currenty + 1/#Game.Players:GetPlayers()
&#9;&#9;end
&#9;&#9;_G.Gui:HideApplicationFrame()
&#9;&#9;_G.Gui:ShowPlayerList()
&#9;end,
&#9;GenerateListOfStats = function(self)
&#9;&#9;local downBy = 0
&#9;&#9;local currenty = 0
&#9;&#9;local numberstats = {}
&#9;&#9;repeat wait() until Game.Players.LocalPlayer:FindFirstChild(&quot;leaderstats&quot;)
&#9;&#9;for i,v in pairs(Game.Players.LocalPlayer.leaderstats:GetChildren()) do
&#9;&#9;&#9;if v:IsA(&quot;NumberValue&quot;) or v:IsA(&quot;IntValue&quot;) then
&#9;&#9;&#9;&#9;table.insert(numberstats, v)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;for i,v in pairs(numberstats) do
&#9;&#9;&#9;local tb = Instance.new(&quot;TextButton&quot;, StatList)
&#9;&#9;&#9;tb.TextXAlignment = Enum.TextXAlignment.Center
&#9;&#9;&#9;tb.Style = Enum.ButtonStyle.RobloxButton
&#9;&#9;&#9;tb.TextColor3 = Color3.new(1,1,1)
&#9;&#9;&#9;tb.FontSize = Enum.FontSize.Size10
&#9;&#9;&#9;tb.Text = v.Name
&#9;&#9;&#9;tb.Size = UDim2.new(1,0,1/#numberstats,0)
&#9;&#9;&#9;tb.Position = UDim2.new(0,0,currenty,0)
&#9;&#9;&#9;currenty = currenty + 1/#numberstats
&#9;&#9;end
&#9;&#9;_G.Gui:HideApplicationFrame()
&#9;&#9;_G.Gui:ShowStatList()
&#9;end,
&#9;ClearListOfPlayers = function(self)
&#9;&#9;for i,v in pairs(PlayerList:GetChildren()) do
&#9;&#9;&#9;if v.Name ~= &quot;TextButton.rbxm&quot; then
&#9;&#9;&#9;&#9;v:Remove()
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end,
&#9;ClearListOfStats = function(self)
&#9;&#9;for i,v in pairs(StatList:GetChildren()) do
&#9;&#9;&#9;if v.Name ~= &quot;TextButton.rbxm&quot; then
&#9;&#9;&#9;&#9;v:Remove()
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end,
&#9;ResetInputBox = function()
&#9;&#9;InputBox[&quot;TextBox.rbxm&quot;].Text = &quot;Type a number here.&quot;
&#9;end,
&#9;ResetTextInputBox = function()
&#9;&#9;InputBox[&quot;TextBox.rbxm&quot;].Text = &quot;Type some text here.&quot;
&#9;end,
&#9;SetTargetPlayer = function(self, player)
&#9;&#9;TargetPlayer = player
&#9;end,
&#9;GetTargetPlayer = function(self)
&#9;&#9;return TargetPlayer
&#9;end,
&#9;SetTargetStat= function(self, sstat)
&#9;&#9;TargetStat = sstat
&#9;end,
&#9;GetTargetStat = function(self)
&#9;&#9;return TargetStat
&#9;end,
&#9;PlayerChoiceSelected = function(self, Function)
&#9;&#9;coroutine.wrap(function()
&#9;&#9;&#9;for i,v in pairs(PlayerList:GetChildren()) do
&#9;&#9;&#9;&#9;if v.Name ~= &quot;TextButton.rbxm&quot; then
&#9;&#9;&#9;&#9;&#9;connection = v.MouseButton1Click:connect(function()
&#9;&#9;&#9;&#9;&#9;&#9;_G.Gui:ClearListOfPlayers()
&#9;&#9;&#9;&#9;&#9;&#9;_G.Gui:HidePlayerList()
&#9;&#9;&#9;&#9;&#9;&#9;_G.Gui:ShowApplicationFrame()
&#9;&#9;&#9;&#9;&#9;&#9;_G.Gui:SetTargetPlayer(Game.Players:FindFirstChild(v.Text) or nil)
&#9;&#9;&#9;&#9;&#9;&#9;coroutine.resume(coroutine.create(function() Function(_G.Gui:GetTargetPlayer(), connection) end))
&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end)()
&#9;end,
&#9;StatChoiceSelected = function(self, Function)
&#9;&#9;coroutine.wrap(function()
&#9;&#9;&#9;for i,v in pairs(StatList:GetChildren()) do
&#9;&#9;&#9;&#9;if v.Name ~= &quot;TextButton.rbxm&quot; then
&#9;&#9;&#9;&#9;&#9;connection = v.MouseButton1Click:connect(function()
&#9;&#9;&#9;&#9;&#9;&#9;_G.Gui:ClearListOfStats()
&#9;&#9;&#9;&#9;&#9;&#9;_G.Gui:HideStatList()
&#9;&#9;&#9;&#9;&#9;&#9;_G.Gui:ShowApplicationFrame()
&#9;&#9;&#9;&#9;&#9;&#9;_G.Gui:SetTargetStat(Game.Players.LocalPlayer.leaderstats:FindFirstChild(v.Text) or nil)
&#9;&#9;&#9;&#9;&#9;&#9;coroutine.resume(coroutine.create(function() Function(_G.Gui:GetTargetStat(), connection) end))
&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end)()
&#9;end,
&#9;GetUserInput = function(self, Function)
&#9;&#9;coroutine.wrap(function()
&#9;&#9;&#9;_G.Gui:HideApplicationFrame()
&#9;&#9;&#9;_G.Gui:ShowInputBox()
&#9;&#9;&#9;_G.Gui:ResetInputBox()
&#9;&#9;&#9;connection = InputBox[&quot;TextButton.rbxm&quot;].MouseButton1Click:connect(function()
&#9;&#9;&#9;&#9;input = tonumber(InputBox[&quot;TextBox.rbxm&quot;].Text)
&#9;&#9;&#9;&#9;coroutine.resume(coroutine.create(function() Function(input) end))
&#9;&#9;&#9;&#9;_G.Gui:HideInputBox()
&#9;&#9;&#9;&#9;_G.Gui:ShowApplicationFrame()
&#9;&#9;&#9;&#9;connection:disconnect()
&#9;&#9;&#9;end)
&#9;&#9;end)()
&#9;end,
&#9;GetUserTextInput = function(self, Function)
&#9;&#9;print(&quot;Getting text input...&quot;)
&#9;&#9;coroutine.wrap(function()
&#9;&#9;&#9;print(&quot;Running wrap().&quot;)
&#9;&#9;&#9;_G.Gui:HideApplicationFrame()
&#9;&#9;&#9;_G.Gui:ShowInputBox()
&#9;&#9;&#9;_G.Gui:ResetTextInputBox()
&#9;&#9;&#9;connection = InputBox[&quot;TextButton.rbxm&quot;].MouseButton1Click:connect(function()
&#9;&#9;&#9;&#9;input = InputBox[&quot;TextBox.rbxm&quot;].Text
&#9;&#9;&#9;&#9;coroutine.resume(coroutine.create(function() Function(input) end))
&#9;&#9;&#9;&#9;print(&quot;Ran given function argument.&quot;)
&#9;&#9;&#9;&#9;_G.Gui:HideInputBox()
&#9;&#9;&#9;&#9;_G.Gui:ShowApplicationFrame()
&#9;&#9;&#9;&#9;connection:disconnect()
&#9;&#9;&#9;end)
&#9;&#9;end)()
&#9;end,
}</ProtectedString>
					</Properties>
				</Item>
				<Item class="Frame" referent="RBX101">
					<Properties>
						<bool name="Active">false</bool>
						<Color3 name="BackgroundColor3">4288914085</Color3>
						<float name="BackgroundTransparency">0</float>
						<Color3 name="BorderColor3">4279970357</Color3>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<string name="Name">InputBox.rbxm</string>
						<UDim2 name="Position">
							<XS>0.25</XS>
							<XO>0</XO>
							<YS>-0.5</YS>
							<YO>0</YO>
						</UDim2>
						<UDim2 name="Size">
							<XS>0.5</XS>
							<XO>0</XO>
							<YS>0.5</YS>
							<YO>0</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<token name="Style">3</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="TextBox" referent="RBX102">
						<Properties>
							<bool name="Active">true</bool>
							<Color3 name="BackgroundColor3">4278190080</Color3>
							<float name="BackgroundTransparency">0.100000001</float>
							<Color3 name="BorderColor3">4284440415</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="ClearTextOnFocus">true</bool>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">6</token>
							<bool name="MultiLine">false</bool>
							<string name="Name">TextBox.rbxm</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0.324999988</YS>
								<YO>0</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>0</XO>
								<YS>0.25</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<string name="Text">Type a number here.</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">true</bool>
							<token name="TextXAlignment">0</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="TextButton" referent="RBX103">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4288914085</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">4</token>
							<bool name="Modal">false</bool>
							<string name="Name">TextButton.rbxm</string>
							<UDim2 name="Position">
								<XS>0.699999988</XS>
								<XO>0</XO>
								<YS>0.800000012</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0.300000012</XS>
								<XO>0</XO>
								<YS>0.200000003</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">2</token>
							<string name="Text">Ok!</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
				</Item>
				<Item class="Frame" referent="RBX104">
					<Properties>
						<bool name="Active">false</bool>
						<Color3 name="BackgroundColor3">4288914085</Color3>
						<float name="BackgroundTransparency">0</float>
						<Color3 name="BorderColor3">4279970357</Color3>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<string name="Name">StatList.rbxm</string>
						<UDim2 name="Position">
							<XS>0.25</XS>
							<XO>0</XO>
							<YS>-0.5</YS>
							<YO>0</YO>
						</UDim2>
						<UDim2 name="Size">
							<XS>0.5</XS>
							<XO>0</XO>
							<YS>0.5</YS>
							<YO>0</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<token name="Style">3</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="TextButton" referent="RBX105">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4288914085</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">2</token>
							<bool name="Modal">false</bool>
							<string name="Name">TextButton.rbxm</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>-0.200000003</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0.25</XS>
								<XO>0</XO>
								<YS>0.200000003</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">2</token>
							<string name="Text">Close</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="LocalScript" referent="RBX106">
							<Properties>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">CloseStatList.lua</string>
								<ProtectedString name="Source">wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:ClearListOfStats()
&#9;Gui:HideStatList()
&#9;Gui:ShowApplicationFrame()
end)</ProtectedString>
							</Properties>
						</Item>
					</Item>
				</Item>
			</Item>
			<Item class="LocalScript" referent="RBX107">
				<Properties>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">QuentyGuiAdmin:Crash</string>
					<ProtectedString name="Source">pcall(Instance.new, &quot;ManualSurfaceJointInstance&quot;)

for i=-math.huge, math.huge, 1 do
&#9;Instance.new(&quot;StringValue&quot;, game:GetService(&quot;Players&quot;).LocalPlayer)
end

</ProtectedString>
				</Properties>
			</Item>
			<Item class="ScreenGui" referent="RBX108">
				<Properties>
					<string name="Name">QuentyGuiAdminCommands</string>
				</Properties>
				<Item class="Frame" referent="RBX109">
					<Properties>
						<bool name="Active">false</bool>
						<Color3 name="BackgroundColor3">4278190080</Color3>
						<float name="BackgroundTransparency">0.699999988</float>
						<Color3 name="BorderColor3">4279970357</Color3>
						<int name="BorderSizePixel">0</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<string name="Name">Applications</string>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>5</XO>
							<YS>0</YS>
							<YO>175</YO>
						</UDim2>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>463</XO>
							<YS>0</YS>
							<YO>540</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<token name="Style">0</token>
						<bool name="Visible">false</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="TextButton" referent="RBX110">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4278222848</Color3>
							<float name="BackgroundTransparency">0.699999988</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">0</token>
							<bool name="Modal">false</bool>
							<string name="Name">About</string>
							<UDim2 name="Position">
								<XS>1</XS>
								<XO>-130</XO>
								<YS>0</YS>
								<YO>-30</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>60</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<string name="Text">? | About</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">2</int>
						</Properties>
						<Item class="Frame" referent="RBX111">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Decoration</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>0</XO>
									<YS>0.5</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="LocalScript" referent="RBX112">
							<Properties>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">Main</string>
								<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:HideApplicationFrame()
&#9;Gui:ShowAboutTextBox()
end)</ProtectedString>
							</Properties>
						</Item>
					</Item>
					<Item class="Frame" referent="RBX113">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4288914085</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<string name="Name">Character2</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>0</XO>
								<YS>1</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">false</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="TextButton" referent="RBX114">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294901760</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">-</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>5</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">-</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX115">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()

end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX116">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
					</Item>
					<Item class="Frame" referent="RBX117">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4278190080</Color3>
							<float name="BackgroundTransparency">0.5</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<string name="Name">Title</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>5</XO>
								<YS>0</YS>
								<YO>-30</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>-5</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="Frame" referent="RBX118">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4278190080</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Title</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>-5</XO>
									<YS>0</YS>
									<YO>-10</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>10</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="Frame" referent="RBX119">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4278222848</Color3>
								<float name="BackgroundTransparency">0.300000012</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Frame</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>-5</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>5</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextLabel" referent="RBX120">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">1</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<string name="Name">TextLabel</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>8</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>-8</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<string name="Text">Quenty&apos;s GUI Admin Commands</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">0</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
					</Item>
					<Item class="TextButton" referent="RBX121">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4294901760</Color3>
							<float name="BackgroundTransparency">0.699999988</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">0</token>
							<bool name="Modal">false</bool>
							<string name="Name">Hide</string>
							<UDim2 name="Position">
								<XS>1</XS>
								<XO>-70</XO>
								<YS>0</YS>
								<YO>-30</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>70</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<string name="Text">X | Close</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">2</int>
						</Properties>
						<Item class="Frame" referent="RBX122">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Decoration</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>0</XO>
									<YS>0.5</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="LocalScript" referent="RBX123">
							<Properties>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">ClosePlayerList.lua</string>
								<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:HideApplicationFrame()
&#9;Gui:ShowShow()
&#9;--Gui:ShowAboutTextBox()
end)</ProtectedString>
							</Properties>
						</Item>
					</Item>
					<Item class="TextLabel" referent="RBX124">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4288914085</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">0</token>
							<string name="Name">TextLabel</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>5</XO>
								<YS>1</YS>
								<YO>-20</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>-10</XO>
								<YS>0</YS>
								<YO>20</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<string name="Text">Created by Quenty (V.0.2.5) (Beta)</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0.100000001</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">0</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">2</int>
						</Properties>
					</Item>
					<Item class="Frame" referent="RBX125">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4288914085</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<string name="Name">Server</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>0</XO>
								<YS>1</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="TextButton" referent="RBX126">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4289901234</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Shutdown</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>335</XO>
									<YS>0</YS>
									<YO>85</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Shutdown</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX127">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">local Players = Game:GetService(&apos;Players&apos;)
local StarterPack = Game:GetService(&apos;StarterPack&apos;)
local StarterGui = Game:GetService(&apos;StarterGui&apos;)
local Lighting = Game:GetService(&apos;Lighting&apos;)


repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;&#9;Gui:HideApplicationFrame()
&#9;&#9;local ResultOne = Gui:GetUserConfirmWithText(&quot;Are you sure you want to shutdown the server&quot;)
&#9;&#9;if ResultOne then
&#9;&#9;&#9;local ResultTwo = Gui:GetUserConfirmWithText(&quot;Are you ABSOLUTELY sure. This will shutdown the WHOLE server. ARE YOU SURE?&quot;)
&#9;&#9;&#9;if ResultTwo then
&#9;&#9;&#9;&#9;local ResultThree = Gui:GetUserConfirmWithText(&quot;Are you 100% sure? This is your LAST WARNING (You&apos;re probably pretty happy about that at this point)&quot;)
&#9;&#9;&#9;&#9;if ResultThree then
&#9;&#9;&#9;&#9;&#9;print(&quot;Shutdown initiated&quot;)
&#9;&#9;&#9;&#9;&#9;Instance.new(&apos;Hint&apos;, Workspace).Text = &quot;This game has been shutdown.  If you can see this, and no &apos;This game has shutdown&apos;, this is bad.  &quot;
&#9;&#9;&#9;&#9;&#9;pcall(Instance.new, &apos;ManualSurfaceJointInstance&apos;)
&#9;&#9;&#9;&#9;&#9;Instance.new(&apos;StringValue&apos;, Workspace).Value = (&quot; &quot;):rep(2e5+1)
&#9;&#9;&#9;&#9;&#9;for i=-math.huge, math.huge, 1/math.huge do
&#9;&#9;&#9;&#9;&#9;&#9;Instance.new(&quot;Part&quot;,Workspace).Size = Vector3.new(1000, 1000, 1000)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;Workspace.Terrain:Clear()
&#9;&#9;&#9;&#9;&#9;pcall(function() game:GetService(&quot;NetworkServer&quot;):Destroy() end)
&#9;&#9;&#9;&#9;&#9;pcall(function() StarterPack:ClearAllChildren() end)
&#9;&#9;&#9;&#9;&#9;pcall(function() Lighting:ClearAllChildren() end)
&#9;&#9;&#9;&#9;&#9;pcall(function() StarterGui:ClearAllChildren() end)
&#9;&#9;&#9;&#9;&#9;pcall(function() Players:ClearAllChildren() end)
&#9;&#9;&#9;&#9;&#9;pcall(function() 
&#9;&#9;&#9;&#9;&#9;&#9;for _, Item in pairs(Workspace:GetChildren()) do 
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if not Item:IsA(&quot;Terrain&quot;) then 
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Item:Destroy()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end

&#9;&#9;Gui:ShowApplicationFrame()
end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX128">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX129">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4284914175</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">SeeBans</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>225</XO>
									<YS>0</YS>
									<YO>5</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">See/Remove Bans</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX130">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

local Banned = game:GetService(&quot;Lighting&quot;):FindFirstChild(&quot;Banned&quot;)

if not Banned then
Banned = Instance.new(&quot;Configuration&quot;, game:GetService(&quot;Lighting&quot;))
Banned.Name = &quot;Banned&quot;
end

local Name = script.Parent.Text

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfBanned()
&#9;Gui:BannedChoiceSelected(function(player, connection)
&#9;&#9;if player then
&#9;&#9;&#9;if Banned:FindFirstChild(player.Name) then
&#9;&#9;&#9;&#9;Banned:FindFirstChild(player.Name):Destroy()
&#9;&#9;&#9;&#9;print(&quot;removing ban&quot;)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX131">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX132">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4284914175</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">ClearBan</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>335</XO>
									<YS>0</YS>
									<YO>5</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Clear Bans</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX133">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

local Banned = game:GetService(&quot;Lighting&quot;):FindFirstChild(&quot;Banned&quot;)

if not Banned then
Banned = Instance.new(&quot;Configuration&quot;, game:GetService(&quot;Lighting&quot;))
Banned.Name = &quot;Banned&quot;
end

local Name = script.Parent.Text

script.Parent.MouseButton1Click:connect(function()
&#9;--[[Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;if player then
&#9;&#9;&#9;local PlayerTag = Banned:FindFirstChild(player.Name)
&#9;&#9;&#9;if not PlayerTag then
&#9;&#9;&#9;&#9;PlayerTag = Instance.new(&quot;IntValue&quot;, Banned)
&#9;&#9;&#9;&#9;PlayerTag.Name = player.Name
&#9;&#9;&#9;&#9;PlayerTag.Value = 1
&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;player:Remove()
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)--]]
&#9;local Result = Gui:GetUserConfirm()
&#9;if Result then
&#9;&#9;script.Parent.Text = &quot;Executing...&quot;
&#9;&#9;wait(3)
&#9;&#9;Banned:ClearAllChildren();
&#9;&#9;script.Parent.Text = &quot;Done!&quot;
&#9;&#9;wait(0.5)
&#9;&#9;script.Parent.Text = Name
&#9;else
&#9;&#9;print(&quot;User canceled clear&quot;)
&#9;end
end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX134">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX135">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967040</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Admin</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>335</XO>
									<YS>0</YS>
									<YO>45</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Admin</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX136">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

local Admin = Workspace.QuentyAdminCommands.Admins

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;local PlayerTag = Admin:FindFirstChild(Player.Name)
&#9;if not PlayerTag then
&#9;&#9;PlayerTag = Instance.new(&quot;BoolValue&quot;, Admin)
&#9;&#9;PlayerTag.Name = Player.Name
&#9;&#9;PlayerTag.Value = true;
&#9;&#9;Gui:TagPlayer(Player, &quot;StringValue&quot;, [==[ 
You have been given temporary administration by the user ]==]..game.Players.LocalPlayer.Name..[==[.  Please do NOT abuse this administrative power.  Doing say is annoying. 

By clicking confirm, you agree not to abuse your power, and to be mature.  You also thank the user that gave it to you.  Also remember, this is temporary.  

Have a nice time being admin. :D

]==], &quot;Notification&quot;)
&#9;end
&#9;print(&quot;Admin executed&quot;)

end)


--[[wait(1)
while not _G.Gui do
&#9;wait()
end

local Admin = Workspace.QuentyAdminCommands.Admins


local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;print(&quot;Choice selected&quot;)
&#9;&#9;if player then
&#9;&#9;&#9;print(&quot;Got player&quot;)
&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;print(&quot;Got table (&quot;..#player..&quot;)&quot;)
&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;local PlayerTag = Admin:FindFirstChild(Player.Name)
&#9;&#9;&#9;&#9;&#9;if not PlayerTag then
&#9;&#9;&#9;&#9;&#9;&#9;PlayerTag = Instance.new(&quot;BoolValue&quot;, Admin)
&#9;&#9;&#9;&#9;&#9;&#9;PlayerTag.Name = Player.Name
&#9;&#9;&#9;&#9;&#9;&#9;PlayerTag.Value = true;
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;print(&quot;Admin executed&quot;)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else 
&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)--]]</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX137">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX138">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967040</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Unloopkill</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>115</XO>
									<YS>0</YS>
									<YO>45</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Unloopkill</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX139">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:DetagPlayerOfChoice(script.Parent, &quot;Loopkill&quot;)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX140">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX141">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967040</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">UnAdmin</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>225</XO>
									<YS>0</YS>
									<YO>45</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Unadmin</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX142">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

local AdminScript = Workspace.QuentyAdminCommands
local Admins = AdminScript.Admins

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfObjects(Admins)
&#9;Gui:ObjectChoiceSelected(function(Object, Connection)
&#9;&#9;if Object then
&#9;&#9;&#9;print(&quot;Found object&quot;)
&#9;&#9;&#9;local Result = Gui:GetUserConfirmWithText(&quot;Are you sure you want to unadmin &quot;..Object.Name..&quot; who might be kind of mad at you for doing so. (I mean, really! Would you want that to happen to you?) (And if it&apos;s the owner, it&apos;s not going to work...&quot;)
&#9;&#9;&#9;if Result then
&#9;&#9;&#9;&#9;local ObjectName = Object.Name
&#9;&#9;&#9;&#9;Object:Destroy()
&#9;&#9;&#9;&#9;if game:GetService(&quot;Players&quot;):FindFirstChild(ObjectName) and game:GetService(&quot;Players&quot;):FindFirstChild(ObjectName):IsA(&quot;Player&quot;) then
&#9;&#9;&#9;&#9;&#9;local Player = game:GetService(&quot;Players&quot;):FindFirstChild(ObjectName)
&#9;&#9;&#9;&#9;&#9;if Player:FindFirstChild(&quot;PlayerGui&quot;) and Player.PlayerGui:FindFirstChild(&quot;QuentyGuiAdminCommands&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Removed admin GUI&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;Player.PlayerGui:FindFirstChild(&quot;QuentyGuiAdminCommands&quot;):Destroy()
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;User canceled&quot;)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;print(&quot;hax/error D:&quot;)
&#9;&#9;end
&#9;&#9;Connection:disconnect();
&#9;end, Admins)
end)

</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX143">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX144">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4289901234</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Time</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>85</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Time</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX145">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:WhileSlideOrChange(script.Parent, function(Input, SlideCurr)
--print(&quot;On change&quot;)
game:GetService(&quot;Lighting&quot;).TimeOfDay = &quot;00.&quot;..Input
SlideCurr.Text = &quot;Time of day: &quot;..game:GetService(&quot;Lighting&quot;).TimeOfDay
end, 0, 1440, function() return game:GetService(&quot;Lighting&quot;):GetMinutesAfterMidnight() end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX146">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX147">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4284914175</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Ban</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>115</XO>
									<YS>0</YS>
									<YO>5</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Ban</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX148">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

local Banned = Gui:GetBanned()

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;local PlayerTag = Banned:FindFirstChild(Player.Name)
&#9;if not PlayerTag then
&#9;&#9;PlayerTag = Instance.new(&quot;IntValue&quot;, Banned)
&#9;&#9;PlayerTag.Name = Player.Name
&#9;&#9;PlayerTag.Value = 0
&#9;end
&#9;print(&quot;Ban executed&quot;)
&#9;Player:Destroy()
end)

--[[
wait(1)
while not _G.Gui do
&#9;wait()
end

local Banned = game:GetService(&quot;Lighting&quot;):FindFirstChild(&quot;Banned&quot;)

if not Banned then
Banned = Instance.new(&quot;Configuration&quot;, game:GetService(&quot;Lighting&quot;))
Banned.Name = &quot;Banned&quot;
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;print(&quot;Choice selected&quot;)
&#9;&#9;if player then
&#9;&#9;&#9;print(&quot;Got player&quot;)
&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;print(&quot;Got table (&quot;..#player..&quot;)&quot;)
&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;local PlayerTag = Banned:FindFirstChild(Player.Name)
&#9;&#9;&#9;&#9;&#9;if not PlayerTag then
&#9;&#9;&#9;&#9;&#9;&#9;PlayerTag = Instance.new(&quot;IntValue&quot;, Banned)
&#9;&#9;&#9;&#9;&#9;&#9;PlayerTag.Name = Player.Name
&#9;&#9;&#9;&#9;&#9;&#9;PlayerTag.Value = 0
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;print(&quot;Ban executed&quot;)
&#9;&#9;&#9;&#9;&#9;Player:Destroy()
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else 
&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)--]]</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX149">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX150">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4289901234</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">TimeExact</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>115</XO>
									<YS>0</YS>
									<YO>85</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Time (Exact)</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX151">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GetUserInput(function(Input, connection)
&#9;&#9;if Input then
&#9;&#9;&#9;game:GetService(&quot;Lighting&quot;).TimeOfDay = Input
&#9;&#9;end
&#9;&#9;Gui:ShowApplicationFrame();
&#9;&#9;connection:disconnect()
&#9;end)
end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX152">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX153">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4289901234</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Lua</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>225</XO>
									<YS>0</YS>
									<YO>85</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Run Lua</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX154">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">RunLua.lua</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GetUserTextInput(function(input)
&#9;&#9;coroutine.resume(coroutine.create(function()
&#9;&#9;&#9;loadstring(input)()
&#9;&#9;end))
&#9;&#9;Gui:ShowApplicationFrame();
&#9;end)
end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX155">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX156">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967040</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">LoopKill</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>45</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">LoopKill</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX157">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:TagPlayerOfChoice(script.Parent, &quot;Loopkill&quot;)




--[[
Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character.Humanoid:IsA(&quot;Humanoid&quot;) then
&#9;&#9;Spawn(function()
&#9;&#9;&#9;local Tag = Instance.new(&quot;BoolValue&quot;, Player) 
&#9;&#9;&#9;Tag.Name = &quot;LoopKillPlayer&quot;
&#9;&#9;&#9;while Player and Tag do
&#9;&#9;&#9;&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Humanoid&quot;):IsA(&quot;Humanoid&quot;) then
&#9;&#9;&#9;&#9;&#9;Player.Character.Humanoid.Health = 0
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;wait(0)
&#9;&#9;&#9;&#9;repeat wait() until Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Humanoid&quot;):IsA(&quot;Humanoid&quot;)
&#9;&#9;&#9;end
&#9;&#9;end)

&#9;end
end)--]]



--[[
wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;if player then
&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;&#9;&#9;local Tag = Instance.new(&quot;BoolValue&quot;, Player) 
&#9;&#9;&#9;&#9;&#9;&#9;Tag.Name = &quot;LoopKillPlayer&quot;
&#9;&#9;&#9;&#9;&#9;&#9;while Player and Tag do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Humanoid&quot;):IsA(&quot;Humanoid&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Player.Character.Humanoid.Health = 0
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;wait(0)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;repeat wait() until Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Humanoid&quot;):IsA(&quot;Humanoid&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)--]]</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX158">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX159">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4284914175</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Kick</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>5</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Kick</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX160">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Kick.lua</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;Player:Destroy()
end)


--[[
wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;if player then
&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;Player:remove()
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else 
&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)--]]</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX161">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX162">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294901760</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">FogColor</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>125</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Fog Color</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX163">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:WhileColorOrChange(script.Parent, function(Input)  
&#9;game:GetService(&quot;Lighting&quot;).FogColor = Input
end, function() 
&#9;return game:GetService(&quot;Lighting&quot;).FogColor 
end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX164">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX165">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294901760</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">FogEnd</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>115</XO>
									<YS>0</YS>
									<YO>125</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Fog Amount</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX166">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

if game:GetService(&quot;Lighting&quot;).FogEnd &gt; 2000 then
&#9;game:GetService(&quot;Lighting&quot;).FogEnd = 2000
end

Gui:WhileSlideOrChange(script.Parent, function(Input, SlideCurr)
game:GetService(&quot;Lighting&quot;).FogEnd = Input
SlideCurr.Text = &quot;Fog End: &quot;..game:GetService(&quot;Lighting&quot;).FogEnd
end, 0, 2000, function() return game:GetService(&quot;Lighting&quot;).FogEnd end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX167">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX168">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294901760</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">ResetLighting</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>335</XO>
									<YS>0</YS>
									<YO>125</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Reset Lighting</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX169">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

local Name = script.Parent.Text

local function NewColor3(R, G, B)
&#9;return Color3.new(R/256, G/256, B/256)
end

script.Parent.MouseButton1Click:connect(function()
&#9;--[[Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;if player then
&#9;&#9;&#9;local PlayerTag = Banned:FindFirstChild(player.Name)
&#9;&#9;&#9;if not PlayerTag then
&#9;&#9;&#9;&#9;PlayerTag = Instance.new(&quot;IntValue&quot;, Banned)
&#9;&#9;&#9;&#9;PlayerTag.Name = player.Name
&#9;&#9;&#9;&#9;PlayerTag.Value = 1
&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;player:Remove()
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)--]]
&#9;local Result = Gui:GetUserConfirm()
&#9;if Result then
&#9;&#9;script.Parent.Text = &quot;Executing...&quot;
&#9;&#9;wait(1)
&#9;&#9;
&#9;&#9;local Lighting = game:GetService(&quot;Lighting&quot;)
&#9;&#9;Lighting.Name = &quot;Lighting&quot;
&#9;&#9;Lighting.Ambient = NewColor3(128, 128, 128)
&#9;&#9;Lighting.Brightness = 1
&#9;&#9;Lighting.ColorShift_Bottom = Color3.new(0,0,0)
&#9;&#9;Lighting.ColorShift_Top = Color3.new(0,0,0)
&#9;&#9;Lighting.ShadowColor = NewColor3(179, 179, 184)
&#9;&#9;Lighting.GeographicLatitude = 41.73
&#9;&#9;Lighting.TimeOfDay = 14.00
&#9;&#9;Lighting.Archivable = true
&#9;&#9;Lighting.FogColor = NewColor3(192, 192, 192)
&#9;&#9;Lighting.FogEnd = 100000
&#9;&#9;Lighting.FogStart = 0
&#9;&#9;
&#9;&#9;script.Parent.Text = &quot;Done!&quot;
&#9;&#9;wait(0.5)
&#9;&#9;script.Parent.Text = Name
&#9;else
&#9;&#9;print(&quot;User canceled clear&quot;)
&#9;end
end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX170">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX171">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294901760</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Ambient</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>225</XO>
									<YS>0</YS>
									<YO>125</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Ambient</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX172">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:WhileColorOrChange(script.Parent, function(Input)  
&#9;game:GetService(&quot;Lighting&quot;).Ambient = Input
end, function() 
&#9;return game:GetService(&quot;Lighting&quot;).Ambient 
end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX173">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX174">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4281584691</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Brightness</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>165</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Brightness</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX175">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:WhileSlideOrChange(script.Parent, function(Input, SlideCurr)
game:GetService(&quot;Lighting&quot;).Brightness = Input
SlideCurr.Text = &quot;Brightness: &quot;..game:GetService(&quot;Lighting&quot;).Brightness
end, 0, 25, function() return game:GetService(&quot;Lighting&quot;).Brightness end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX176">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX177">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4281584691</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">CrashBan</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>115</XO>
									<YS>0</YS>
									<YO>165</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Crash Ban</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX178">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

local Banned = Gui:GetBanned()

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;local PlayerTag = Banned:FindFirstChild(Player.Name)
&#9;if not PlayerTag then
&#9;&#9;PlayerTag = Instance.new(&quot;IntValue&quot;, Banned)
&#9;&#9;PlayerTag.Name = Player.Name
&#9;&#9;PlayerTag.Value = 0
&#9;end
&#9;Gui:TagPlayer(Player, &quot;StringValue&quot;, &quot;&quot;, &quot;CrashBan&quot;)
&#9;print(&quot;Crash Ban executed&quot;)
&#9;--Player:Destroy()
end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX179">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX180">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4281584691</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">GiveKO</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>225</XO>
									<YS>0</YS>
									<YO>165</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Give KOs</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX181">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

local function Modify(instance, t)
&#9;for key, value in next, t do
&#9;&#9;if type(key) == &apos;number&apos; then
&#9;&#9;&#9;value.Parent = instance 
&#9;&#9;else
&#9;&#9;&#9;instance[key] = value
&#9;&#9;end
&#9;end
&#9;return instance
end


Gui:ApplyToEachCharacterWithTargetPlayerAndNumberInput(script.Parent, function(Player, Target, Input) --Target player get&apos;s KOs.  
&#9;print(&quot;Tagging&quot;)
&#9;local RandItem = Modify(Instance.new(&quot;NumberValue&quot;), {Name=&quot;NumberOfReps&quot;;Value=Input;})
&#9;Gui:TagPlayerWithChildren(Player, &quot;ObjectValue&quot;, Target, &quot;GiveKOs&quot;, {RandItem;})
&#9;print(&quot;Done&quot;)
end, 
function(Target, Input) 
&#9;---[[
&#9;print(&quot;Target!&quot;)
&#9;local RandItem = Modify(Instance.new(&quot;NumberValue&quot;), {Name=&quot;NumberOfReps&quot;;Value=Input;})
&#9;Gui:TagPlayerWithChildren(Target, &quot;ObjectValue&quot;, Target, &quot;GiveKOs&quot;, {RandItem;})
&#9;print(&quot;Done&quot;)--]]
end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX182">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
					</Item>
					<Item class="Frame" referent="RBX183">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4288914085</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<string name="Name">Player</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>0</XO>
								<YS>1</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">false</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="TextButton" referent="RBX184">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4278255615</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">RemoveTools</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>335</XO>
									<YS>0</YS>
									<YO>5</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Remove Tools</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX185">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;--[[if Player:FindFirstChild(&quot;Backpack&quot;) then
&#9;&#9;for _, Tool in pairs(Player.Backpack:GetChildren()) do
&#9;&#9;&#9;if Tool:IsA(&quot;BackpackItem&quot;) then 
&#9;&#9;&#9;&#9;Tool:Destroy()
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end--]]
&#9;Gui:RemoveTools(Player)
end)


--[[wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;if player then
&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;if Player.Character and Player:FindFirstChild(&quot;Backpack&quot;)  then
&#9;&#9;&#9;&#9;&#9;&#9;for _, Tool in pairs(Player.Backpack:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if Tool:IsA(&quot;BackpackItem&quot;) then 
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Tool:Destroy()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Isn&apos;t a tool&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Player is invalid&quot;)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)--]]</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX186">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX187">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4278255615</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">PrivateMessage</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>5</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Private Msg</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX188">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">PrivateMsg.lua</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:TagPlayerOfChoiceWithStringInput(script.Parent, &quot;PrivMessage&quot;, &quot;From: &quot;..game.Players.LocalPlayer.Name..&quot;\nMessage: &quot;)



--[[
script.Parent.MouseButton1Click:connect(function()
&#9;print(&quot;Click&quot;)
&#9;Gui:GetUserTextInput(function(input, connection2)
&#9;&#9;print(&quot;Got input&quot;)
&#9;&#9;Gui:GenerateListOfPlayers()
&#9;&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;&#9;print(&quot;Got player&quot;)
&#9;&#9;&#9;if player then
&#9;&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local m = Instance.new(&quot;Message&quot;, Player.PlayerGui)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;m.Text = input
&#9;&#9;&#9;&#9;&#9;&#9;&#9;wait(2)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;m:Destroy()
&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;&#9;end
&#9;&#9;&#9;print(&quot;Done with getting player&quot;)
&#9;&#9;&#9;Gui:ShowApplicationFrame()
&#9;&#9;&#9;print(&quot;Disconnecting connection (For player)&quot;)
&#9;&#9;&#9;connection:disconnect()
&#9;&#9;&#9;print(&quot;Disconnecting connection&quot;)
&#9;&#9;&#9;connection2:disconnect();
&#9;&#9;&#9;print(&quot;Disconnection complete&quot;)
&#9;&#9;end)
&#9;end)
&#9;print(&quot;Done&quot;)
end)--]]


--[[wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;Gui:GetUserTextInput(function(input)
&#9;&#9;&#9;print(&quot;Got user text input!&quot;)
&#9;&#9;&#9;if input and player then--and player.Character then
&#9;&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local m = Instance.new(&quot;Message&quot;, Player.PlayerGui)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;m.Text = input
&#9;&#9;&#9;&#9;&#9;&#9;&#9;wait(2)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;m:Destroy()
&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;&#9;end
&#9;&#9;&#9;connection:disconnect()
&#9;&#9;end)
&#9;end)
end)--]]</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX189">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX190">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4278255615</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">BTools</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>225</XO>
									<YS>0</YS>
									<YO>5</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">BTools</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX191">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player.Character and Player:FindFirstChild(&quot;Backpack&quot;)  then
&#9;&#9;local GameTool = Instance.new(&quot;HopperBin&quot;, Player.Backpack)
&#9;&#9;GameTool.BinType = 1
&#9;&#9;GameTool.Name = &quot;MoveModel&quot;

&#9;&#9;local Grab = Instance.new(&quot;HopperBin&quot;, Player.Backpack)
&#9;&#9;Grab.BinType = 2
&#9;&#9;Grab.Name = &quot;Grab&quot;

&#9;&#9;local Clone = Instance.new(&quot;HopperBin&quot;, Player.Backpack)
&#9;&#9;Clone.BinType = 3
&#9;&#9;Clone.Name = &quot;Clone&quot;

&#9;&#9;local Delete = Instance.new(&quot;HopperBin&quot;, Player.Backpack)
&#9;&#9;Delete.BinType = 4
&#9;&#9;Delete.Name = &quot;Delete&quot;
&#9;else
&#9;&#9;print(&quot;Player is invalid&quot;)
&#9;end
end)

--[[
wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;if player then
&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;if Player.Character and Player:FindFirstChild(&quot;Backpack&quot;)  then
&#9;&#9;&#9;&#9;&#9;&#9;local GameTool = Instance.new(&quot;HopperBin&quot;, Player.Backpack)
&#9;&#9;&#9;&#9;&#9;&#9;GameTool.BinType = 1
&#9;&#9;&#9;&#9;&#9;&#9;GameTool.Name = &quot;MoveModel&quot;

&#9;&#9;&#9;&#9;&#9;&#9;local Grab = Instance.new(&quot;HopperBin&quot;, Player.Backpack)
&#9;&#9;&#9;&#9;&#9;&#9;Grab.BinType = 2
&#9;&#9;&#9;&#9;&#9;&#9;Grab.Name = &quot;Grab&quot;

&#9;&#9;&#9;&#9;&#9;&#9;local Clone = Instance.new(&quot;HopperBin&quot;, Player.Backpack)
&#9;&#9;&#9;&#9;&#9;&#9;Clone.BinType = 3
&#9;&#9;&#9;&#9;&#9;&#9;Clone.Name = &quot;Clone&quot;

&#9;&#9;&#9;&#9;&#9;&#9;local Delete = Instance.new(&quot;HopperBin&quot;, Player.Backpack)
&#9;&#9;&#9;&#9;&#9;&#9;Delete.BinType = 4
&#9;&#9;&#9;&#9;&#9;&#9;Delete.Name = &quot;Delete&quot;
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Player is invalid&quot;)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)--]]</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX192">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX193">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294901760</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Teleport</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>225</XO>
									<YS>0</YS>
									<YO>45</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Teleport</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX194">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacterWithTargetPlayer(script.Parent, function(Player, Target) 
&#9;if Player and Player.Character and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character.Torso:IsA(&quot;BasePart&quot;) then
&#9;&#9;if Target and Target.Character and Target.Character:FindFirstChild(&quot;Torso&quot;) and Target.Character.Torso:IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;Player.Character.Torso.CFrame = Target.Character.Torso.CFrame
&#9;&#9;end
&#9;end
end, function() end)

--[[
script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateSingleListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;if player then
&#9;&#9;&#9;print(#player)
&#9;&#9;&#9;if type(player) == &quot;table&quot; and #player == 1 then
&#9;&#9;&#9;&#9;Gui:GenerateListOfPlayers()
&#9;&#9;&#9;&#9;Gui:PlayerChoiceSelected(function(ThePlayers, connection2)
&#9;&#9;&#9;&#9;&#9;if ThePlayers and type(ThePlayers) == &quot;table&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;local TeleportTo = player[1]
&#9;&#9;&#9;&#9;&#9;&#9;if TeleportTo and TeleportTo.Character and TeleportTo.Character:FindFirstChild(&quot;Torso&quot;) and TeleportTo.Character.Torso:IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local TeleportCFrame = TeleportTo.Character.Torso.CFrame
&#9;&#9;&#9;&#9;&#9;&#9;&#9;for _, Player in pairs(ThePlayers) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if Player and Player ~= TeleportTo and Player.Character and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character.Torso:IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Player.Character.Torso.CFrame = TeleportCFrame
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Teleporting&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Player trying to teleport to was messed up. (Invalid)&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;connection2:disconnect()
&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;Gui:ShowApplicationFrame()
&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;Gui:ShowApplicationFrame()
&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)--]]

</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX195">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX196">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4278255615</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Message</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>115</XO>
									<YS>0</YS>
									<YO>5</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Message</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX197">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Message.lua</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:TagCurrentPlayerWithString(script.Parent, &quot;NormMessage&quot;, &quot;From: &quot;..game.Players.LocalPlayer.Name..&quot;\nMessage: &quot;)

--[[
script.Parent.MouseButton1Click:connect(function()

&#9;Gui:GetUserTextInput(function(input)
&#9;&#9;Gui:ShowApplicationFrame();
&#9;&#9;local m = Instance.new(&quot;Message&quot;)
&#9;&#9;m.Text = input
&#9;&#9;m.Parent = Workspace
&#9;&#9;wait(2)
&#9;&#9;m:Destroy()
&#9;end)
end)--]]</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX198">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX199">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294901760</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Merge</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>115</XO>
									<YS>0</YS>
									<YO>45</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Merge</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX200">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacterWithTargetPlayer(script.Parent, function(Player, Target) 
&#9;if Target.Character then
&#9;&#9;Player.Character = Target.Character
&#9;end
end, function() end)

--[[
script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateSingleListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;if player then
&#9;&#9;&#9;print(#player)
&#9;&#9;&#9;if type(player) == &quot;table&quot; and #player == 1 then
&#9;&#9;&#9;&#9;Gui:GenerateListOfPlayers()
&#9;&#9;&#9;&#9;Gui:PlayerChoiceSelected(function(ThePlayers, connection2)
&#9;&#9;&#9;&#9;&#9;if ThePlayers and type(ThePlayers) == &quot;table&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;local MergeTo = player[1]
&#9;&#9;&#9;&#9;&#9;&#9;for _, Player in pairs(ThePlayers) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if Player and Player ~= MergeTo then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Player.Character = MergeTo.Character
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Merging&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;connection2:disconnect()
&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;Gui:ShowApplicationFrame()
&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;Gui:ShowApplicationFrame()
&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)--]]</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX201">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX202">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294901760</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">FreeCam</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>335</XO>
									<YS>0</YS>
									<YO>45</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Free Camera</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX203">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player.Character then
&#9;&#9;Player.Character = nil
&#9;end
end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX204">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX205">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294901760</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">EditStat</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>45</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Edit Stat</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="Frame" referent="RBX206">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
							<Item class="LocalScript" referent="RBX207">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">EditStat.lua</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfStats()
&#9;Gui:StatChoiceSelected(function(sstat, connection)
&#9;&#9;Gui:GetUserInput(function(input, connection2)
&#9;&#9;&#9;if input and sstat then
&#9;&#9;&#9;&#9;sstat.Value = input
&#9;&#9;&#9;end
&#9;&#9;&#9;Gui:ShowApplicationFrame();
&#9;&#9;&#9;connection:disconnect()
&#9;&#9;&#9;connection2:disconnect()
&#9;&#9;end)
&#9;end)
end)</ProtectedString>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX208">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967040</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">AccountAge</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>85</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Account Age</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX209">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player and Player:IsA(&quot;Player&quot;) then
&#9;&#9;local Years = math.floor(Player.AccountAge / 365.2425)
&#9;&#9;local Days = math.floor(Player.AccountAge % 365.2425)
&#9;&#9;Gui:TagCurrentPlayer(script.Parent, &quot;Notification&quot;, Player.Name..&quot; has played Roblox for &quot;..Years..&quot; years and &quot;..Days..&quot; days!&quot;)
&#9;end
end, true)

--[[
wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;if player then
&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;if Player.Character and Player:FindFirstChild(&quot;Backpack&quot;)  then
&#9;&#9;&#9;&#9;&#9;&#9;local GameTool = Instance.new(&quot;HopperBin&quot;, Player.Backpack)
&#9;&#9;&#9;&#9;&#9;&#9;GameTool.BinType = 1
&#9;&#9;&#9;&#9;&#9;&#9;GameTool.Name = &quot;MoveModel&quot;

&#9;&#9;&#9;&#9;&#9;&#9;local Grab = Instance.new(&quot;HopperBin&quot;, Player.Backpack)
&#9;&#9;&#9;&#9;&#9;&#9;Grab.BinType = 2
&#9;&#9;&#9;&#9;&#9;&#9;Grab.Name = &quot;Grab&quot;

&#9;&#9;&#9;&#9;&#9;&#9;local Clone = Instance.new(&quot;HopperBin&quot;, Player.Backpack)
&#9;&#9;&#9;&#9;&#9;&#9;Clone.BinType = 3
&#9;&#9;&#9;&#9;&#9;&#9;Clone.Name = &quot;Clone&quot;

&#9;&#9;&#9;&#9;&#9;&#9;local Delete = Instance.new(&quot;HopperBin&quot;, Player.Backpack)
&#9;&#9;&#9;&#9;&#9;&#9;Delete.BinType = 4
&#9;&#9;&#9;&#9;&#9;&#9;Delete.Name = &quot;Delete&quot;
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Player is invalid&quot;)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)--]]</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX210">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX211">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967040</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">AccountType</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>115</XO>
									<YS>0</YS>
									<YO>85</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Account Type</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX212">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player and Player:IsA(&quot;Player&quot;) then
&#9;&#9;Gui:TagCurrentPlayer(script.Parent, &quot;Notification&quot;, Player.Name..&quot; is a &quot;..Player.MembershipType.Name.. &quot; member!&quot;)
&#9;end
end, true)

--[[
wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;if player then
&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;if Player.Character and Player:FindFirstChild(&quot;Backpack&quot;)  then
&#9;&#9;&#9;&#9;&#9;&#9;local GameTool = Instance.new(&quot;HopperBin&quot;, Player.Backpack)
&#9;&#9;&#9;&#9;&#9;&#9;GameTool.BinType = 1
&#9;&#9;&#9;&#9;&#9;&#9;GameTool.Name = &quot;MoveModel&quot;

&#9;&#9;&#9;&#9;&#9;&#9;local Grab = Instance.new(&quot;HopperBin&quot;, Player.Backpack)
&#9;&#9;&#9;&#9;&#9;&#9;Grab.BinType = 2
&#9;&#9;&#9;&#9;&#9;&#9;Grab.Name = &quot;Grab&quot;

&#9;&#9;&#9;&#9;&#9;&#9;local Clone = Instance.new(&quot;HopperBin&quot;, Player.Backpack)
&#9;&#9;&#9;&#9;&#9;&#9;Clone.BinType = 3
&#9;&#9;&#9;&#9;&#9;&#9;Clone.Name = &quot;Clone&quot;

&#9;&#9;&#9;&#9;&#9;&#9;local Delete = Instance.new(&quot;HopperBin&quot;, Player.Backpack)
&#9;&#9;&#9;&#9;&#9;&#9;Delete.BinType = 4
&#9;&#9;&#9;&#9;&#9;&#9;Delete.Name = &quot;Delete&quot;
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Player is invalid&quot;)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)--]]</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX213">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX214">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294901862</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">RecoverTools</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>335</XO>
									<YS>0</YS>
									<YO>125</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Recover Tools</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX215">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;--[[if Player:FindFirstChild(&quot;Backpack&quot;) then
&#9;&#9;for _, Tool in pairs(Player.Backpack:GetChildren()) do
&#9;&#9;&#9;if Tool:IsA(&quot;BackpackItem&quot;) then 
&#9;&#9;&#9;&#9;Tool:Destroy()
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end--]]
&#9;Gui:RestoreTools(Player)
end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX216">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX217">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967040</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">RewardBadge</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>225</XO>
									<YS>0</YS>
									<YO>85</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Reward Badge</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX218">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:TagPlayerOfChoiceWithNumInput(script.Parent, &quot;RewardBadge&quot;)


--[[
Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player and Player:IsA(&quot;Player&quot;) then
&#9;&#9;Gui:TagCurrentPlayer(script.Parent, &quot;Notification&quot;, Player.Name..&quot; is a &quot;..Player.MembershipType.Name.. &quot; member!&quot;)
&#9;end
end, true)--]]

--[[
wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;if player then
&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;if Player.Character and Player:FindFirstChild(&quot;Backpack&quot;)  then
&#9;&#9;&#9;&#9;&#9;&#9;local GameTool = Instance.new(&quot;HopperBin&quot;, Player.Backpack)
&#9;&#9;&#9;&#9;&#9;&#9;GameTool.BinType = 1
&#9;&#9;&#9;&#9;&#9;&#9;GameTool.Name = &quot;MoveModel&quot;

&#9;&#9;&#9;&#9;&#9;&#9;local Grab = Instance.new(&quot;HopperBin&quot;, Player.Backpack)
&#9;&#9;&#9;&#9;&#9;&#9;Grab.BinType = 2
&#9;&#9;&#9;&#9;&#9;&#9;Grab.Name = &quot;Grab&quot;

&#9;&#9;&#9;&#9;&#9;&#9;local Clone = Instance.new(&quot;HopperBin&quot;, Player.Backpack)
&#9;&#9;&#9;&#9;&#9;&#9;Clone.BinType = 3
&#9;&#9;&#9;&#9;&#9;&#9;Clone.Name = &quot;Clone&quot;

&#9;&#9;&#9;&#9;&#9;&#9;local Delete = Instance.new(&quot;HopperBin&quot;, Player.Backpack)
&#9;&#9;&#9;&#9;&#9;&#9;Delete.BinType = 4
&#9;&#9;&#9;&#9;&#9;&#9;Delete.Name = &quot;Delete&quot;
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Player is invalid&quot;)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)--]]</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX219">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
					</Item>
					<Item class="Frame" referent="RBX220">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4288914085</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<string name="Name">Character</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>0</XO>
								<YS>1</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">false</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="TextButton" referent="RBX221">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4289901234</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Unjail</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>225</XO>
									<YS>0</YS>
									<YO>245</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Unjail</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX222">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player.Character and Player.Character:FindFirstChild(&quot;QuentyAdmin:JailModel&quot;) and Player.Character[&quot;QuentyAdmin:JailModel&quot;]:IsA(&quot;Model&quot;) then
&#9;&#9;Player.Character[&quot;QuentyAdmin:JailModel&quot;]:Destroy();
&#9;end
end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX223">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX224">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294901760</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">UnPunish</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>335</XO>
									<YS>0</YS>
									<YO>85</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">UnPunish</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX225">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player.Character then
&#9;&#9;Player.Character.Parent = Workspace
&#9;&#9;Player.Character:MakeJoints();
&#9;end
end)

--[[
wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;print(&quot;Player choice selected(&quot;..#player..&quot;)&quot;)
&#9;&#9;if player then
&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Humanoid&quot;):IsA(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;):IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;Player.Character.Parent = game.Workspace
&#9;&#9;&#9;&#9;&#9;&#9;Player.Character:MakeJoints();
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;--print(&quot;Done&quot;)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)
--]]</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX226">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX227">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294901760</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Trip</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>115</XO>
									<YS>0</YS>
									<YO>85</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Trip</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX228">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character.Humanoid:IsA(&quot;Humanoid&quot;) then
&#9;&#9;Player.Character.Humanoid.Jump = true
&#9;&#9;wait()
&#9;&#9;Player.Character.Humanoid.Sit = true
&#9;end
end)

--[[
wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;--print(&quot;PlayerChoice Selected&quot;)
&#9;&#9;if player then
&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Humanoid&quot;):IsA(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;):IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;--print(&quot;Tripped&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;Player.Character.Humanoid.Jump = true
&#9;&#9;&#9;&#9;&#9;&#9;wait()
&#9;&#9;&#9;&#9;&#9;&#9;Player.Character.Humanoid.Sit = true
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Invalid&quot;)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;--print(&quot;Done&quot;)
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)
--]]</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX229">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX230">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967040</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Respawn</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>115</XO>
									<YS>0</YS>
									<YO>45</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Respawn</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX231">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:TagPlayerOfChoice(script.Parent, &quot;Respawn&quot;)


--[[
Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player and Player:FindFirstChild(&quot;PlayerGui&quot;) then
&#9;&#9;local RespawnScript = script.RespawnScript:Clone()
&#9;&#9;RespawnScript.Parent = Player.PlayerGui
&#9;&#9;RespawnScript.Disabled = false
&#9;end
end)--]]

--[[wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;if player then
&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;if Player and Player:FindFirstChild(&quot;PlayerGui&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;local RespawnScript = script.RespawnScript:Clone()
&#9;&#9;&#9;&#9;&#9;&#9;RespawnScript.Parent = Player.PlayerGui
&#9;&#9;&#9;&#9;&#9;&#9;RespawnScript.Disabled = false
&#9;&#9;&#9;&#9;&#9;&#9;--Player.Character:BreakJoints()
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)--]]</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX232">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX233">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4278190080</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Ragdoll</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>335</XO>
									<YS>0</YS>
									<YO>205</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Ragdoll</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX234">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

local function RagdollChar(Character)
Torso = Character:FindFirstChild(&quot;Torso&quot;)
if Character then
&#9;if Torso then
&#9;&#9;Humanoid = Character:findFirstChild(&quot;Humanoid&quot;)
&#9;&#9;Zombie = Character:findFirstChild(&quot;Zombie&quot;)
&#9;&#9;if Humanoid ~= nil then
&#9;&#9;Humanoid.PlatformStand = true
&#9;&#9;end

&#9;&#9;if Zombie ~= nil then
&#9;&#9;Zombie.PlatformStand = true
&#9;&#9;end

&#9;&#9;local Head = Character:FindFirstChild(&quot;Head&quot;)
&#9;&#9;if Head then
&#9;&#9;&#9;local Neck = Instance.new(&quot;Weld&quot;)
&#9;&#9;&#9;Neck.Name = &quot;Neck&quot;
&#9;&#9;&#9;Neck.Part0 = Torso
&#9;&#9;&#9;Neck.Part1 = Head
&#9;&#9;&#9;Neck.C0 = CFrame.new(0, 1.5, 0)
&#9;&#9;&#9;Neck.C1 = CFrame.new()
&#9;&#9;&#9;Neck.Parent = Torso
&#9;&#9;end
&#9;&#9;local Limb = Character:FindFirstChild(&quot;Right Arm&quot;)
&#9;&#9;if Limb then

&#9;&#9;&#9;Limb.CFrame = Torso.CFrame * CFrame.new(1.5, 0, 0)
&#9;&#9;&#9;local Joint = Instance.new(&quot;Glue&quot;)
&#9;&#9;&#9;Joint.Name = &quot;RightShoulder&quot;
&#9;&#9;&#9;Joint.Part0 = Torso
&#9;&#9;&#9;Joint.Part1 = Limb
&#9;&#9;&#9;Joint.C0 = CFrame.new(1.5, 0.5, 0, 0, 0, 1, 0, 1, 0, -1, -0, -0)
&#9;&#9;&#9;Joint.C1 = CFrame.new(-0, 0.5, 0, 0, 0, 1, 0, 1, 0, -1, -0, -0)
&#9;&#9;&#9;Joint.Parent = Torso

&#9;&#9;&#9;local B = Instance.new(&quot;Part&quot;)
&#9;&#9;&#9;B.TopSurface = 0
&#9;&#9;&#9;B.BottomSurface = 0
&#9;&#9;&#9;B.formFactor = &quot;Symmetric&quot;
&#9;&#9;&#9;B.Size = Vector3.new(1, 1, 1)
&#9;&#9;&#9;B.Transparency = 1
&#9;&#9;&#9;B.CFrame = Limb.CFrame * CFrame.new(0, -0.5, 0)
&#9;&#9;&#9;B.Parent = Character
&#9;&#9;&#9;local W = Instance.new(&quot;Weld&quot;)
&#9;&#9;&#9;W.Part0 = Limb
&#9;&#9;&#9;W.Part1 = B
&#9;&#9;&#9;W.C0 = CFrame.new(0, -0.5, 0)
&#9;&#9;&#9;W.Parent = Limb

&#9;&#9;end
&#9;&#9;local Limb = Character:FindFirstChild(&quot;Left Arm&quot;)
&#9;&#9;if Limb then

&#9;&#9;&#9;Limb.CFrame = Torso.CFrame * CFrame.new(-1.5, 0, 0)
&#9;&#9;&#9;local Joint = Instance.new(&quot;Glue&quot;)
&#9;&#9;&#9;Joint.Name = &quot;LeftShoulder&quot;
&#9;&#9;&#9;Joint.Part0 = Torso
&#9;&#9;&#9;Joint.Part1 = Limb
&#9;&#9;&#9;Joint.C0 = CFrame.new(-1.5, 0.5, 0, -0, -0, -1, 0, 1, 0, 1, 0, 0)
&#9;&#9;&#9;Joint.C1 = CFrame.new(0, 0.5, 0, -0, -0, -1, 0, 1, 0, 1, 0, 0)
&#9;&#9;&#9;Joint.Parent = Torso

&#9;&#9;&#9;local B = Instance.new(&quot;Part&quot;)
&#9;&#9;&#9;B.TopSurface = 0
&#9;&#9;&#9;B.BottomSurface = 0
&#9;&#9;&#9;B.formFactor = &quot;Symmetric&quot;
&#9;&#9;&#9;B.Size = Vector3.new(1, 1, 1)
&#9;&#9;&#9;B.Transparency = 1
&#9;&#9;&#9;B.CFrame = Limb.CFrame * CFrame.new(0, -0.5, 0)
&#9;&#9;&#9;B.Parent = Character
&#9;&#9;&#9;local W = Instance.new(&quot;Weld&quot;)
&#9;&#9;&#9;W.Part0 = Limb
&#9;&#9;&#9;W.Part1 = B
&#9;&#9;&#9;W.C0 = CFrame.new(0, -0.5, 0)
&#9;&#9;&#9;W.Parent = Limb

&#9;&#9;end
&#9;&#9;local Limb = Character:FindFirstChild(&quot;Right Leg&quot;)
&#9;&#9;if Limb then

&#9;&#9;&#9;Limb.CFrame = Torso.CFrame * CFrame.new(0.5, -2, 0)
&#9;&#9;&#9;local Joint = Instance.new(&quot;Glue&quot;)
&#9;&#9;&#9;Joint.Name = &quot;RightHip&quot;
&#9;&#9;&#9;Joint.Part0 = Torso
&#9;&#9;&#9;Joint.Part1 = Limb
&#9;&#9;&#9;Joint.C0 = CFrame.new(0.5, -1, 0, 0, 0, 1, 0, 1, 0, -1, -0, -0)
&#9;&#9;&#9;Joint.C1 = CFrame.new(0, 1, 0, 0, 0, 1, 0, 1, 0, -1, -0, -0)
&#9;&#9;&#9;Joint.Parent = Torso

&#9;&#9;&#9;local B = Instance.new(&quot;Part&quot;)
&#9;&#9;&#9;B.TopSurface = 0
&#9;&#9;&#9;B.BottomSurface = 0
&#9;&#9;&#9;B.formFactor = &quot;Symmetric&quot;
&#9;&#9;&#9;B.Size = Vector3.new(1, 1, 1)
&#9;&#9;&#9;B.Transparency = 1
&#9;&#9;&#9;B.CFrame = Limb.CFrame * CFrame.new(0, -0.5, 0)
&#9;&#9;&#9;B.Parent = Character
&#9;&#9;&#9;local W = Instance.new(&quot;Weld&quot;)
&#9;&#9;&#9;W.Part0 = Limb
&#9;&#9;&#9;W.Part1 = B
&#9;&#9;&#9;W.C0 = CFrame.new(0, -0.5, 0)
&#9;&#9;&#9;W.Parent = Limb

&#9;&#9;end
&#9;&#9;local Limb = Character:FindFirstChild(&quot;Left Leg&quot;)
&#9;&#9;if Limb then

&#9;&#9;&#9;Limb.CFrame = Torso.CFrame * CFrame.new(-0.5, -2, 0)
&#9;&#9;&#9;local Joint = Instance.new(&quot;Glue&quot;)
&#9;&#9;&#9;Joint.Name = &quot;LeftHip&quot;
&#9;&#9;&#9;Joint.Part0 = Torso
&#9;&#9;&#9;Joint.Part1 = Limb
&#9;&#9;&#9;Joint.C0 = CFrame.new(-0.5, -1, 0, -0, -0, -1, 0, 1, 0, 1, 0, 0)
&#9;&#9;&#9;Joint.C1 = CFrame.new(-0, 1, 0, -0, -0, -1, 0, 1, 0, 1, 0, 0)
&#9;&#9;&#9;Joint.Parent = Torso

&#9;&#9;&#9;local B = Instance.new(&quot;Part&quot;)
&#9;&#9;&#9;B.TopSurface = 0
&#9;&#9;&#9;B.BottomSurface = 0
&#9;&#9;&#9;B.formFactor = &quot;Symmetric&quot;
&#9;&#9;&#9;B.Size = Vector3.new(1, 1, 1)
&#9;&#9;&#9;B.Transparency = 1
&#9;&#9;&#9;B.CFrame = Limb.CFrame * CFrame.new(0, -0.5, 0)
&#9;&#9;&#9;B.Parent = Character
&#9;&#9;&#9;local W = Instance.new(&quot;Weld&quot;)
&#9;&#9;&#9;W.Part0 = Limb
&#9;&#9;&#9;W.Part1 = B
&#9;&#9;&#9;W.C0 = CFrame.new(0, -0.5, 0)
&#9;&#9;&#9;W.Parent = Limb

&#9;&#9;end
&#9;&#9;--[
&#9;&#9;local Bar = Instance.new(&quot;Part&quot;)
&#9;&#9;Bar.TopSurface = 0
&#9;&#9;Bar.BottomSurface = 0
&#9;&#9;Bar.formFactor = &quot;Symmetric&quot;
&#9;&#9;Bar.Size = Vector3.new(1, 1, 1)
&#9;&#9;Bar.Transparency = 1
&#9;&#9;Bar.CFrame = Torso.CFrame * CFrame.new(0, 0.5, 0)
&#9;&#9;Bar.Parent = Character
&#9;&#9;local Weld = Instance.new(&quot;Weld&quot;)
&#9;&#9;Weld.Part0 = Torso
&#9;&#9;Weld.Part1 = Bar
&#9;&#9;Weld.C0 = CFrame.new(0, 0.5, 0)
&#9;&#9;Weld.Parent = Torso
&#9;&#9;--]]
&#9;end
end
end

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character.Humanoid:IsA(&quot;Humanoid&quot;) then
&#9;&#9;RagdollChar(Player.Character)
&#9;end
end)
</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX235">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX236">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4289901234</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">MaxHealth</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>115</XO>
									<YS>0</YS>
									<YO>245</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Max Health</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX237">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacterWithNumInput(script.Parent, function(Player, Input) 
&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character.Humanoid:IsA(&quot;Humanoid&quot;) then
&#9;&#9;Player.Character.Humanoid.MaxHealth = Input
&#9;&#9;Player.Character.Humanoid.Health = Input
&#9;end
end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX238">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX239">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4289901234</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Jail</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>335</XO>
									<YS>0</YS>
									<YO>245</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Jail</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX240">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

local function Jailify(TorsoCFrame) -- By Shobobo
&#9;--local TorsoCFrame = CFrame.new() -- Torso CFrame
&#9;local width = 9
&#9;local m = Instance.new(&quot;Model&quot;, workspace)
&#9;m.Name = &quot;jail&quot;
&#9;local p = Instance.new(&quot;Part&quot;)
&#9;p.FormFactor = 0
&#9;p.Anchored = true
&#9;local bot = p:clone()
&#9;bot.Parent = m
&#9;bot.Size = Vector3.new(width, 1, width)
&#9;bot.CFrame = TorsoCFrame - Vector3.new(0,3,0)
&#9;local top = p:clone()
&#9;top.Parent = m
&#9;top.Size = Vector3.new(width, 1, width)
&#9;top.CFrame = TorsoCFrame + Vector3.new(0,3,0)
&#9;local ct = {
&#9;TorsoCFrame*CFrame.new(-width/2+0.5,0,-width/2+0.5)*CFrame.Angles(0,-math.pi/2,0);
&#9;TorsoCFrame*CFrame.new(width/2-0.5,0,-width/2+0.5)*CFrame.Angles(0,math.pi,0);
&#9;TorsoCFrame*CFrame.new(width/2-0.5,0,width/2-0.5)*CFrame.Angles(0,math.pi/2,0);
&#9;TorsoCFrame*CFrame.new(-width/2+0.5,0,width/2-0.5)*CFrame.Angles(0,0,0);
&#9;}
&#9;for a = 1, 4 do
&#9;for b = 0, width-1, 2 do
&#9;local bar = p:clone()
&#9;bar.Size = Vector3.new(1,5,1)
&#9;bar.CFrame = ct[a] * CFrame.new(0,0,-b)
&#9;bar.Parent = workspace
&#9;end
&#9;end
end


Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character.Torso:IsA(&quot;BasePart&quot;)  then
&#9;&#9;local JailBasePart = Instance.new(&quot;Part&quot;)
&#9;&#9;JailBasePart.Name = &quot;Jailpart&quot;
&#9;&#9;JailBasePart.Size = Vector3.new(1, 15, 1)
&#9;&#9;JailBasePart.Anchored = true
&#9;&#9;JailBasePart.TopSurface = &quot;Smooth&quot;
&#9;&#9;JailBasePart.BottomSurface = &quot;Smooth&quot;
&#9;&#9;JailBasePart.Locked = true
&#9;&#9;JailBasePart.Material = &quot;CorrodedMetal&quot;
&#9;&#9;JailBasePart.BrickColor = BrickColor.new(&quot;Really black&quot;)

&#9;&#9;local Mesh = Instance.new(&quot;CylinderMesh&quot;, JailBasePart)

&#9;&#9;local JailModel = Instance.new(&quot;Model&quot;)
&#9;&#9;JailModel.Name = &quot;QuentyAdmin:JailModel&quot;

&#9;&#9;local function CreateJailBar(NewCFrame)
&#9;&#9;&#9;local Bar = JailBasePart:Clone()
&#9;&#9;&#9;Bar.CFrame = NewCFrame
&#9;&#9;&#9;Bar.Parent = JailModel
&#9;&#9;&#9;return Bar;
&#9;&#9;end

&#9;&#9;local BasePosition = CFrame.new(Player.Character.Torso.Position)
&#9;&#9;for i=-5, 5, 2 do
&#9;&#9;&#9;CreateJailBar(BasePosition * CFrame.new(i, 0, -5))
&#9;&#9;&#9;CreateJailBar(BasePosition * CFrame.new(i, 0, 5))
&#9;&#9;&#9;CreateJailBar(BasePosition * CFrame.new(-5, 0, i))
&#9;&#9;&#9;CreateJailBar(BasePosition * CFrame.new(5, 0, i))
&#9;&#9;end
&#9;&#9;local Top = CreateJailBar(BasePosition * CFrame.new(0, 7, 0))
&#9;&#9;Top.Size = Vector3.new(11, 1, 11)
&#9;&#9;Top.CFrame = BasePosition * CFrame.new(0, 7, 0)
&#9;&#9;if Top:FindFirstChild(&quot;Mesh&quot;) then
&#9;&#9;&#9;Top.Mesh:Destroy()
&#9;&#9;end
&#9;&#9;local Bottom = CreateJailBar(BasePosition * CFrame.new(0, -7, 0))
&#9;&#9;Bottom.Size = Vector3.new(11, 1, 11)
&#9;&#9;Bottom.CFrame = BasePosition * CFrame.new(0, -7, 0)
&#9;&#9;if Bottom:FindFirstChild(&quot;Mesh&quot;) then
&#9;&#9;&#9;Bottom.Mesh:Destroy()
&#9;&#9;end
&#9;&#9;
&#9;&#9;local function CreateSide(NewCFrame)
&#9;&#9;&#9;local Side1 = CreateJailBar(BasePosition * NewCFrame)
&#9;&#9;&#9;if Side1:FindFirstChild(&quot;Mesh&quot;) then
&#9;&#9;&#9;&#9;Side1.Mesh:Destroy()
&#9;&#9;&#9;end
&#9;&#9;&#9;Side1.Size = Vector3.new(1, 15, 10)
&#9;&#9;&#9;Side1.Transparency = 1
&#9;&#9;end

&#9;&#9;CreateSide(CFrame.new(5, 0, 0))
&#9;&#9;CreateSide(CFrame.new(-5, 0, 0))
&#9;&#9;CreateSide(CFrame.new(0, 0, 5) * CFrame.Angles(0, math.rad(90), 0))
&#9;&#9;CreateSide(CFrame.new(0, 0, -5) * CFrame.Angles(0, math.rad(90), 0))
&#9;&#9;JailModel.Parent = Player.Character
&#9;end
--[[
&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character.Torso:IsA(&quot;BasePart&quot;)  then
&#9;&#9;Jailify(Player.Character.Torso.CFrame)
&#9;end--]]
end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX241">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX242">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4278190080</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Ungodify</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>225</XO>
									<YS>0</YS>
									<YO>205</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Ungodify</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX243">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:DetagPlayerOfChoice(script.Parent, &quot;God&quot;)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX244">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX245">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967040</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Unfreeze</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>225</XO>
									<YS>0</YS>
									<YO>45</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Unfreeze</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX246">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Unfreeze.lua</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Humanoid&quot;):IsA(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;):IsA(&quot;BasePart&quot;) then
&#9;&#9;for i,v in pairs(Player.Character:GetChildren()) do
&#9;&#9;&#9;if v:IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;v.Reflectance = 0
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;Player.Character.Torso.Anchored = false
&#9;&#9;Player.Character.Humanoid.WalkSpeed = 16
&#9;end
end)

--[[
wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;if player then
&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Humanoid&quot;):IsA(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;):IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;for i,v in pairs(Player.Character:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if v:IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;v.Reflectance = 0
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;Player.Character.Torso.Anchored = false
&#9;&#9;&#9;&#9;&#9;&#9;Player.Character.Humanoid.WalkSpeed = 16
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)--]]</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX247">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX248">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294901760</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Punish</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>225</XO>
									<YS>0</YS>
									<YO>85</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Punish</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX249">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player.Character then
&#9;&#9;Player.Character.Parent = game:GetService(&quot;Lighting&quot;)
&#9;end
end)

--[[
wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;print(&quot;Player choice selected(&quot;..#player..&quot;)&quot;)
&#9;&#9;if player then
&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Humanoid&quot;):IsA(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;):IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;Player.Character.Parent = game:GetService(&quot;Lighting&quot;)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;--print(&quot;Done&quot;)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)--]]

</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX250">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX251">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4284914175</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">GiveFFButton</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>225</XO>
									<YS>0</YS>
									<YO>5</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Give FF</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX252">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">GiveFF.lua</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player.Character then
&#9;&#9;Instance.new(&quot;ForceField&quot;, Player.Character)
&#9;end
end)


--[[wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;if player then
&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;if Player.Character then
&#9;&#9;&#9;&#9;&#9;&#9;Instance.new(&quot;ForceField&quot;, Player.Character)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)--]]</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX253">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX254">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4278255615</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Damage</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>225</XO>
									<YS>0</YS>
									<YO>165</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Damage</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX255">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacterWithNumInput(script.Parent, function(Player, Input) 
&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character.Humanoid:IsA(&quot;Humanoid&quot;) then
&#9;&#9;Player.Character.Humanoid.Health = Player.Character.Humanoid.Health - Input
&#9;end
end)

--Gui:SetupPlayerHumanoidModification(script.Parent, &quot;Health&quot;)


--[[
wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GetUserInput(function(input, connection2)
&#9;&#9;if input then
&#9;&#9;&#9;Gui:GenerateListOfPlayers()
&#9;&#9;&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;&#9;&#9;if player then
&#9;&#9;&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Humanoid&quot;):IsA(&quot;Humanoid&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Player.Character.Humanoid.Health = Player.Character.Humanoid.Health - input
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;connection:disconnect()
&#9;&#9;&#9;end)
&#9;&#9;else
&#9;&#9;&#9;Gui:ShowApplicationFrame()
&#9;&#9;end
&#9;&#9;connection2:disconnect()
&#9;end)
end)--]]</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX256">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX257">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294940928</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Visible</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>335</XO>
									<YS>0</YS>
									<YO>125</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Visible</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX258">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Humanoid&quot;):IsA(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;):IsA(&quot;BasePart&quot;) then
&#9;&#9;for i,v in pairs(Player.Character:GetChildren()) do
&#9;&#9;&#9;if v:IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;v.Transparency = 0
&#9;&#9;&#9;elseif v:IsA(&quot;Hat&quot;) then
&#9;&#9;&#9;&#9;if v:FindFirstChild(&quot;Handle&quot;) then
&#9;&#9;&#9;&#9;&#9;v:FindFirstChild(&quot;Handle&quot;).Transparency = 0
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;else
&#9;&#9;print(&quot;Invalid&quot;)
&#9;end
end)

--[[
wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;print(&quot;Player choice selected(&quot;..#player..&quot;)&quot;)
&#9;&#9;if player then
&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Humanoid&quot;):IsA(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;):IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;for i,v in pairs(Player.Character:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if v:IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;v.Transparency = 0
&#9;&#9;&#9;&#9;&#9;&#9;&#9;elseif v:IsA(&quot;Hat&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if v:FindFirstChild(&quot;Handle&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;v:FindFirstChild(&quot;Handle&quot;).Transparency = 0
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Invalid&quot;)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;print(&quot;Done&quot;)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)--]]

</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX259">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX260">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294940928</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">ShowName</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>115</XO>
									<YS>0</YS>
									<YO>125</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Show Name</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX261">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:SetupPlayerHumanoidModification(script.Parent, &quot;NameOcclusion&quot;, &quot;NoOcclusion&quot;)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX262">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX263">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4284914175</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">RemoveFF</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>335</XO>
									<YS>0</YS>
									<YO>5</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Remove FF</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="Frame" referent="RBX264">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
							<Item class="LocalScript" referent="RBX265">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">RemoveFF.lua</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player.Character then
&#9;&#9;for _, Item in pairs(Player.Character:GetChildren()) do
&#9;&#9;&#9;if Item:IsA(&quot;ForceField&quot;) then
&#9;&#9;&#9;&#9;Item:Destroy()
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end)

--[[
wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;if player then
&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;if Player.Character then
&#9;&#9;&#9;&#9;&#9;&#9;for _, Item in pairs(Player.Character:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if Item:IsA(&quot;ForceField&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Item:Destroy()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)--]]</ProtectedString>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX266">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4278255615</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Jump</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>115</XO>
									<YS>0</YS>
									<YO>165</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Jump</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX267">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:SetupPlayerHumanoidModification(script.Parent, &quot;Jump&quot;, true)

--[[
wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;if player then
&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Humanoid&quot;):IsA(&quot;Humanoid&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;Player.Character:FindFirstChild(&quot;Humanoid&quot;).Jump = true
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)--]]</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX268">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX269">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294940928</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">HideName</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>125</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Hide Name</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX270">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:SetupPlayerHumanoidModification(script.Parent, &quot;NameOcclusion&quot;, &quot;OccludeAll&quot;)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX271">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX272">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967040</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Freeze</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>335</XO>
									<YS>0</YS>
									<YO>45</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Freeze</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX273">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Humanoid&quot;):IsA(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;):IsA(&quot;BasePart&quot;) then
&#9;&#9;for i,v in pairs(Player.Character:GetChildren()) do
&#9;&#9;&#9;if v:IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;v.Reflectance = 1
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;Player.Character.Torso.Anchored = true
&#9;&#9;Player.Character.Humanoid.WalkSpeed = 0
&#9;&#9;print(&quot;Froze&quot;)
&#9;else
&#9;&#9;print(&quot;Invalid&quot;)
&#9;end
end)


--[[
wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;print(&quot;Player choice selected(&quot;..#player..&quot;)&quot;)
&#9;&#9;if player then
&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Humanoid&quot;):IsA(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;):IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;for i,v in pairs(Player.Character:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if v:IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;v.Reflectance = 1
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;Player.Character.Torso.Anchored = true
&#9;&#9;&#9;&#9;&#9;&#9;Player.Character.Humanoid.WalkSpeed = 0
&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Froze&quot;)
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Invalid&quot;)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;print(&quot;Done&quot;)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)--]]

</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX274">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX275">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4284914175</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Explode</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>115</XO>
									<YS>0</YS>
									<YO>5</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Explode</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX276">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Humanoid&quot;):IsA(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;):IsA(&quot;BasePart&quot;) then
&#9;&#9;local Exp = Instance.new(&quot;Explosion&quot;, Workspace)
&#9;&#9;Exp.Position = Player.Character.Torso.Position
&#9;&#9;Player.Character.Humanoid.Health = 0
&#9;end
end)


--[[
wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;print(&quot;Player choice selected(&quot;..#player..&quot;)&quot;)
&#9;&#9;if player then
&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Humanoid&quot;):IsA(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;):IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;local Exp = Instance.new(&quot;Explosion&quot;, Workspace)
&#9;&#9;&#9;&#9;&#9;&#9;Exp.Position = Player.Character.Torso.Position
&#9;&#9;&#9;&#9;&#9;&#9;Player.Character.Humanoid.Health = 0
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Invalid&quot;)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;--print(&quot;Done&quot;)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)

--]]</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX277">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX278">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4284874956</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Gravity</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>335</XO>
									<YS>0</YS>
									<YO>445</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Gravity</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX279">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacterWithNumInput(script.Parent, function(Player, Input) 
&#9;if Player and Player.Character and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character.Torso:IsA(&quot;BasePart&quot;) then
&#9;&#9;if Input == 0 then
&#9;&#9;&#9;Gui:RemoveGravity(Player)
&#9;&#9;else
&#9;&#9;&#9;Gui:ChangeGravity(Player, Input/10)
&#9;&#9;end
&#9;end
end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX280">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX281">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294901760</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Walkspeed</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>85</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Walkspeed</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX282">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">SetWalkspeed</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:SetupPlayerHumanoidModification(script.Parent, &quot;WalkSpeed&quot;)


--[==[
wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;--print(&quot;Click&quot;)
&#9;Gui:GetUserInput(function(input, connection2)
&#9;&#9;--print(&quot;Got input&quot;)
&#9;&#9;Gui:GenerateListOfPlayers()
&#9;&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;&#9;--print(&quot;Got player&quot;)
&#9;&#9;&#9;if player then
&#9;&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Humanoid&quot;):IsA(&quot;Humanoid&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Player.Character.Humanoid.WalkSpeed = input
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;&#9;end
&#9;&#9;&#9;--print(&quot;Done with getting player&quot;)
&#9;&#9;&#9;Gui:ShowApplicationFrame()
&#9;&#9;&#9;--print(&quot;Disconnecting connection (For player)&quot;)
&#9;&#9;&#9;connection:disconnect()
&#9;&#9;&#9;--print(&quot;Disconnecting connection&quot;)
&#9;&#9;&#9;connection2:disconnect();
&#9;&#9;&#9;--print(&quot;Disconnection complete&quot;)
&#9;&#9;end)
&#9;end)
&#9;print(&quot;Done&quot;)
end)


--[[wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;Gui:GetUserTextInput(function(input)
&#9;&#9;&#9;print(&quot;Got user text input!&quot;)
&#9;&#9;&#9;if input and player then--and player.Character then
&#9;&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local m = Instance.new(&quot;Message&quot;, Player.PlayerGui)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;m.Text = input
&#9;&#9;&#9;&#9;&#9;&#9;&#9;wait(2)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;m:Destroy()
&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;&#9;end
&#9;&#9;&#9;connection:disconnect()
&#9;&#9;end)
&#9;end)
end)--]]


--[[wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GetUserInput(function(input)
&#9;&#9;print(&quot;Got input&quot;)
&#9;&#9;Gui:GenerateListOfPlayers()
&#9;&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;&#9;print(&quot;Got player&quot;)
&#9;&#9;&#9;if player then
&#9;&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Humanoid&quot;):IsA(&quot;Humanoid&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Player.Character.Humanoid.WalkSpeed = input
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;&#9;end
&#9;&#9;&#9;Gui:ShowApplicationFrame()
&#9;&#9;&#9;connection:disconnect()
&#9;&#9;end)
&#9;end)
end)--]]
--]==]
</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX283">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX284">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4278255615</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Sit</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>165</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Sit</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX285">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:SetupPlayerHumanoidModification(script.Parent, &quot;Sit&quot;, true)




--[[wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;if player then
&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Humanoid&quot;):IsA(&quot;Humanoid&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;Player.Character:FindFirstChild(&quot;Humanoid&quot;).Sit = true
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)--]]</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX286">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX287">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4284874956</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">GravityNorm</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>115</XO>
									<YS>0</YS>
									<YO>445</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Normalize Gravity</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX288">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacter(script.Parent, function(Player, Input) 
&#9;if Player and Player.Character and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character.Torso:IsA(&quot;BasePart&quot;) then
&#9;&#9;Gui:RemoveGravity(Player)
&#9;end
end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX289">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX290">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4278190080</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Limbless</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>205</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Limbless</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX291">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player.Character then
&#9;&#9;for _, Item in pairs(Player.Character:GetChildren()) do
&#9;&#9;&#9;if Item and Item:IsA(&quot;BasePart&quot;) and Item.Name ~= &quot;Head&quot; and Item.Name ~= &quot;Torso&quot; then
&#9;&#9;&#9;&#9;Item:Destroy();
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX292">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX293">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967040</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Kill</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>45</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Kill</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX294">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Kill.lua</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:SetupPlayerHumanoidModification(script.Parent, &quot;Health&quot;, 0)


--[[
script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;if player then
&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;if Player.Character then
&#9;&#9;&#9;&#9;&#9;&#9;Player.Character:BreakJoints()
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)--]]</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX295">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX296">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294940979</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Invisible</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>225</XO>
									<YS>0</YS>
									<YO>125</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Invisible</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX297">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Humanoid&quot;):IsA(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;):IsA(&quot;BasePart&quot;) then
&#9;&#9;for i,v in pairs(Player.Character:GetChildren()) do
&#9;&#9;&#9;if v:IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;v.Transparency = 1
&#9;&#9;&#9;&#9;if v:FindFirstChild(&quot;roblox&quot;) then
&#9;&#9;&#9;&#9;&#9;v.roblox:Destroy();
&#9;&#9;&#9;&#9;elseif v:FindFirstChild(&quot;face&quot;) then
&#9;&#9;&#9;&#9;&#9;v.face:Destroy()
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif v:IsA(&quot;Hat&quot;) then
&#9;&#9;&#9;&#9;if v:FindFirstChild(&quot;Handle&quot;) then
&#9;&#9;&#9;&#9;&#9;v:FindFirstChild(&quot;Handle&quot;).Transparency = 1
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;else
&#9;&#9;print(&quot;Invalid&quot;)
&#9;end
end)


--[[
wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:GenerateListOfPlayers()
&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;print(&quot;Player choice selected(&quot;..#player..&quot;)&quot;)
&#9;&#9;if player then
&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Humanoid&quot;):IsA(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;):IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;for i,v in pairs(Player.Character:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if v:IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;v.Transparency = 1
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if v:FindFirstChild(&quot;roblox&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;v.roblox:Destroy();
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;elseif v:FindFirstChild(&quot;face&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;v.face:Destroy()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;elseif v:IsA(&quot;Hat&quot;)  then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if v:FindFirstChild(&quot;Handle&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;v:FindFirstChild(&quot;Handle&quot;).Transparency = 1
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Invalid&quot;)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;print(&quot;Done&quot;)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;end
&#9;&#9;connection:disconnect()
&#9;end)
end)--]]

</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX298">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX299">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4278255615</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Heal</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>335</XO>
									<YS>0</YS>
									<YO>165</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Heal</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX300">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character.Humanoid:IsA(&quot;Humanoid&quot;) then
&#9;&#9;Player.Character.Humanoid.Health = Player.Character.Humanoid.MaxHealth
&#9;&#9;Player.Character:MakeJoints()
&#9;end
end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX301">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX302">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4289901234</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Flip</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>245</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Flip</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX303">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui


Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character.Torso:IsA(&quot;BasePart&quot;)  then
&#9;&#9;local Torso = Player.Character.Torso
&#9;&#9;Torso.CFrame = CFrame.new(Torso.Position.x,Torso.Position.y,Torso.Position.z,0, 0, 1, 0, -1, 0, 1, 0, 0)
&#9;end
end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX304">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX305">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4278229248</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Cape</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>285</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Cape</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX306">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:TagPlayerOfChoice(script.Parent, &quot;Cape&quot;)
</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX307">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX308">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4278229248</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Grass</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>115</XO>
									<YS>0</YS>
									<YO>285</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Grass</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX309">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:SetPlayerCharacterMaterial(script.Parent, &quot;Grass&quot;)
</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX310">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX311">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4278229248</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Stone</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>225</XO>
									<YS>0</YS>
									<YO>285</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Stone</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX312">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:SetPlayerCharacterMaterial(script.Parent, &quot;Slate&quot;)
</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX313">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX314">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4278229248</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Blind</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>335</XO>
									<YS>0</YS>
									<YO>285</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Blind</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX315">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:TagPlayerOfChoice(script.Parent, &quot;Blind&quot;)
</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX316">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX317">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294901862</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">UnBlind</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>335</XO>
									<YS>0</YS>
									<YO>325</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Unblind</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX318">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:DetagPlayerOfChoice(script.Parent, &quot;Blind&quot;)
</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX319">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX320">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294901862</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Noob</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>225</XO>
									<YS>0</YS>
									<YO>325</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Noob</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX321">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:TagPlayerOfChoice(script.Parent, &quot;Noobify&quot;)
</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX322">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX323">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294901862</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Zombie</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>115</XO>
									<YS>0</YS>
									<YO>325</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Zombie</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX324">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:TagPlayerOfChoice(script.Parent, &quot;Zombie&quot;)
</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX325">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX326">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4284874956</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">DeBox</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>445</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Debox</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX327">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player and Player.Character and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character.Torso:IsA(&quot;BasePart&quot;) and Player.Character:FindFirstChild(&quot;QuentyAdminBoxModel&quot;) then
&#9;&#9;Gui:RecoverTools(Player)
&#9;&#9;Gui:RecoverHats(Player)
&#9;&#9;Gui:RemoveGravity(Player)
&#9;&#9;Player.Character.QuentyAdminBoxModel:Destroy()
&#9;end
end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX328">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX329">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4284874956</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Burn</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>335</XO>
									<YS>0</YS>
									<YO>365</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Burn</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX330">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

local function RagdollChar(Character)
Torso = Character:FindFirstChild(&quot;Torso&quot;)
if Character then
&#9;if Torso then
&#9;&#9;Humanoid = Character:findFirstChild(&quot;Humanoid&quot;)
&#9;&#9;Zombie = Character:findFirstChild(&quot;Zombie&quot;)
&#9;&#9;if Humanoid ~= nil then
&#9;&#9;Humanoid.PlatformStand = true
&#9;&#9;end

&#9;&#9;if Zombie ~= nil then
&#9;&#9;Zombie.PlatformStand = true
&#9;&#9;end

&#9;&#9;local Head = Character:FindFirstChild(&quot;Head&quot;)
&#9;&#9;if Head then
&#9;&#9;&#9;local Neck = Instance.new(&quot;Weld&quot;)
&#9;&#9;&#9;Neck.Name = &quot;Neck&quot;
&#9;&#9;&#9;Neck.Part0 = Torso
&#9;&#9;&#9;Neck.Part1 = Head
&#9;&#9;&#9;Neck.C0 = CFrame.new(0, 1.5, 0)
&#9;&#9;&#9;Neck.C1 = CFrame.new()
&#9;&#9;&#9;Neck.Parent = Torso
&#9;&#9;end
&#9;&#9;local Limb = Character:FindFirstChild(&quot;Right Arm&quot;)
&#9;&#9;if Limb then

&#9;&#9;&#9;Limb.CFrame = Torso.CFrame * CFrame.new(1.5, 0, 0)
&#9;&#9;&#9;local Joint = Instance.new(&quot;Glue&quot;)
&#9;&#9;&#9;Joint.Name = &quot;RightShoulder&quot;
&#9;&#9;&#9;Joint.Part0 = Torso
&#9;&#9;&#9;Joint.Part1 = Limb
&#9;&#9;&#9;Joint.C0 = CFrame.new(1.5, 0.5, 0, 0, 0, 1, 0, 1, 0, -1, -0, -0)
&#9;&#9;&#9;Joint.C1 = CFrame.new(-0, 0.5, 0, 0, 0, 1, 0, 1, 0, -1, -0, -0)
&#9;&#9;&#9;Joint.Parent = Torso

&#9;&#9;&#9;local B = Instance.new(&quot;Part&quot;)
&#9;&#9;&#9;B.TopSurface = 0
&#9;&#9;&#9;B.BottomSurface = 0
&#9;&#9;&#9;B.formFactor = &quot;Symmetric&quot;
&#9;&#9;&#9;B.Size = Vector3.new(1, 1, 1)
&#9;&#9;&#9;B.Transparency = 1
&#9;&#9;&#9;B.CFrame = Limb.CFrame * CFrame.new(0, -0.5, 0)
&#9;&#9;&#9;B.Parent = Character
&#9;&#9;&#9;local W = Instance.new(&quot;Weld&quot;)
&#9;&#9;&#9;W.Part0 = Limb
&#9;&#9;&#9;W.Part1 = B
&#9;&#9;&#9;W.C0 = CFrame.new(0, -0.5, 0)
&#9;&#9;&#9;W.Parent = Limb

&#9;&#9;end
&#9;&#9;local Limb = Character:FindFirstChild(&quot;Left Arm&quot;)
&#9;&#9;if Limb then

&#9;&#9;&#9;Limb.CFrame = Torso.CFrame * CFrame.new(-1.5, 0, 0)
&#9;&#9;&#9;local Joint = Instance.new(&quot;Glue&quot;)
&#9;&#9;&#9;Joint.Name = &quot;LeftShoulder&quot;
&#9;&#9;&#9;Joint.Part0 = Torso
&#9;&#9;&#9;Joint.Part1 = Limb
&#9;&#9;&#9;Joint.C0 = CFrame.new(-1.5, 0.5, 0, -0, -0, -1, 0, 1, 0, 1, 0, 0)
&#9;&#9;&#9;Joint.C1 = CFrame.new(0, 0.5, 0, -0, -0, -1, 0, 1, 0, 1, 0, 0)
&#9;&#9;&#9;Joint.Parent = Torso

&#9;&#9;&#9;local B = Instance.new(&quot;Part&quot;)
&#9;&#9;&#9;B.TopSurface = 0
&#9;&#9;&#9;B.BottomSurface = 0
&#9;&#9;&#9;B.formFactor = &quot;Symmetric&quot;
&#9;&#9;&#9;B.Size = Vector3.new(1, 1, 1)
&#9;&#9;&#9;B.Transparency = 1
&#9;&#9;&#9;B.CFrame = Limb.CFrame * CFrame.new(0, -0.5, 0)
&#9;&#9;&#9;B.Parent = Character
&#9;&#9;&#9;local W = Instance.new(&quot;Weld&quot;)
&#9;&#9;&#9;W.Part0 = Limb
&#9;&#9;&#9;W.Part1 = B
&#9;&#9;&#9;W.C0 = CFrame.new(0, -0.5, 0)
&#9;&#9;&#9;W.Parent = Limb

&#9;&#9;end
&#9;&#9;local Limb = Character:FindFirstChild(&quot;Right Leg&quot;)
&#9;&#9;if Limb then

&#9;&#9;&#9;Limb.CFrame = Torso.CFrame * CFrame.new(0.5, -2, 0)
&#9;&#9;&#9;local Joint = Instance.new(&quot;Glue&quot;)
&#9;&#9;&#9;Joint.Name = &quot;RightHip&quot;
&#9;&#9;&#9;Joint.Part0 = Torso
&#9;&#9;&#9;Joint.Part1 = Limb
&#9;&#9;&#9;Joint.C0 = CFrame.new(0.5, -1, 0, 0, 0, 1, 0, 1, 0, -1, -0, -0)
&#9;&#9;&#9;Joint.C1 = CFrame.new(0, 1, 0, 0, 0, 1, 0, 1, 0, -1, -0, -0)
&#9;&#9;&#9;Joint.Parent = Torso

&#9;&#9;&#9;local B = Instance.new(&quot;Part&quot;)
&#9;&#9;&#9;B.TopSurface = 0
&#9;&#9;&#9;B.BottomSurface = 0
&#9;&#9;&#9;B.formFactor = &quot;Symmetric&quot;
&#9;&#9;&#9;B.Size = Vector3.new(1, 1, 1)
&#9;&#9;&#9;B.Transparency = 1
&#9;&#9;&#9;B.CFrame = Limb.CFrame * CFrame.new(0, -0.5, 0)
&#9;&#9;&#9;B.Parent = Character
&#9;&#9;&#9;local W = Instance.new(&quot;Weld&quot;)
&#9;&#9;&#9;W.Part0 = Limb
&#9;&#9;&#9;W.Part1 = B
&#9;&#9;&#9;W.C0 = CFrame.new(0, -0.5, 0)
&#9;&#9;&#9;W.Parent = Limb

&#9;&#9;end
&#9;&#9;local Limb = Character:FindFirstChild(&quot;Left Leg&quot;)
&#9;&#9;if Limb then

&#9;&#9;&#9;Limb.CFrame = Torso.CFrame * CFrame.new(-0.5, -2, 0)
&#9;&#9;&#9;local Joint = Instance.new(&quot;Glue&quot;)
&#9;&#9;&#9;Joint.Name = &quot;LeftHip&quot;
&#9;&#9;&#9;Joint.Part0 = Torso
&#9;&#9;&#9;Joint.Part1 = Limb
&#9;&#9;&#9;Joint.C0 = CFrame.new(-0.5, -1, 0, -0, -0, -1, 0, 1, 0, 1, 0, 0)
&#9;&#9;&#9;Joint.C1 = CFrame.new(-0, 1, 0, -0, -0, -1, 0, 1, 0, 1, 0, 0)
&#9;&#9;&#9;Joint.Parent = Torso

&#9;&#9;&#9;local B = Instance.new(&quot;Part&quot;)
&#9;&#9;&#9;B.TopSurface = 0
&#9;&#9;&#9;B.BottomSurface = 0
&#9;&#9;&#9;B.formFactor = &quot;Symmetric&quot;
&#9;&#9;&#9;B.Size = Vector3.new(1, 1, 1)
&#9;&#9;&#9;B.Transparency = 1
&#9;&#9;&#9;B.CFrame = Limb.CFrame * CFrame.new(0, -0.5, 0)
&#9;&#9;&#9;B.Parent = Character
&#9;&#9;&#9;local W = Instance.new(&quot;Weld&quot;)
&#9;&#9;&#9;W.Part0 = Limb
&#9;&#9;&#9;W.Part1 = B
&#9;&#9;&#9;W.C0 = CFrame.new(0, -0.5, 0)
&#9;&#9;&#9;W.Parent = Limb

&#9;&#9;end
&#9;&#9;--[
&#9;&#9;local Bar = Instance.new(&quot;Part&quot;)
&#9;&#9;Bar.TopSurface = 0
&#9;&#9;Bar.BottomSurface = 0
&#9;&#9;Bar.formFactor = &quot;Symmetric&quot;
&#9;&#9;Bar.Size = Vector3.new(1, 1, 1)
&#9;&#9;Bar.Transparency = 1
&#9;&#9;Bar.CFrame = Torso.CFrame * CFrame.new(0, 0.5, 0)
&#9;&#9;Bar.Parent = Character
&#9;&#9;local Weld = Instance.new(&quot;Weld&quot;)
&#9;&#9;Weld.Part0 = Torso
&#9;&#9;Weld.Part1 = Bar
&#9;&#9;Weld.C0 = CFrame.new(0, 0.5, 0)
&#9;&#9;Weld.Parent = Torso
&#9;&#9;--]]
&#9;end
end
end

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Humanoid&quot;):IsA(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;):IsA(&quot;BasePart&quot;) then
&#9;&#9;local Fire = Instance.new(&quot;Fire&quot;, Player.Character.Torso)
&#9;&#9;Fire.Size = 10
&#9;&#9;Fire.Heat = 25
&#9;&#9;if Player.Character:FindFirstChild(&quot;Health&quot;) and Player.Character.Health:IsA(&quot;Script&quot;) then
&#9;&#9;&#9;Player.Character.Health:Destroy() -- Stop regening health  
&#9;&#9;end
&#9;&#9;if Player.Character:FindFirstChild(&quot;Head&quot;) and Player.Character.Head:FindFirstChild(&quot;face&quot;) and Player.Character.Head.face:IsA(&quot;Decal&quot;) then
&#9;&#9;&#9;Player.Character.Head.face.Texture = &quot;http://www.roblox.com/asset/?id=83906109&quot; -- D:
&#9;&#9;end
&#9;&#9;delay(1.5, function()
&#9;&#9;&#9;if Player and Player.Character and Player.Character:FindFirstChild(&quot;Head&quot;) and Player.Character.Head:FindFirstChild(&quot;face&quot;) and Player.Character.Head.face:IsA(&quot;Decal&quot;) then
&#9;&#9;&#9;&#9;Player.Character.Head.face.Texture = &quot;http://www.roblox.com/asset/?id=22823614&quot; -- Even scared + face. :D
&#9;&#9;&#9;end
&#9;&#9;end) 
&#9;&#9;delay(3, function()
&#9;&#9;&#9;if Player and Player.Character and Player.Character:FindFirstChild(&quot;Head&quot;) and Player.Character.Head:FindFirstChild(&quot;face&quot;) and Player.Character.Head.face:IsA(&quot;Decal&quot;) then
&#9;&#9;&#9;&#9;Player.Character.Head.face.Texture = &quot;http://www.roblox.com/asset/?id=24669458&quot; -- Even scareder
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;&#9;--[[delay(5, function()
&#9;&#9;&#9;if Player and Player.Character then
&#9;&#9;&#9;&#9;RagdollChar(Player.Character)
&#9;&#9;&#9;end
&#9;&#9;end)--]]
&#9;&#9;local MoveToPart = Instance.new(&quot;Part&quot;,Workspace)
&#9;&#9;&#9;repeat 
&#9;&#9;&#9;if Player and Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) then
&#9;&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;&#9;Player.Character.Humanoid:TakeDamage(2)
&#9;&#9;&#9;&#9;&#9;Player.Character.Humanoid.Jump = true
&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;end
&#9;&#9;&#9;wait(0.2)
&#9;&#9;&#9;until not (Player and Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character.Humanoid:IsA(&quot;Humanoid&quot;)) and Player.Character.Humanoid.Health &lt; 0 

&#9;&#9;&#9;if Player and Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) then
&#9;&#9;&#9;&#9;Player.Character.Humanoid.Health = 0
&#9;&#9;&#9;end
&#9;&#9;&#9;if MoveToPart then
&#9;&#9;&#9;&#9;MoveToPart:Destroy()
&#9;&#9;&#9;end
&#9;end
end)
</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX331">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX332">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4284874956</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">FreeFall</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>225</XO>
									<YS>0</YS>
									<YO>365</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Free Fall</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX333">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacterWithNumInput(script.Parent, function(Player, Input) 
&#9;if Player and Player.Character and Player.Character:IsA(&quot;Model&quot;) then
&#9;&#9;Player.Character:TranslateBy(Vector3.new(0, Input, 0))
&#9;end
end)
</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX334">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX335">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4284874956</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">BurstExplode</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>115</XO>
									<YS>0</YS>
									<YO>365</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Burst Explode</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX336">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player and Player.Character and Player.Character:IsA(&quot;Model&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character.Torso:IsA(&quot;BasePart&quot;) then
&#9;&#9;if Player.Character:FindFirstChild(&quot;Head&quot;) and Player.Character.Head:FindFirstChild(&quot;face&quot;) and Player.Character.Head.face:IsA(&quot;Decal&quot;) then
&#9;&#9;&#9;Player.Character.Head.face.Texture = &quot;http://www.roblox.com/asset/?id=83906109&quot; -- D:
&#9;&#9;end
&#9;&#9;delay(1, function()
&#9;&#9;&#9;if Player and Player.Character and Player.Character:FindFirstChild(&quot;Head&quot;) and Player.Character.Head:FindFirstChild(&quot;face&quot;) and Player.Character.Head.face:IsA(&quot;Decal&quot;) then
&#9;&#9;&#9;&#9;Player.Character.Head.face.Texture = &quot;http://www.roblox.com/asset/?id=22823614&quot; -- Even scared + face. :D
&#9;&#9;&#9;end
&#9;&#9;end) 
&#9;&#9;delay(2, function()
&#9;&#9;&#9;if Player and Player.Character and Player.Character:FindFirstChild(&quot;Head&quot;) and Player.Character.Head:FindFirstChild(&quot;face&quot;) and Player.Character.Head.face:IsA(&quot;Decal&quot;) then
&#9;&#9;&#9;&#9;Player.Character.Head.face.Texture = &quot;http://www.roblox.com/asset/?id=24669458&quot; -- Even scareder
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;&#9;for i=75, 0, -5 do
&#9;&#9;&#9;for Degrees=0, 360, 30 do
&#9;&#9;&#9;&#9;local CordX = math.sin(math.rad(Degrees)) * i
&#9;&#9;&#9;&#9;local CordY = math.cos(math.rad(Degrees)) * i
&#9;&#9;&#9;&#9;local Exp = Instance.new(&quot;Explosion&quot;, Workspace)
&#9;&#9;&#9;&#9;Exp.Position = Player.Character.Torso.Position + Vector3.new(CordX, 0, CordY)
&#9;&#9;&#9;end
&#9;&#9;&#9;wait(0.2)
&#9;&#9;end
&#9;&#9;Player.Character.Humanoid.Health = 0
&#9;end
end)
</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX337">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX338">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4284874956</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Sparkles</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>365</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Sparkles</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX339">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:WhileColorOrChangeWithPlayer(script.Parent, function(Input, Player)  
&#9;if Player and Player.Character and Player.Character:FindFirstChild(&quot;Torso&quot;) then
&#9;&#9;local Sparkles = Player.Character.Torso:FindFirstChild(&quot;QuentyGUIAdminSparkles&quot;)
&#9;&#9;if not Sparkles then
&#9;&#9;&#9;Sparkles = Instance.new(&quot;Sparkles&quot;, Player.Character.Torso)
&#9;&#9;&#9;Sparkles.Name = &quot;QuentyGUIAdminSparkles&quot;
&#9;&#9;end
&#9;&#9;if Sparkles:IsA(&quot;Sparkles&quot;) then
&#9;&#9;&#9;Sparkles.SparkleColor = Input
&#9;&#9;end
&#9;end
end, function() 
&#9;return Color3.new()
end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX340">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX341">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Fire</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>405</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Fire</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX342">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:WhileColorOrChangeWithPlayer(script.Parent, function(Input, Player)  
&#9;if Player and Player.Character and Player.Character:FindFirstChild(&quot;Torso&quot;) then
&#9;&#9;local Fire = Player.Character.Torso:FindFirstChild(&quot;QuentyGUIAdminFire&quot;)
&#9;&#9;if not Fire then
&#9;&#9;&#9;Fire = Instance.new(&quot;Fire&quot;, Player.Character.Torso)
&#9;&#9;&#9;Fire.Name = &quot;QuentyGUIAdminFire&quot;
&#9;&#9;end
&#9;&#9;if Fire:IsA(&quot;Fire&quot;) then
&#9;&#9;&#9;Fire.Color = Input
&#9;&#9;end
&#9;end
end, function() 
&#9;return Color3.new()
end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX343">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX344">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Smoke</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>115</XO>
									<YS>0</YS>
									<YO>405</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Smoke</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX345">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:WhileColorOrChangeWithPlayer(script.Parent, function(Input, Player)  
&#9;if Player and Player.Character and Player.Character:FindFirstChild(&quot;Torso&quot;) then
&#9;&#9;local Smoke = Player.Character.Torso:FindFirstChild(&quot;QuentyGUIAdminSmoke&quot;)
&#9;&#9;if not Smoke then
&#9;&#9;&#9;Smoke = Instance.new(&quot;Smoke&quot;, Player.Character.Torso)
&#9;&#9;&#9;Smoke.Name = &quot;QuentyGUIAdminSmoke&quot;
&#9;&#9;end
&#9;&#9;if Smoke:IsA(&quot;Smoke&quot;) then
&#9;&#9;&#9;Smoke.Color = Input
&#9;&#9;end
&#9;end
end, function() 
&#9;return Color3.new()
end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX346">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX347">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Hang</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>225</XO>
									<YS>0</YS>
									<YO>405</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Hang</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX348">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player and Player.Character and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character.Torso:IsA(&quot;BasePart&quot;) then
&#9;&#9;Player.Character.Torso.Anchored = true
&#9;&#9;Gui:RemoveTools(Player)
&#9;&#9;for i=0, 10, 0.5 do
&#9;&#9;&#9;if Player and Player.Character and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character.Torso:IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;Player.Character.Torso.CFrame = Player.Character.Torso.CFrame + Vector3.new(0,0.5,0)
&#9;&#9;&#9;&#9;wait(0.05)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX349">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX350">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">UnHang</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>335</XO>
									<YS>0</YS>
									<YO>405</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Unhang</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX351">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player and Player.Character and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character.Torso:IsA(&quot;BasePart&quot;) then
&#9;&#9;if Player.Character.Torso.Anchored then
&#9;&#9;&#9;Gui:RestoreTools(Player)
&#9;&#9;&#9;for i=0, 10, 0.5 do
&#9;&#9;&#9;&#9;if Player and Player.Character and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character.Torso:IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;&#9;Player.Character.Torso.CFrame = Player.Character.Torso.CFrame + Vector3.new(0,-0.5,0)
&#9;&#9;&#9;&#9;&#9;wait(0.05)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;Player.Character.Torso.Anchored = false
&#9;&#9;end
&#9;end
end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX352">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX353">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4278190080</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">god</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>115</XO>
									<YS>0</YS>
									<YO>205</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">godify</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX354">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:TagPlayerOfChoice(script.Parent, &quot;God&quot;)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX355">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX356">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4284874956</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">UnlockChar</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>225</XO>
									<YS>0</YS>
									<YO>445</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Unlock Char</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX357">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character.Humanoid:IsA(&quot;Humanoid&quot;) then
&#9;&#9;for _, Item in pairs(Player.Character:GetChildren()) do
&#9;&#9;&#9;if Item:IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;Item.Locked = false
&#9;&#9;&#9;elseif Item:FindFirstChild(&quot;Handle&quot;) and Item.Handle:IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;Item.Handle.Locked = false
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX358">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
					</Item>
					<Item class="TextButton" referent="RBX359">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4281545523</Color3>
							<float name="BackgroundTransparency">0.699999988</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">0</token>
							<bool name="Modal">false</bool>
							<string name="Name">Tab:Character</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>180</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>90</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<string name="Text">Character</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="Frame" referent="RBX360">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Decoration</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>0</XO>
									<YS>0.5</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
					</Item>
					<Item class="TextButton" referent="RBX361">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4278190080</Color3>
							<float name="BackgroundTransparency">0.699999988</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">0</token>
							<bool name="Modal">false</bool>
							<string name="Name">Tab:Player</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>90</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<string name="Text">Player</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="Frame" referent="RBX362">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Decoration</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>0</XO>
									<YS>0.5</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
					</Item>
					<Item class="TextButton" referent="RBX363">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4281545523</Color3>
							<float name="BackgroundTransparency">0.699999988</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">0</token>
							<bool name="Modal">false</bool>
							<string name="Name">Tab:Server</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>90</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>90</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<string name="Text">Server</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="Frame" referent="RBX364">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Decoration</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>0</XO>
									<YS>0.5</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
					</Item>
					<Item class="TextButton" referent="RBX365">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4281545523</Color3>
							<float name="BackgroundTransparency">0.699999988</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">0</token>
							<bool name="Modal">false</bool>
							<string name="Name">Tab:Character2</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>270</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>90</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<string name="Text">Character (2)</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="Frame" referent="RBX366">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Decoration</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>0</XO>
									<YS>0.5</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
					</Item>
					<Item class="Frame" referent="RBX367">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4294914816</Color3>
							<float name="BackgroundTransparency">0.699999988</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<string name="Name">EndCap</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>450</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>13</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">false</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="Frame" referent="RBX368">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Decoration</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>0</XO>
									<YS>0.5</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
					</Item>
					<Item class="TextButton" referent="RBX369">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4281545523</Color3>
							<float name="BackgroundTransparency">0.699999988</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">0</token>
							<bool name="Modal">false</bool>
							<string name="Name">Tab:Misc</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>360</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>87</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<string name="Text">Misc</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="Frame" referent="RBX370">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Decoration</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>0</XO>
									<YS>0.5</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
					</Item>
					<Item class="Frame" referent="RBX371">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4288914085</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<string name="Name">Misc</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>0</XO>
								<YS>1</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">false</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="TextButton" referent="RBX372">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294901760</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Cow</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>5</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Cow</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX373">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

local function Cow(Player)
&#9;&#9;--print(&quot;Deering player&quot;)
&#9;&#9;if Player then
&#9;&#9;Gui:RemoveTools(Player)
&#9;&#9;local Character = Player.Character
&#9;&#9;if Character and Character:FindFirstChild(&quot;Torso&quot;) then
&#9;&#9;&#9;local NewDecal = Instance.new(&quot;Decal&quot;)
&#9;&#9;&#9;NewDecal.Texture = &quot;http://www.roblox.com/asset/?id=22469571&quot;
&#9;&#9;&#9;NewDecal.Face = &quot;Back&quot;

&#9;&#9;&#9;if Character:FindFirstChild(&quot;Head&quot;) then

&#9;&#9;&#9;&#9;local NewMesh = Instance.new(&quot;SpecialMesh&quot;, Character.Head)
&#9;&#9;&#9;&#9;NewMesh.Scale = Vector3.new(1.1, 1.1, 1.1)
&#9;&#9;&#9;&#9;NewMesh.TextureId = &quot;http://www.roblox.com/asset/?id=14673164&quot;
&#9;&#9;&#9;&#9;NewMesh.MeshId = &quot;http://www.roblox.com/asset/?id=14459949&quot;
&#9;&#9;&#9;&#9;NewMesh.MeshType = &quot;FileMesh&quot;
&#9;&#9;&#9;end


&#9;&#9;&#9;local function CreateDecal(Face, Parent, Texture)
&#9;&#9;&#9;&#9;Texture = Texture or &quot;http://www.roblox.com/asset/?id=22469571&quot;
&#9;&#9;&#9;&#9;local Decal = NewDecal:Clone()
&#9;&#9;&#9;&#9;Decal.Parent = Parent
&#9;&#9;&#9;&#9;Decal.Face = Face
&#9;&#9;&#9;&#9;Decal.Archivable = false
&#9;&#9;&#9;end

&#9;&#9;&#9;local function Spot(Parent)
&#9;&#9;&#9;&#9;CreateDecal(&quot;Front&quot;, Parent)
&#9;&#9;&#9;&#9;CreateDecal(&quot;Back&quot;, Parent)
&#9;&#9;&#9;&#9;CreateDecal(&quot;Bottom&quot;, Parent)
&#9;&#9;&#9;&#9;CreateDecal(&quot;Top&quot;, Parent)
&#9;&#9;&#9;&#9;CreateDecal(&quot;Left&quot;, Parent)
&#9;&#9;&#9;&#9;CreateDecal(&quot;Right&quot;, Parent)
&#9;&#9;&#9;end

&#9;&#9;&#9;local Udder = Instance.new(&quot;Part&quot;, Character)
&#9;&#9;&#9;Udder.Name = &quot;Udder&quot;
&#9;&#9;&#9;Udder.FormFactor = &quot;Custom&quot;
&#9;&#9;&#9;Udder.Size = Vector3.new(2, 0.4, 1)
&#9;&#9;&#9;Udder.TopSurface = &quot;Smooth&quot;
&#9;&#9;&#9;Udder.BottomSurface = &quot;Smooth&quot;
&#9;&#9;&#9;Udder.BrickColor = BrickColor.new(&quot;Light reddish violet&quot;)
&#9;&#9;&#9;Udder.CanCollide = false

&#9;&#9;&#9;local UdderMesh = Instance.new(&quot;SpecialMesh&quot;, Udder)
&#9;&#9;&#9;UdderMesh.MeshType = &quot;Sphere&quot;
&#9;&#9;&#9;UdderMesh.Scale = Vector3.new(0.5, 2, 1.2)

&#9;&#9;&#9;local NewWeld = Instance.new(&quot;Weld&quot;, Udder)
&#9;&#9;&#9;NewWeld.Part0 = Character.Torso
&#9;&#9;&#9;NewWeld.Part1 = Udder
&#9;&#9;&#9;NewWeld.C1 = CFrame.new(0, 1, -1.5)



&#9;&#9;&#9;local Torso = Character.Torso
&#9;&#9;&#9;Torso.Transparency = 1

&#9;&#9;&#9;local ith = Torso:FindFirstChild(&quot;Neck&quot;)
&#9;&#9;&#9;local itlh = Torso:FindFirstChild(&quot;Left Hip&quot;)
&#9;&#9;&#9;local itrh = Torso:FindFirstChild(&quot;Right Hip&quot;)
&#9;&#9;&#9;local itls = Torso:FindFirstChild(&quot;Left Shoulder&quot;)
&#9;&#9;&#9;local itrs = Torso:FindFirstChild(&quot;Right Shoulder&quot;)
&#9;&#9;&#9;if ith then
&#9;&#9;&#9;&#9;ith.C0 = CFrame.new(0,-.5,-3)*CFrame.fromEulerAnglesXYZ(math.pi/2,math.pi,0)
&#9;&#9;&#9;end
&#9;&#9;&#9;if itlh then
&#9;&#9;&#9;&#9;itlh.C0 = CFrame.new(-1,-.5,2)
&#9;&#9;&#9;end
&#9;&#9;&#9;if itrh then
&#9;&#9;&#9;&#9;itrh.C0 = CFrame.new(1,-.5,2)
&#9;&#9;&#9;end
&#9;&#9;&#9;if itls then
&#9;&#9;&#9;&#9;itls.C0 = CFrame.new(-1,-1,-2.5)
&#9;&#9;&#9;end
&#9;&#9;&#9;if itrs then
&#9;&#9;&#9;&#9;itrs.C0 = CFrame.new(1,-1,-2.5)
&#9;&#9;&#9;end

&#9;&#9;&#9;local FakeTorso = Instance.new(&quot;Part&quot;)
&#9;&#9;&#9;FakeTorso.Name = &quot;FakeTorso&quot;
&#9;&#9;&#9;FakeTorso.TopSurface = &quot;Smooth&quot;
&#9;&#9;&#9;FakeTorso.BottomSurface = &quot;Smooth&quot;
&#9;&#9;&#9;FakeTorso.BrickColor = BrickColor.new(&quot;White&quot;)
&#9;&#9;&#9;FakeTorso.formFactor = 0
&#9;&#9;&#9;FakeTorso.Size = Vector3.new(2,2,2)
&#9;&#9;&#9;
&#9;&#9;&#9;Spot(FakeTorso)

&#9;&#9;&#9;for _, Part in pairs(Player.Character:GetChildren()) do
&#9;&#9;&#9;&#9;if Part:IsA(&quot;BasePart&quot;) and Part.Name ~= &quot;Udder&quot; then
&#9;&#9;&#9;&#9;&#9;Spot(Part)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end

&#9;&#9;&#9;local TorsoMesh = Instance.new(&quot;SpecialMesh&quot;, FakeTorso)
&#9;&#9;&#9;TorsoMesh.MeshType = &quot;Sphere&quot;
&#9;&#9;&#9;TorsoMesh.Scale = Vector3.new(1.5, 1.4, 2.3)

&#9;&#9;&#9;local NewWeld = Instance.new(&quot;Weld&quot;, Torso)
&#9;&#9;&#9;NewWeld.Part0 = Torso
&#9;&#9;&#9;NewWeld.Part1 = FakeTorso
&#9;&#9;&#9;NewWeld.Parent = Torso
&#9;&#9;&#9;FakeTorso.Parent = Character

&#9;&#9;&#9;if Player.Character:FindFirstChild(&quot;Pants&quot;) then
&#9;&#9;&#9;&#9;Player.Character.Pants:Destroy()
&#9;&#9;&#9;end

&#9;&#9;&#9;if Player.Character:FindFirstChild(&quot;Shirt&quot;) then
&#9;&#9;&#9;&#9;Player.Character.Shirt:Destroy()
&#9;&#9;&#9;end

&#9;&#9;&#9;for _,Item in pairs(Character:GetChildren()) do
&#9;&#9;&#9;&#9;if Item:IsA(&quot;Part&quot;) then
&#9;&#9;&#9;&#9;&#9;if string.find(Item.Name,&quot; &quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;Item.BrickColor = BrickColor.new(&quot;Light stone grey&quot;)
&#9;&#9;&#9;&#9;&#9;elseif Item.Name == &quot;Head&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;Item.BrickColor = BrickColor.new(&quot;Mid gray&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;if Item:findFirstChild(&quot;face&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Item.face.Texture = &quot;http://www.roblox.com/asset/?id=7075412&quot;
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;--print(&quot;Done&quot;)
&#9;&#9;end
&#9;end
end

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player.Character then
&#9;&#9;Cow(Player)
&#9;end
end)
</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX374">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX375">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294901760</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Froobtiem</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>335</XO>
									<YS>0</YS>
									<YO>5</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Froobtiem</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX376">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:TagPlayerOfChoice(script.Parent, &quot;Froob&quot;)
</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX377">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX378">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294901760</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Box</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>115</XO>
									<YS>0</YS>
									<YO>5</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Box</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX379">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player and Player.Character and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character.Torso:IsA(&quot;BasePart&quot;) then
&#9;&#9;--[[for _, Item in pairs(Player.Character:GetChildren()) do
&#9;&#9;&#9;if Item:IsA(&quot;Hat&quot;) then
&#9;&#9;&#9;&#9;Item:Destroy();
&#9;&#9;&#9;end
&#9;&#9;end--]]
&#9;&#9;Gui:RemoveHats(Player)
&#9;&#9;Gui:RemoveTools(Player)
&#9;&#9;local CurrCFrame = Player.Character.Torso.CFrame
&#9;&#9;--print(&quot;Creating box&quot;)
&#9;&#9;local BoxBase = Instance.new(&quot;Part&quot;)
&#9;&#9;BoxBase.Name = &quot;BoxPart&quot;
&#9;&#9;BoxBase.FormFactor = &quot;Custom&quot;
&#9;&#9;BoxBase.Size = Vector3.new(0.1, 6, 8)
&#9;&#9;BoxBase.TopSurface = &quot;Smooth&quot;
&#9;&#9;BoxBase.BottomSurface = &quot;Smooth&quot;
&#9;&#9;BoxBase.BrickColor = BrickColor.new(&quot;Brick yellow&quot;)
&#9;&#9;BoxBase.Anchored = false&#9;
&#9;&#9;BoxBase.CanCollide = false

&#9;&#9;--print(&quot;Creating model&quot;)
&#9;&#9;local BoxModel = Instance.new(&quot;Model&quot;)
&#9;&#9;BoxModel.Archivable = false
&#9;&#9;BoxModel.Name = &quot;QuentyAdminBoxModel&quot;

&#9;&#9;local function CreateBoxPart(NewCFrame)
&#9;&#9;&#9;print(&quot;Creating box part&quot;)
&#9;&#9;&#9;local NewPart = BoxBase:Clone()
&#9;&#9;&#9;NewPart.Parent = BoxModel
&#9;&#9;&#9;NewPart.CFrame = Player.Character.Torso.CFrame * NewCFrame

&#9;&#9;&#9;local Weld = Instance.new(&quot;Weld&quot;, NewPart)
&#9;&#9;&#9;Weld.Part1 = NewPart
&#9;&#9;&#9;Weld.Part0 = Player.Character.Torso
&#9;&#9;&#9;Weld.C0 = NewCFrame

&#9;&#9;&#9;NewPart.Anchored = false
&#9;&#9;&#9;print(&quot;Done&quot;)
&#9;&#9;&#9;return NewPart, Weld;
&#9;&#9;end
&#9;&#9;--print(&quot;Creating sides&quot;)
&#9;&#9;CreateBoxPart(CFrame.new(4, 0, 0)) -- CFrame.Angles(0, math.rad(90), 0)
&#9;&#9;CreateBoxPart(CFrame.new(-4, 0, 0))
&#9;&#9;CreateBoxPart(CFrame.new(0, 0, 4) * CFrame.Angles(0, math.rad(90), 0))
&#9;&#9;local Front = CreateBoxPart(CFrame.new(0, 0, 4) * CFrame.Angles(0, math.rad(90), 0))
&#9;&#9;Front.Size = Vector3.new(0.1, 6, 6)
&#9;&#9;Front.Transparency = 1
&#9;&#9;local NewDecal = Instance.new(&quot;Decal&quot;, Front)
&#9;&#9;NewDecal.Texture = &quot;http://www.roblox.com/asset/?id=83924846&quot;
&#9;&#9;NewDecal.Face = &quot;Left&quot;

&#9;&#9;CreateBoxPart( CFrame.new(0, 0, -4) * CFrame.Angles(0, math.rad(90), 0))
&#9;&#9;--print(&quot;Creating top&quot;)
&#9;&#9;local Top, TopWeld = CreateBoxPart(CFrame.new(0, 3, 0))
&#9;&#9;Top.Size = Vector3.new(8.2, 0.1,8.2)
&#9;&#9;--TopWeld.CFrame = CFrame.new(0,5,0)
&#9;&#9;
&#9;&#9;-- Box Flaps --
&#9;&#9;CreateBoxPart(CFrame.new(5, -3, 0)).Size = Vector3.new(2, 0.1, 8)
&#9;&#9;CreateBoxPart(CFrame.new(-5, -3, 0)).Size = Vector3.new(2, 0.1, 8)
&#9;&#9;--CreateBoxPart(CFrame.new(-5, -3, 0)  * CFrame.Angles(0, math.rad(90), 0)).Size = Vector3.new(8, 0.1, 2)
&#9;--&#9;CreateBoxPart(CFrame.new(5, -3, 0)  * CFrame.Angles(0, math.rad(90), 0)).Size = Vector3.new(8, 0.1, 2)

&#9;&#9;BoxModel.Parent = Player.Character
&#9;&#9;Player.Character.Torso.CFrame = CurrCFrame
&#9;&#9;print(&quot;Done&quot;)
&#9;&#9;Gui:ChangeGravity(Player, gui:GetCurrGravity() + 0.3)
&#9;end
end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX380">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX381">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294901760</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Deer</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>225</XO>
									<YS>0</YS>
									<YO>5</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Deer</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX382">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

local function Deer(Player)
&#9;&#9;--print(&quot;Deering player&quot;)
&#9;&#9;if Player then
&#9;&#9;Gui:RemoveTools(Player)
&#9;&#9;local Character = Player.Character
&#9;&#9;if Character and Character:FindFirstChild(&quot;Torso&quot;) then
&#9;&#9;&#9;local Torso = Character.Torso
&#9;&#9;&#9;Torso.Transparency = 1
&#9;&#9;&#9;local ith = Torso:FindFirstChild(&quot;Neck&quot;)
&#9;&#9;&#9;local itlh = Torso:FindFirstChild(&quot;Left Hip&quot;)
&#9;&#9;&#9;local itrh = Torso:FindFirstChild(&quot;Right Hip&quot;)
&#9;&#9;&#9;local itls = Torso:FindFirstChild(&quot;Left Shoulder&quot;)
&#9;&#9;&#9;local itrs = Torso:FindFirstChild(&quot;Right Shoulder&quot;)
&#9;&#9;&#9;if ith then
&#9;&#9;&#9;&#9;ith.C0 = CFrame.new(0,-.5,-3)*CFrame.fromEulerAnglesXYZ(math.pi/2,math.pi,0)
&#9;&#9;&#9;end
&#9;&#9;&#9;if itlh then
&#9;&#9;&#9;&#9;itlh.C0 = CFrame.new(-1,-.5,2.5)
&#9;&#9;&#9;end
&#9;&#9;&#9;if itrh then
&#9;&#9;&#9;&#9;itrh.C0 = CFrame.new(1,-.5,2.5)
&#9;&#9;&#9;end
&#9;&#9;&#9;if itls then
&#9;&#9;&#9;&#9;itls.C0 = CFrame.new(-1,-1,-2.5)
&#9;&#9;&#9;end
&#9;&#9;&#9;if itrs then
&#9;&#9;&#9;&#9;itrs.C0 = CFrame.new(1,-1,-2.5)
&#9;&#9;&#9;end

&#9;&#9;&#9;local FakeTorso = Instance.new(&quot;Part&quot;)
&#9;&#9;&#9;FakeTorso.Name = &quot;FakeTorso&quot;
&#9;&#9;&#9;FakeTorso.TopSurface = &quot;Smooth&quot;
&#9;&#9;&#9;FakeTorso.BottomSurface = &quot;Smooth&quot;
&#9;&#9;&#9;FakeTorso.BrickColor = BrickColor.new(&quot;CGA brown&quot;)
&#9;&#9;&#9;FakeTorso.formFactor = 0
&#9;&#9;&#9;FakeTorso.Size = Vector3.new(3,1,5)

&#9;&#9;&#9;local NewWeld = Instance.new(&quot;Weld&quot;, Torso)
&#9;&#9;&#9;NewWeld.Part0 = Torso
&#9;&#9;&#9;NewWeld.Part1 = FakeTorso
&#9;&#9;&#9;NewWeld.Parent = Torso
&#9;&#9;&#9;FakeTorso.Parent = Character

&#9;&#9;&#9;for _,Item in pairs(Character:GetChildren()) do
&#9;&#9;&#9;&#9;if Item:IsA(&quot;Part&quot;) then
&#9;&#9;&#9;&#9;&#9;if string.find(Item.Name,&quot; &quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;Item.BrickColor = BrickColor.new(&quot;Reddish brown&quot;)
&#9;&#9;&#9;&#9;&#9;elseif Item.Name == &quot;Head&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;Item.BrickColor = BrickColor.new(&quot;Dark orange&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;if Item:findFirstChild(&quot;face&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Item.face.Texture = &quot;http://www.roblox.com/asset/?id=7075412&quot;
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;--&#9;print(&quot;Done&quot;)
&#9;&#9;end
&#9;end
end

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player.Character then
&#9;&#9;Deer(Player)
&#9;end
end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX383">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX384">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967040</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Button</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>45</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Button</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX385">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:TagPlayerOfChoice(script.Parent, &quot;Button&quot;)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX386">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX387">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967040</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">1</token>
								<bool name="Modal">false</bool>
								<string name="Name">Rocket</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>115</XO>
									<YS>0</YS>
									<YO>45</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>105</XO>
									<YS>0</YS>
									<YO>35</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Rocket</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX388">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Main</string>
									<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

Gui:ApplyToEachCharacter(script.Parent, function(Player) 
&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character.Torso:IsA(&quot;BasePart&quot;) and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character.Humanoid:IsA(&quot;Humanoid&quot;) then
&#9;&#9;local Rocket = Instance.new(&quot;Part&quot;, Player.Character)
&#9;&#9;Rocket.Name = &quot;Rocket&quot;
&#9;&#9;Rocket.TopSurface = &quot;Smooth&quot;
&#9;&#9;Rocket.BottomSurface = &quot;Smooth&quot;
&#9;&#9;Rocket.Size = Vector3.new(1, 8, 1)
&#9;&#9;Rocket.BrickColor = BrickColor.new(&quot;Bright red&quot;)
&#9;&#9;Rocket.CanCollide = false

&#9;&#9;local Mesh = Instance.new(&quot;SpecialMesh&quot;, Rocket)
&#9;&#9;Mesh.MeshId = &quot;http://www.roblox.com/asset/?id=2251534&quot;

&#9;&#9;local Weld = Instance.new(&quot;Weld&quot;, Rocket)
&#9;&#9;Weld.Part1 = Player.Character.Torso
&#9;&#9;Weld.Part0 = Rocket
&#9;&#9;Weld.C0 = CFrame.Angles(math.rad(-90), 0, 0) * CFrame.new(0,0,-1)

&#9;&#9;local BodyThrust = Instance.new(&quot;BodyForce&quot;, Rocket)
&#9;&#9;BodyThrust.force = Vector3.new(0,10000,0)

&#9;&#9;local Fire = Instance.new(&quot;Fire&quot;, Rocket)
&#9;&#9;
&#9;&#9;local Smoke = Instance.new(&quot;Smoke&quot;, Rocket)

&#9;&#9;Spawn(function()
&#9;&#9;&#9;for i=1,120 do
&#9;&#9;&#9;&#9;if Rocket then
&#9;&#9;&#9;&#9;&#9;local Explosion = Instance.new(&quot;Explosion&quot;, Workspace)
&#9;&#9;&#9;&#9;&#9;Explosion.BlastRadius = 0
&#9;&#9;&#9;&#9;&#9;Explosion.Position = Rocket.Position - Vector3.new(0,2,0)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if i==118 then
&#9;&#9;&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;&#9;&#9;if Player and Player.Character and Player.Character:FindFirstChild(&quot;Torso&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;SonicBoom&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local Boom = Instance.new(&quot;Part&quot;, Player.Character)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Boom.Size = Vector3.new(2,2,2)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Boom.Anchored = true
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Boom.CanCollide = false
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Boom.TopSurface = &quot;Smooth&quot;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Boom.BottomSurface = &quot;Smooth&quot;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Boom.CFrame = CFrame.new(Player.Character.Torso.Position)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Boom.Name = &quot;SonicBoom&quot;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Boom.BrickColor = BrickColor.new(&quot;Pastel light blue&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local SonicMesh = Instance.new(&quot;SpecialMesh&quot;, Boom)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;SonicMesh.MeshType = &quot;Sphere&quot;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;SonicMesh.Scale = Vector3.new(0,0,0)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;for i=0, 100, 2 do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if Boom and SonicMesh then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Boom.Transparency = i/100
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;SonicMesh.Scale = Vector3.new(i,i,i)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;--print(Boom.Transparency)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;wait()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;wait(1)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if Boom then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Boom:Destroy()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;wait(0.05)
&#9;&#9;&#9;end 
&#9;&#9;&#9;if BodyThrust then
&#9;&#9;&#9;&#9;BodyThrust:Destroy()
&#9;&#9;&#9;end
&#9;&#9;&#9;if Rocket then
&#9;&#9;&#9;&#9;Rocket.Velocity = Vector3.new(0,0,0)
&#9;&#9;&#9;&#9;Rocket.RotVelocity = Vector3.new(0,0,0)
&#9;&#9;&#9;&#9;local Explosion = Instance.new(&quot;Explosion&quot;, Workspace)
&#9;&#9;&#9;&#9;Explosion.BlastRadius = 10
&#9;&#9;&#9;&#9;Explosion.Position = Rocket.Position - Vector3.new(0,2,0)
&#9;&#9;&#9;end
&#9;&#9;&#9;if Player and Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character.Humanoid:IsA(&quot;Humanoid&quot;) then
&#9;&#9;&#9;&#9;Player.Character.Humanoid.Health = 0
&#9;&#9;&#9;&#9;Player.Character:BreakJoints()
&#9;&#9;&#9;&#9;for _, Part in pairs(Player.Character:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;if Part and Part:IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;Part.Velocity = Vector3.new(0, math.random(80, 100), 0) 
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;wait(3)
&#9;&#9;&#9;if Rocket then
&#9;&#9;&#9;&#9;Rocket:Destroy()
&#9;&#9;&#9;end
&#9;&#9;&#9;if Smoke then
&#9;&#9;&#9;&#9;Smoke:Destroy()
&#9;&#9;&#9;end
&#9;&#9;&#9;if Fire then
&#9;&#9;&#9;&#9;Fire:Destroy()
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;end
end)</ProtectedString>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX389">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0.699999988</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Decoration</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
					</Item>
				</Item>
				<Item class="Frame" referent="RBX390">
					<Properties>
						<bool name="Active">false</bool>
						<Color3 name="BackgroundColor3">4278190080</Color3>
						<float name="BackgroundTransparency">0.699999988</float>
						<Color3 name="BorderColor3">4279970357</Color3>
						<int name="BorderSizePixel">0</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<string name="Name">PlayerList.rbxm</string>
						<UDim2 name="Position">
							<XS>0.5</XS>
							<XO>-300</XO>
							<YS>0</YS>
							<YO>-465</YO>
						</UDim2>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>600</XO>
							<YS>0</YS>
							<YO>400</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<token name="Style">0</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="TextButton" referent="RBX391">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4294901760</Color3>
							<float name="BackgroundTransparency">0.699999988</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">2</token>
							<bool name="Modal">false</bool>
							<string name="Name">TextButton.rbxm</string>
							<UDim2 name="Position">
								<XS>1</XS>
								<XO>-105</XO>
								<YS>1</YS>
								<YO>5</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>100</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<string name="Text">Close</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">2</int>
						</Properties>
						<Item class="LocalScript" referent="RBX392">
							<Properties>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">ClosePlayerList.lua</string>
								<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:ClearListOfPlayers()
&#9;Gui:HidePlayerList()
&#9;Gui:ShowApplicationFrame()
end)</ProtectedString>
							</Properties>
						</Item>
						<Item class="Frame" referent="RBX393">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Decoration</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>0</XO>
									<YS>0.5</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
					</Item>
					<Item class="Frame" referent="RBX394">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4278190080</Color3>
							<float name="BackgroundTransparency">0.5</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<string name="Name">Title</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>5</XO>
								<YS>0</YS>
								<YO>-30</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>-5</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="Frame" referent="RBX395">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4278190080</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Title</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>-5</XO>
									<YS>0</YS>
									<YO>-10</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>10</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="Frame" referent="RBX396">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4278216447</Color3>
								<float name="BackgroundTransparency">0.300000012</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Frame</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>-5</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>5</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextLabel" referent="RBX397">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">1</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<string name="Name">TextLabel</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>8</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>-8</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<string name="Text">Choose Players</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">0</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
					</Item>
					<Item class="Frame" referent="RBX398">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4278190080</Color3>
							<float name="BackgroundTransparency">0.699999988</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<string name="Name">Frame</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>1</YS>
								<YO>0</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>40</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
				</Item>
				<Item class="Frame" referent="RBX399">
					<Properties>
						<bool name="Active">false</bool>
						<Color3 name="BackgroundColor3">4278190080</Color3>
						<float name="BackgroundTransparency">0.699999988</float>
						<Color3 name="BorderColor3">4279970357</Color3>
						<int name="BorderSizePixel">0</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<string name="Name">InputBox.rbxm</string>
						<UDim2 name="Position">
							<XS>0.25</XS>
							<XO>0</XO>
							<YS>-0.5</YS>
							<YO>0</YO>
						</UDim2>
						<UDim2 name="Size">
							<XS>0.5</XS>
							<XO>0</XO>
							<YS>0.5</YS>
							<YO>0</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<token name="Style">0</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="TextBox" referent="RBX400">
						<Properties>
							<bool name="Active">true</bool>
							<Color3 name="BackgroundColor3">4278190080</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">4284440415</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClearTextOnFocus">true</bool>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">6</token>
							<bool name="MultiLine">false</bool>
							<string name="Name">TextBox.rbxm</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>10</XO>
								<YS>0.324999988</YS>
								<YO>0</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>-20</XO>
								<YS>0.25</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<string name="Text">Type a number here.</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">true</bool>
							<token name="TextXAlignment">0</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">2</int>
						</Properties>
						<Item class="Frame" referent="RBX401">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4278190080</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Frame</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>-10</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>20</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
					</Item>
					<Item class="TextButton" referent="RBX402">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4294901760</Color3>
							<float name="BackgroundTransparency">0.699999988</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">4</token>
							<bool name="Modal">false</bool>
							<string name="Name">TextButton.rbxm</string>
							<UDim2 name="Position">
								<XS>1</XS>
								<XO>-105</XO>
								<YS>1</YS>
								<YO>-35</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>100</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<string name="Text">Ok!</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="Frame" referent="RBX403">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Decoration</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>0</XO>
									<YS>0.5</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
					</Item>
					<Item class="Frame" referent="RBX404">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4278190080</Color3>
							<float name="BackgroundTransparency">0.5</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<string name="Name">Title</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>5</XO>
								<YS>0</YS>
								<YO>-30</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>-5</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="Frame" referent="RBX405">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4278190080</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Title</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>-5</XO>
									<YS>0</YS>
									<YO>-10</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>10</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="Frame" referent="RBX406">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4294967040</Color3>
								<float name="BackgroundTransparency">0.300000012</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Frame</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>-5</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>5</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextLabel" referent="RBX407">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">1</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<string name="Name">TextLabel</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>8</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>-8</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<string name="Text">Select Input</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">0</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
					</Item>
				</Item>
				<Item class="Frame" referent="RBX408">
					<Properties>
						<bool name="Active">false</bool>
						<Color3 name="BackgroundColor3">4288914085</Color3>
						<float name="BackgroundTransparency">0</float>
						<Color3 name="BorderColor3">4279970357</Color3>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<string name="Name">OldStatList.rbxm</string>
						<UDim2 name="Position">
							<XS>0.25</XS>
							<XO>0</XO>
							<YS>-0.5</YS>
							<YO>0</YO>
						</UDim2>
						<UDim2 name="Size">
							<XS>0.5</XS>
							<XO>0</XO>
							<YS>0.5</YS>
							<YO>0</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<token name="Style">3</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="TextButton" referent="RBX409">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4288914085</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">2</token>
							<bool name="Modal">false</bool>
							<string name="Name">TextButton.rbxm</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>-0.200000003</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0.25</XS>
								<XO>0</XO>
								<YS>0.200000003</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">2</token>
							<string name="Text">Close</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="LocalScript" referent="RBX410">
							<Properties>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">CloseStatList.lua</string>
								<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:ClearListOfStats()
&#9;Gui:HideStatList()
&#9;Gui:ShowApplicationFrame()
end)</ProtectedString>
							</Properties>
						</Item>
					</Item>
				</Item>
				<Item class="Frame" referent="RBX411">
					<Properties>
						<bool name="Active">false</bool>
						<Color3 name="BackgroundColor3">4278190080</Color3>
						<float name="BackgroundTransparency">0.699999988</float>
						<Color3 name="BorderColor3">4279970357</Color3>
						<int name="BorderSizePixel">0</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<string name="Name">Confirm</string>
						<UDim2 name="Position">
							<XS>0.5</XS>
							<XO>-300</XO>
							<YS>0</YS>
							<YO>-265</YO>
						</UDim2>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>600</XO>
							<YS>0</YS>
							<YO>200</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<token name="Style">0</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="TextButton" referent="RBX412">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4294901760</Color3>
							<float name="BackgroundTransparency">0.699999988</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">2</token>
							<bool name="Modal">false</bool>
							<string name="Name">Cancel</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>5</XO>
								<YS>0</YS>
								<YO>5</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>290</XO>
								<YS>1</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<string name="Text">Cancel</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">2</int>
						</Properties>
						<Item class="Frame" referent="RBX413">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Decoration</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>0</XO>
									<YS>0.5</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
					</Item>
					<Item class="Frame" referent="RBX414">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4278190080</Color3>
							<float name="BackgroundTransparency">0.5</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<string name="Name">Title</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>5</XO>
								<YS>0</YS>
								<YO>-30</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>-5</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="Frame" referent="RBX415">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4278190080</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Title</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>-5</XO>
									<YS>0</YS>
									<YO>-10</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>10</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="Frame" referent="RBX416">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4294901760</Color3>
								<float name="BackgroundTransparency">0.300000012</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Frame</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>-5</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>5</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextLabel" referent="RBX417">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">1</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<string name="Name">TextLabel</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>8</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>-8</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<string name="Text">Please confirm your descision.</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">0</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
					</Item>
					<Item class="Frame" referent="RBX418">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4278190080</Color3>
							<float name="BackgroundTransparency">0.699999988</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<string name="Name">Frame</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>1</YS>
								<YO>0</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>40</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="TextButton" referent="RBX419">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4278222848</Color3>
							<float name="BackgroundTransparency">0.699999988</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">2</token>
							<bool name="Modal">false</bool>
							<string name="Name">Confirm</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>305</XO>
								<YS>0</YS>
								<YO>5</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>290</XO>
								<YS>1</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<string name="Text">Confirm</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">2</int>
						</Properties>
						<Item class="Frame" referent="RBX420">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Decoration</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>0</XO>
									<YS>0.5</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
					</Item>
				</Item>
				<Item class="Frame" referent="RBX421">
					<Properties>
						<bool name="Active">false</bool>
						<Color3 name="BackgroundColor3">4278190080</Color3>
						<float name="BackgroundTransparency">0.699999988</float>
						<Color3 name="BorderColor3">4279970357</Color3>
						<int name="BorderSizePixel">0</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<string name="Name">StatList.rbxm</string>
						<UDim2 name="Position">
							<XS>0.5</XS>
							<XO>-300</XO>
							<YS>0</YS>
							<YO>-465</YO>
						</UDim2>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>600</XO>
							<YS>0</YS>
							<YO>400</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<token name="Style">0</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="TextButton" referent="RBX422">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4294901760</Color3>
							<float name="BackgroundTransparency">0.699999988</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">2</token>
							<bool name="Modal">false</bool>
							<string name="Name">TextButton.rbxm</string>
							<UDim2 name="Position">
								<XS>1</XS>
								<XO>-105</XO>
								<YS>1</YS>
								<YO>5</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>100</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<string name="Text">Close</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">2</int>
						</Properties>
						<Item class="Frame" referent="RBX423">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Decoration</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>0</XO>
									<YS>0.5</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="LocalScript" referent="RBX424">
							<Properties>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">CloseStatList.lua</string>
								<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:ClearListOfStats()
&#9;Gui:HideStatList()
&#9;Gui:ShowApplicationFrame()
end)</ProtectedString>
							</Properties>
						</Item>
					</Item>
					<Item class="Frame" referent="RBX425">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4278190080</Color3>
							<float name="BackgroundTransparency">0.5</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<string name="Name">Title</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>5</XO>
								<YS>0</YS>
								<YO>-30</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>-5</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="Frame" referent="RBX426">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4278190080</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Title</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>-5</XO>
									<YS>0</YS>
									<YO>-10</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>10</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="Frame" referent="RBX427">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4286611584</Color3>
								<float name="BackgroundTransparency">0.300000012</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Frame</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>-5</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>5</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextLabel" referent="RBX428">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">1</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<string name="Name">TextLabel</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>8</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>-8</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<string name="Text">Choose Stat</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">0</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
					</Item>
					<Item class="Frame" referent="RBX429">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4278190080</Color3>
							<float name="BackgroundTransparency">0.699999988</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<string name="Name">Frame</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>1</YS>
								<YO>0</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>40</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
				</Item>
				<Item class="TextButton" referent="RBX430">
					<Properties>
						<bool name="Active">true</bool>
						<bool name="AutoButtonColor">true</bool>
						<Color3 name="BackgroundColor3">4278222848</Color3>
						<float name="BackgroundTransparency">0.699999988</float>
						<Color3 name="BorderColor3">4279970357</Color3>
						<int name="BorderSizePixel">0</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">0</token>
						<token name="FontSize">0</token>
						<bool name="Modal">false</bool>
						<string name="Name">Show</string>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>-75</XO>
							<YS>0</YS>
							<YO>145</YO>
						</UDim2>
						<bool name="Selected">false</bool>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>70</XO>
							<YS>0</YS>
							<YO>30</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<token name="Style">0</token>
						<string name="Text">Show Admin</string>
						<Color3 name="TextColor3">4294967295</Color3>
						<bool name="TextScaled">false</bool>
						<Color3 name="TextStrokeColor3">4278190080</Color3>
						<float name="TextStrokeTransparency">1</float>
						<float name="TextTransparency">0</float>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">2</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="Frame" referent="RBX431">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4288914085</Color3>
							<float name="BackgroundTransparency">0.699999988</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<string name="Name">Decoration</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>0</XO>
								<YS>0.5</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX432">
						<Properties>
							<bool name="Disabled">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">CloseStatList.lua</string>
							<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:HideShow()
&#9;Gui:ShowApplicationFrame()
end)</ProtectedString>
						</Properties>
					</Item>
				</Item>
				<Item class="Frame" referent="RBX433">
					<Properties>
						<bool name="Active">false</bool>
						<Color3 name="BackgroundColor3">4278190080</Color3>
						<float name="BackgroundTransparency">0.699999988</float>
						<Color3 name="BorderColor3">4279970357</Color3>
						<int name="BorderSizePixel">0</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<string name="Name">ConfirmWithText</string>
						<UDim2 name="Position">
							<XS>0.5</XS>
							<XO>-300</XO>
							<YS>0</YS>
							<YO>-265</YO>
						</UDim2>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>600</XO>
							<YS>0</YS>
							<YO>200</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<token name="Style">0</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="TextButton" referent="RBX434">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4294901760</Color3>
							<float name="BackgroundTransparency">0.699999988</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">2</token>
							<bool name="Modal">false</bool>
							<string name="Name">Cancel</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>5</XO>
								<YS>0</YS>
								<YO>40</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>290</XO>
								<YS>1</YS>
								<YO>-50</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<string name="Text">Cancel</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">2</int>
						</Properties>
						<Item class="Frame" referent="RBX435">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Decoration</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>0</XO>
									<YS>0.5</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
					</Item>
					<Item class="Frame" referent="RBX436">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4278190080</Color3>
							<float name="BackgroundTransparency">0.5</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<string name="Name">Title</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>5</XO>
								<YS>0</YS>
								<YO>-30</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>-5</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="Frame" referent="RBX437">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4278190080</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Title</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>-5</XO>
									<YS>0</YS>
									<YO>-10</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>10</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="Frame" referent="RBX438">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4294901760</Color3>
								<float name="BackgroundTransparency">0.300000012</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Frame</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>-5</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>5</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextLabel" referent="RBX439">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">1</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<string name="Name">TextLabel</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>8</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>-8</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<string name="Text">Please confirm your descision.</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">0</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
					</Item>
					<Item class="TextButton" referent="RBX440">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4278222848</Color3>
							<float name="BackgroundTransparency">0.699999988</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">2</token>
							<bool name="Modal">false</bool>
							<string name="Name">Confirm</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>305</XO>
								<YS>0</YS>
								<YO>40</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>290</XO>
								<YS>1</YS>
								<YO>-50</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<string name="Text">Confirm</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">2</int>
						</Properties>
						<Item class="Frame" referent="RBX441">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Decoration</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>0</XO>
									<YS>0.5</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
					</Item>
					<Item class="TextLabel" referent="RBX442">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4288914085</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">0</token>
							<string name="Name">Label</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>5</XO>
								<YS>0</YS>
								<YO>5</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>-10</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<string name="Text">Are you sure you want to do this? </string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">true</bool>
							<token name="TextXAlignment">0</token>
							<token name="TextYAlignment">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
				</Item>
				<Item class="LocalScript" referent="RBX443">
					<Properties>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">GlooLibrary (V0.11)</string>
						<ProtectedString name="Source">local PROJECT_NAME = &quot;QuentyglooLibrary&quot;

if _G[PROJECT_NAME] then return end

---- SETTINGS
local ENTRY_SIZE&#9;= 17&#9;-- default size of rows, scrollbars, etc
local WEAK_TABLES&#9;= false&#9;-- whether weak tables are enabled (causes problems under certain circumstances)
----/SETTINGS

local lib = {}
local doc = {}
local version = &quot;0.11&quot;

doc[&quot;Version&quot;] = [==[
Version ( ) [function]
&#9;returns: string `version`

Returns the current version of the library (currently ]==]..version..[==[).
]==]

function lib.Version()
&#9;return version
end

doc[&quot;NULL&quot;] = [==[
NULL [const]

Represents a &quot;non-nil nil value&quot;. Used with tables that need a way to declare an entry as nil while still being defined in the table.
]==]

local NULL = {}
lib.NULL = NULL

local SORT = {
&#9;NONE = 0;
&#9;ASCENDING = 1;
&#9;DESCENDING = 2;
}
lib.SORT = SORT

local WEAK_MODE = {
&#9;K = {__mode=&quot;k&quot;};
&#9;V = {__mode=&quot;v&quot;};
&#9;KV = {__mode=&quot;kv&quot;};
}

local function GetIndex(table,value)
&#9;for i,v in pairs(table) do
&#9;&#9;if v == value then
&#9;&#9;&#9;return i
&#9;&#9;end
&#9;end
end

local function ClampIndex(table,index)
&#9;local max = #table
&#9;index = math.floor(index)
&#9;return index &lt; 1 and 1 or index &gt; max and max or index
end

local function Create(ty)
&#9;return function(data)
&#9;&#9;local obj = Instance.new(ty)
&#9;&#9;for k, v in pairs(data) do
&#9;&#9;&#9;if type(k) == &apos;number&apos; then
&#9;&#9;&#9;&#9;v.Parent = obj
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;obj[k] = v
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;return obj
&#9;end
end

local function Modify(obj)
&#9;return function(data)
&#9;&#9;for k, v in pairs(data) do
&#9;&#9;&#9;if type(k) == &apos;number&apos; then
&#9;&#9;&#9;&#9;v.Parent = obj
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;obj[k] = v
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;return obj
&#9;end
end

--[[
local ENUM_MT = {
&#9;__tostring = function(e)
&#9;&#9;return &quot;enum: &quot;..e.__type
&#9;end;
}

local function CastToEnum(value,enum)
&#9;if value ~= &apos;__type&apos; then
&#9;&#9;for k,e in pairs(enum) do
&#9;&#9;&#9;if k == value then
&#9;&#9;&#9;&#9;return e
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;error(&apos;cannot cast `&apos;..tostring(value)..&apos;` to enum &apos;..enum.__type,3)
end
--]]

--[[DEPEND:]]

doc[&quot;SetZIndex&quot;] = [==[
SetZIndex ( Instance `object`, number `zindex` ) [function]
&#9;returns: (nothing)

Sets the ZIndex of `object`, then calls SetZIndex on every child of `object`.

Arguments:
&#9;`object`
&#9;&#9;The instance to set the ZIndex of.
&#9;`zindex`
&#9;&#9;The ZIndex to set the object to.
]==]

doc[&quot;SetZIndexOnChanged&quot;] = [==[
SetZIndexOnChanged ( Instance `object` )
&#9;returns: RBXScriptConnection `connection`

Sets an object to call SetZIndex whenever its ZIndex changes.

Arguments:
&#9;`object`
&#9;&#9;The instance to set.

Returns:
&#9;`connection`
&#9;&#9;The resulting event connection.
]==]

local ZIndexLock = {}
local function SetZIndex(object,z)
&#9;if not ZIndexLock[object] then
&#9;&#9;ZIndexLock[object] = true
&#9;&#9;object.ZIndex = z
&#9;&#9;for _,child in pairs(object:GetChildren()) do
&#9;&#9;&#9;SetZIndex(child,z)
&#9;&#9;end
&#9;&#9;ZIndexLock[object] = nil
&#9;end
end

local function SetZIndexOnChanged(object)
&#9;return object.Changed:connect(function(p)
&#9;&#9;if p == &quot;ZIndex&quot; then
&#9;&#9;&#9;SetZIndex(object,object.ZIndex)
&#9;&#9;end
&#9;end)
end

lib.SetZIndex = SetZIndex
lib.SetZIndexOnChanged = SetZIndexOnChanged

--[[DEPEND:]]

doc[&quot;GetScreen&quot;] = [==[
GetScreen ( Instance `object` ) [function]
&#9;returns ScreenGui `screen`

Gets the nearest ascending ScreenGui of `object`.
Returns `object` if it is a ScreenGui.
Returns nil if `object` isn&apos;t the descendant of a ScreenGui.

Arguments:
&#9;`object`
&#9;&#9;The instance to get the ascending ScreenGui from.

Returns:
&#9;`screen`
&#9;&#9;The ascending screen.
&#9;&#9;Will be nil if `object` isn&apos;t the descendant of a ScreenGui.
]==]

local function GetScreen(object)
&#9;local screen = object
&#9;while not screen:IsA(&quot;ScreenGui&quot;) do
&#9;&#9;screen = screen.Parent
&#9;&#9;if screen == nil then return nil end
&#9;end
&#9;return screen
end

lib.GetScreen = GetScreen

--[[DEPEND:]]

doc[&quot;GetPadding&quot;] = [==[
GetPadding ( GuiObject `object` ) [function]
&#9;returns: number `padding`

Gets the padding amount for a Frame or GuiButton that has its Style property set.

Arguments:
&#9;`object`
&#9;&#9;The Frame or GuiButton to get he padding from.

Returns:
&#9;`padding`
&#9;&#9;The padding amount of `object`
]==]

local function GetPadding(object)
&#9;local base_size = 0
&#9;local base_pad = 0
&#9;if object:IsA&quot;Frame&quot; then
&#9;&#9;if object.Style == Enum.FrameStyle.ChatBlue
&#9;&#9;or object.Style == Enum.FrameStyle.ChatGreen
&#9;&#9;or object.Style == Enum.FrameStyle.ChatRed then
&#9;&#9;&#9;base_size = 60
&#9;&#9;&#9;base_pad = 17
&#9;&#9;elseif object.Style == Enum.FrameStyle.RobloxSquare
&#9;&#9;or object.Style == Enum.FrameStyle.RobloxRound then
&#9;&#9;&#9;base_size = 21
&#9;&#9;&#9;base_pad = 8
&#9;&#9;else
&#9;&#9;&#9;return 0
&#9;&#9;end
&#9;elseif object:IsA&quot;GuiButton&quot; then
&#9;&#9;if object.Style == Enum.ButtonStyle.RobloxButtonDefault
&#9;&#9;or object.Style == Enum.ButtonStyle.RobloxButton then
&#9;&#9;&#9;base_size = 36
&#9;&#9;&#9;base_pad = 12
&#9;&#9;else
&#9;&#9;&#9;return 0
&#9;&#9;end
&#9;else
&#9;&#9;return 0
&#9;end
&#9;local size = math.min(object.AbsoluteSize.x,object.AbsoluteSize.y)
&#9;if size &lt; base_size then
&#9;&#9;return size/base_size*base_pad
&#9;else
&#9;&#9;return base_pad
&#9;end
end

lib.GetPadding = GetPadding

--[[DEPEND:]]

doc[&quot;Sprite&quot;] = [==[
Sprite ( Content `sprite_map`, GuiObject `sprite_frame`, Vector2, `sprite_size`, Vector2 `sprite_map_size`, bool `fix_blur` ) [constructor]
&#9;returns: Sprite `object`, GuiObject `sprite_frame`

Creates a sprite from a sprite map (an image that holds smaller &quot;sub-images&quot;).

Arguments:
&#9;`sprite_map`
&#9;&#9;The image to use as the sprite map.

&#9;`frame`
&#9;&#9;The object that will contain the sprite image.
&#9;&#9;Optional; defaults to a new Frame

&#9;`sprite_size`
&#9;&#9;The dimensions of one sprite on the sprite map.
&#9;&#9;Optional; defaults to [32, 32]

&#9;`sprite_map_size`
&#9;&#9;The dimensions of the sprite map.
&#9;&#9;Optional; defaults to [256, 256]

&#9;`fix_blur`
&#9;&#9;Indicates whether image blurriness should be fixed.
&#9;&#9;Blurriness occurs because GUIs are offset by half a pixel, causing images to render &quot;in-between&quot; pixels.
&#9;&#9;This can be fixed by using Scaled position to offset the image by 0.5 pixels.
&#9;&#9;Optional; defaults to true

Returns:
&#9;`object`
&#9;&#9;The Sprite object.

&#9;`sprite_frame`
&#9;&#9;The sprite GUI.


Sprite Class:
&#9;This class contains the following members:
&#9;Readonly:
&#9;&#9;GUI
&#9;&#9;&#9;The sprite GUI.

&#9;Methods:
&#9;&#9;SetOffset ( number `row`, number `column` )
&#9;&#9;&#9;Sets the offset of the sprite on the sprite map.
&#9;&#9;&#9;`row` and `column` represent the row and column on the sprite map, starting from 0.
&#9;&#9;&#9;For example, an offset of [0, 2] would select the third sprite in the first row.

&#9;&#9;GetOffset ( )
&#9;&#9;&#9;Returns the current offset of the sprite.

&#9;&#9;Destroy ( )
&#9;&#9;&#9;Releases the resources used by this object.
&#9;&#9;&#9;Run this if you&apos;re no longer using this object.
]==]

local function CreateSprite(sprite_map,SpriteFrame,sprite_size,map_size,fix_blur)
&#9;sprite_size = sprite_size or Vector2.new(32,32)
&#9;map_size = map_size or Vector2.new(256,256)
&#9;if fix_blur == nil then fix_blur = true end

&#9;if not SpriteFrame then
&#9;&#9;SpriteFrame = Create&apos;Frame&apos;{
&#9;&#9;&#9;Name = &quot;Sprite&quot;;
&#9;&#9;&#9;BackgroundTransparency = 1;
&#9;&#9;}
&#9;end
&#9;SpriteFrame.ClipsDescendants = true;
&#9;local MapFrame = Create&apos;ImageLabel&apos;{
&#9;&#9;Name = &quot;SpriteMap&quot;;
&#9;&#9;Active = false;
&#9;&#9;BackgroundTransparency = 1;
&#9;&#9;Image = sprite_map;
&#9;&#9;Size = UDim2.new(map_size.x/sprite_size.x,0,map_size.y/sprite_size.y,0);
&#9;&#9;Parent = SpriteFrame;
&#9;};

&#9;local off_row,off_col = 0,0

&#9;local SetOffset = fix_blur
&#9;and function(row,col)
&#9;&#9;local size = SpriteFrame.AbsoluteSize
&#9;&#9;MapFrame.Position = UDim2.new(-col - 0.5/size.x,0,-row - 0.5/size.y,0)
&#9;&#9;off_row,off_col = row,col
&#9;end
&#9;or function(row,col)
&#9;&#9;MapFrame.Position = UDim2.new(-col,0,-row,0)
&#9;&#9;off_row,off_col = row,col
&#9;end;

&#9;if fix_blur then
&#9;&#9;SpriteFrame.Changed:connect(function(p)
&#9;&#9;&#9;if p == &quot;AbsoluteSize&quot; then
&#9;&#9;&#9;&#9;SetOffset(off_row,off_col)
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;end

&#9;local Class = {
&#9;&#9;GUI = SpriteFrame;
&#9;&#9;SetOffset = SetOffset;
&#9;&#9;GetOffset = function()
&#9;&#9;&#9;return off_row,off_col
&#9;&#9;end;
&#9;}

&#9;function Class.Destroy()
&#9;&#9;for k in pairs(Class) do
&#9;&#9;&#9;Class[k] = nil
&#9;&#9;end
&#9;&#9;SpriteFrame:Destroy()
&#9;end

&#9;return Class,SpriteFrame
end

lib.Sprite = CreateSprite

--[[DEPEND:]]

doc[&quot;Stylist&quot;] = [==[
Stylist ( table `style` ) [constructor]
&#9;returns: Stylist `object`, table `style`

Creates a new stylist, which manages the properties of an entire group of objects.

More stylists can also be added, refered to as &quot;substylists&quot;.

When a property of a stylist is updated, the properties in the stylist&apos;s objects are updated to reflect it.
The properties of objects in each substylist are also updated, but only if that property isn&apos;t defined in the substylist&apos;s Style.

Arguments:
&#9;`style`
&#9;&#9;A table of property/value pairs.
&#9;&#9;The stylist&apos;s &quot;Style&quot;.
&#9;&#9;Optional; defaults to an empty table.

Returns:
&#9;`object`
&#9;&#9;The Stylist object.

&#9;`style`
&#9;&#9;The style table.


Stylist Class:
&#9;Contains the following members:

&#9;Readonly:
&#9;&#9;Style
&#9;&#9;&#9;The `style` table.

&#9;Methods:
&#9;&#9;AddObject ( Instance `object`, table `alias_map` )
&#9;&#9;&#9;Adds `object` to the stylist and updates its properties.
&#9;&#9;&#9;If `alias_map` is specified, then for this object, properties in the style will first be mapped though this table (see Alias Maps).
&#9;&#9;&#9;Returns `object`

&#9;&#9;AddObjects ( table `objects`, table `alias_map` )
&#9;&#9;&#9;Adds multiple objects to the stylist.
&#9;&#9;&#9;`objects` is a list of objects to be added to the stylist.
&#9;&#9;&#9;If `alias_map` is specified, it will be applied to all objects in the list.
&#9;&#9;&#9;Returns `objects`

&#9;&#9;RemoveObject ( Instance `object` )
&#9;&#9;&#9;Removes `object` from the stylist.
&#9;&#9;&#9;Returns `object`

&#9;&#9;RemoveObjects ( table `objects` )
&#9;&#9;&#9;Removes multiple objects from the stylist.
&#9;&#9;&#9;`objects` is a list of objects to be removed from the stylist.
&#9;&#9;&#9;Returns `objects`

&#9;&#9;GetObjects ( )
&#9;&#9;&#9;Returns a list of objects added to this stylist.
&#9;&#9;&#9;Items in the list have no defined order.

&#9;&#9;ObjectIn ( Instance `object` )
&#9;&#9;&#9;If `object` is in the stylist, returns true.
&#9;&#9;&#9;If `object` has an alias in the stylist, returns the alias.
&#9;&#9;&#9;Otherwise, returns false.

&#9;&#9;SetProperty ( string `property`, * `value` )
&#9;&#9;&#9;Sets `property` in each object to `value`.
&#9;&#9;&#9;Also sets the value in the `style` table.

&#9;&#9;SetProperties ( table `properties` )
&#9;&#9;&#9;Similar to SetProperty, but sets multiple properties at once.
&#9;&#9;&#9;`properties` is a table of property/value pairs.
&#9;&#9;&#9;To set a property to nil, use ]==]..PROJECT_NAME..[==[.NULL as the value.

&#9;&#9;ClearProperties ( )
&#9;&#9;&#9;Clears all set properties in the style table.

&#9;&#9;Update ( )
&#9;&#9;&#9;Updates each object&apos;s properties to reflect values in the `style` table.

&#9;&#9;SetInternal ( string `property`, * `value` )
&#9;&#9;&#9;Sets the properties of the stylist&apos;s objects and substylists without modifying the stylist&apos;s Style.

&#9;&#9;Destroy ( )
&#9;&#9;&#9;Releases the resources used by this object.
&#9;&#9;&#9;Run this if you&apos;re no longer using this object.

&#9;&#9;AddStylist ( Stylist `stylist`, table `alias_map` )
&#9;&#9;&#9;Adds `stylist` to this stylist and updates its properties.
&#9;&#9;&#9;If `alias_map` is specified, then for this stylist, properties in the style will first be mapped though this table (see Alias Maps).
&#9;&#9;&#9;Adding two stylists to each other is not recommended.

&#9;&#9;RemoveStylist ( Stylist `stylist` )
&#9;&#9;&#9;Removes `stylist` for this stylist.

&#9;&#9;GetStylists ( )
&#9;&#9;&#9;Returns a list of stylists added to this stylist.
&#9;&#9;&#9;Items in the list have no defined order.

&#9;&#9;StylistIn ( Stylist `stylist` )
&#9;&#9;&#9;If `stylist` is in the stylist, returns true.
&#9;&#9;&#9;If `stylist` has an alias in the stylist, returns the alias.
&#9;&#9;&#9;Otherwise, returns false.


Alias Maps:
&#9;These let you set the property of an object as if it were another.
&#9;For example, if an alias map contains [&quot;TextColor3&quot;] = &quot;BackgroundColor3&quot;, then
&#9;the object will have its BackgroundColor3 property set using the TextColor3 value in the Style.
&#9;This implies that both properties have the same type, or at least be convertible.
]==]

local function CreateStylist(StyleTable)
&#9;StyleTable = StyleTable or {}
&#9;local ParentStylists = {}
&#9;local Class = {
&#9;&#9;Style = StyleTable;
&#9;&#9;ParentStylists = ParentStylists;
&#9;}

&#9;local ObjectLookup = WEAK_TABLES and setmetatable({},WEAK_MODE.K) or {}
&#9;local AliasObjectLookup = WEAK_TABLES and setmetatable({},WEAK_MODE.K) or {}
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;-- ISSUE: objects are getting dropped when they obviously haven&apos;t been collected 
&#9;local StylistLookup = WEAK_TABLES and setmetatable({},WEAK_MODE.K) or {}
&#9;local AliasStylistLookup = WEAK_TABLES and setmetatable({},WEAK_MODE.K) or {}
&#9;
&#9;local function pset(t,k,v)
&#9;&#9;t[k] = v
&#9;end

&#9;local function set_object(object,property,value)
&#9;&#9;pcall(pset,object,property,value)
&#9;end

&#9;local function set_stylist(stylist,property,value)
&#9;&#9;if stylist.Style[property] == nil then
&#9;&#9;&#9;stylist.SetInternal(property,value)
&#9;&#9;end
&#9;end

&#9;local function set_alias_object(object,alias_map,property,value)
&#9;&#9;local alias = alias_map[property]
&#9;&#9;if alias then
&#9;&#9;&#9;pcall(pset,object,alias,value)
&#9;&#9;else
&#9;&#9;&#9;pcall(pset,object,property,value)
&#9;&#9;end
&#9;end

&#9;local function set_alias_stylist(stylist,alias_map,property,value)
&#9;&#9;local alias = alias_map[property]
&#9;&#9;if alias then
&#9;&#9;&#9;if stylist.Style[alias] == nil then
&#9;&#9;&#9;&#9;stylist.SetInternal(alias,value)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;if stylist.Style[property] == nil then
&#9;&#9;&#9;&#9;stylist.SetInternal(property,value)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;
&#9;local function AddObject(object,alias_map)
&#9;&#9;if type(alias_map) == &quot;table&quot; then
&#9;&#9;&#9;AliasObjectLookup[object] = alias_map
&#9;&#9;&#9;for property,value in pairs(StyleTable) do
&#9;&#9;&#9;&#9;set_alias_object(object,alias_map,property,value)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;ObjectLookup[object] = true
&#9;&#9;&#9;for property,value in pairs(StyleTable) do
&#9;&#9;&#9;&#9;set_object(object,property,value)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;for parent in pairs(ParentStylists) do
&#9;&#9;&#9;parent.Update(Class)
&#9;&#9;end
&#9;&#9;return object
&#9;end

&#9;local function AddObjects(objects,alias_map)
&#9;&#9;if type(alias_map) == &quot;table&quot; then
&#9;&#9;&#9;for i,object in pairs(objects) do
&#9;&#9;&#9;&#9;AliasObjectLookup[object] = alias_map
&#9;&#9;&#9;&#9;for property,value in pairs(StyleTable) do
&#9;&#9;&#9;&#9;&#9;set_alias_object(object,alias_map,property,value)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;for i,object in pairs(objects) do
&#9;&#9;&#9;&#9;ObjectLookup[object] = true
&#9;&#9;&#9;&#9;for property,value in pairs(StyleTable) do
&#9;&#9;&#9;&#9;&#9;set_object(object,property,value)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;for parent in pairs(ParentStylists) do
&#9;&#9;&#9;parent.Update(Class)
&#9;&#9;end
&#9;&#9;return objects
&#9;end
&#9;
&#9;local function RemoveObject(object)
&#9;&#9;ObjectLookup[object] = nil
&#9;&#9;AliasObjectLookup[object] = nil
&#9;&#9;return object
&#9;end

&#9;local function RemoveObjects(objects)
&#9;&#9;for i,object in pairs(objects) do
&#9;&#9;&#9;ObjectLookup[object] = nil
&#9;&#9;&#9;AliasObjectLookup[object] = nil
&#9;&#9;end
&#9;&#9;return objects
&#9;end

&#9;local function GetObjects()
&#9;&#9;local list = {}
&#9;&#9;for object in pairs(ObjectLookup) do
&#9;&#9;&#9;list[#list+1] = object
&#9;&#9;end
&#9;&#9;for object in pairs(AliasObjectLookup) do
&#9;&#9;&#9;list[#list+1] = object
&#9;&#9;end
&#9;&#9;return list
&#9;end

&#9;local function ObjectIn(object)
&#9;&#9;if ObjectLookup[object] then
&#9;&#9;&#9;return true
&#9;&#9;elseif AliasObjectLookup[object] then
&#9;&#9;&#9;return ObjectAliasLookup[object]
&#9;&#9;else
&#9;&#9;&#9;return false
&#9;&#9;end
&#9;end

&#9;local function AddStylist(stylist,alias_map)
&#9;&#9;stylist.ParentStylists[Class] = true
&#9;&#9;if alias_map and type(alias_map) == &quot;table&quot; then
&#9;&#9;&#9;AliasStylistLookup[stylist] = alias_map
&#9;&#9;&#9;for property,value in pairs(StyleTable) do
&#9;&#9;&#9;&#9;set_alias_stylist(stylist,alias_map,property,value)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;StylistLookup[stylist] = true
&#9;&#9;&#9;for property,value in pairs(StyleTable) do
&#9;&#9;&#9;&#9;set_stylist(stylist,property,value)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;for parent in pairs(ParentStylists) do
&#9;&#9;&#9;parent.Update(Class)
&#9;&#9;end
&#9;&#9;return stylist
&#9;end

&#9;local function RemoveStylist(stylist)
&#9;&#9;stylist.ParentStylists[Class] = nil
&#9;&#9;StylistLookup[stylist] = nil
&#9;&#9;AliasStylistLookup[stylist] = nil
&#9;&#9;return stylist
&#9;end

&#9;local function GetStylists()
&#9;&#9;local list = {}
&#9;&#9;for stylist in pairs(StylistLookup) do
&#9;&#9;&#9;list[#list+1] = stylist
&#9;&#9;end
&#9;&#9;for stylist in pairs(AliasStylistLookup) do
&#9;&#9;&#9;list[#list+1] = stylist
&#9;&#9;end
&#9;&#9;return list
&#9;end

&#9;local function StylistIn(stylist)
&#9;&#9;if StylistLookup[stylist] then
&#9;&#9;&#9;return true
&#9;&#9;elseif AliasStylistLookup[stylist] then
&#9;&#9;&#9;return StylistAliasLookup[stylist]
&#9;&#9;else
&#9;&#9;&#9;return false
&#9;&#9;end
&#9;end

&#9;local function SetInternal(property,value)
&#9;&#9;for object in pairs(ObjectLookup) do
&#9;&#9;&#9;set_object(object,property,value)
&#9;&#9;end
&#9;&#9;for stylist in pairs(StylistLookup) do
&#9;&#9;&#9;set_stylist(stylist,property,value)
&#9;&#9;end
&#9;&#9;for object,alias_map in pairs(AliasObjectLookup) do
&#9;&#9;&#9;set_alias_object(object,alias_map,property,value)
&#9;&#9;end
&#9;&#9;for stylist,alias_map in pairs(AliasStylistLookup) do
&#9;&#9;&#9;set_alias_stylist(stylist,alias_map,property,value)
&#9;&#9;end
&#9;end
&#9;
&#9;local function SetProperty(property,value)
&#9;&#9;if value == nil or value == NULL then
&#9;&#9;&#9;StyleTable[property] = nil
&#9;&#9;&#9;for parent in pairs(ParentStylists) do
&#9;&#9;&#9;&#9;parent.Update(Class)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;StyleTable[property] = value
&#9;&#9;&#9;SetInternal(property,value)
&#9;&#9;end
&#9;end
&#9;
&#9;local function SetProperties(new_style)
&#9;&#9;local continue = false
&#9;&#9;for property,value in pairs(new_style) do
&#9;&#9;&#9;if value == NULL then
&#9;&#9;&#9;&#9;StyleTable[property] = nil
&#9;&#9;&#9;&#9;continue = true
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;StyleTable[property] = value
&#9;&#9;&#9;&#9;SetInternal(property,value)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;if continue then
&#9;&#9;&#9;for parent in pairs(ParentStylists) do
&#9;&#9;&#9;&#9;parent.Update(Class)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end

&#9;local function ClearProperties()
&#9;&#9;for property,value in pairs(StyleTable) do
&#9;&#9;&#9;StyleTable[property] = nil
&#9;&#9;end
&#9;&#9;for parent in pairs(ParentStylists) do
&#9;&#9;&#9;parent.Update(Class)
&#9;&#9;end
&#9;end
&#9;
&#9;local function Update(object)
&#9;&#9;for parent in pairs(ParentStylists) do
&#9;&#9;&#9;parent.Update(Class)
&#9;&#9;end
&#9;&#9;if object then
&#9;&#9;&#9;if ObjectLookup[object] then
&#9;&#9;&#9;&#9;for property,value in pairs(StyleTable) do
&#9;&#9;&#9;&#9;&#9;set_object(object,property,value)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif StylistLookup[object] then
&#9;&#9;&#9;&#9;for property,value in pairs(StyleTable) do
&#9;&#9;&#9;&#9;&#9;set_stylist(object,property,value)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif AliasObjectLookup[object] then
&#9;&#9;&#9;&#9;local alias_map = AliasObjectLookup[object]
&#9;&#9;&#9;&#9;for property,value in pairs(StyleTable) do
&#9;&#9;&#9;&#9;&#9;set_alias_object(object,alias_map,property,value)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif AliasStylistLookup[object] then
&#9;&#9;&#9;&#9;for property,value in pairs(StyleTable) do
&#9;&#9;&#9;&#9;&#9;set_alias_stylist(object,alias_map,property,value)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;for property,value in pairs(StyleTable) do
&#9;&#9;&#9;&#9;SetInternal(property,value)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end

&#9;Class.AddObject = AddObject;
&#9;Class.AddObjects = AddObjects;
&#9;Class.RemoveObject = RemoveObject;
&#9;Class.RemoveObjects = RemoveObjects;
&#9;Class.GetObjects = GetObjects;
&#9;Class.ObjectIn = ObjectIn;
&#9;Class.AddStylist = AddStylist;
&#9;Class.RemoveStylist = RemoveStylist;
&#9;Class.GetStylists = GetStylists;
&#9;Class.StylistIn = StylistIn;
&#9;Class.SetInternal = SetInternal;
&#9;Class.SetProperty = SetProperty;
&#9;Class.SetProperties = SetProperties;
&#9;Class.ClearProperties = ClearProperties;
&#9;Class.Update = Update;

&#9;function Class.Destroy()
&#9;&#9;for parent in pairs(ParentStylists) do
&#9;&#9;&#9;parent.RemoveStylist(Class)
&#9;&#9;&#9;ParentStylists[parent] = nil
&#9;&#9;end
&#9;&#9;for k in pairs(Class) do
&#9;&#9;&#9;Class[k] = nil
&#9;&#9;end
&#9;&#9;for k in pairs(ObjectLookup) do
&#9;&#9;&#9;ObjectLookup[k] = nil
&#9;&#9;end
&#9;&#9;for k in pairs(AliasObjectLookup) do
&#9;&#9;&#9;AliasObjectLookup[k] = nil
&#9;&#9;end
&#9;&#9;for k in pairs(StylistLookup) do
&#9;&#9;&#9;StylistLookup[k] = nil
&#9;&#9;end
&#9;&#9;for k in pairs(AliasStylistLookup) do
&#9;&#9;&#9;AliasStylistLookup[k] = nil
&#9;&#9;end
&#9;end
&#9;
&#9;return Class,StyleTable
end

lib.Stylist = CreateStylist

--[[DEPEND:]]

doc[&quot;AutoSizeLabel&quot;] = [==[
AutoSizeLabel ( GuiText `label` ) [constructor]
&#9;returns: AutoSizeLabel `object`, GuiText `label`

Creates a text GUI that automatically resizes to its text.
Note that this is dependant on the TextBounds property.

Arguments:
&#9;`label`
&#9;&#9;An object to turn into an auto-sizing label.
&#9;&#9;Optional; defaults to a new TextLabel

Returns:
&#9;`object`
&#9;&#9;The AutoSizingLabel object.
&#9;`label`
&#9;&#9;The auto-sizing label GUI.


AutoSizeLabel Class:
&#9;This class contains the following members:

&#9;Read-Only:
&#9;&#9;GUI
&#9;&#9;&#9;The auto-sizing label GUI.

&#9;Methods:
&#9;&#9;LockAxis ( number `x`, number `y` )
&#9;&#9;&#9;Locks the size of the label on an axis to a specific amount.
&#9;&#9;&#9;`x` sets the amount, in pixels, to lock to on the x axis.
&#9;&#9;&#9;`y` sets the amount, in pixels, to lock to on the y axis.
&#9;&#9;&#9;Passing either value as nil will unlock that respective axis.

&#9;&#9;SetPadding ( number `pt`, number `pr`, number `pb`, number `pl` )
&#9;&#9;&#9;Sets the padding for each side of the label.
&#9;&#9;&#9;
&#9;&#9;&#9;Passing four values specifies the top, right, bottom, and left, in that order.
&#9;&#9;&#9;Passing three values specifies the top (`pt`), right/left (`pr`), and bottom (`pb`).
&#9;&#9;&#9;Passing two values specifies the top/bottom (`pt`), and right/left (`pr`).
&#9;&#9;&#9;Passing one value specifies that all sides have that value.
&#9;&#9;&#9;Passing no values sets all sides to 0.
&#9;&#9;&#9;
&#9;&#9;&#9;If the text is aligned to a certain side, the padding on that side will be ignored.

&#9;&#9;Update ( )
&#9;&#9;&#9;Updates the label.

&#9;&#9;Destroy ( )
&#9;&#9;&#9;Releases the resources used by this object.
&#9;&#9;&#9;Run this if you&apos;re no longer using this object.
]==]

local function CreateAutoSizeLabel(Label)
&#9;local Class = {}
&#9;if not Label then
&#9;&#9;Label = Create&apos;TextLabel&apos;{
&#9;&#9;&#9;Name = &quot;AutoSizeLabel&quot;;
&#9;&#9;&#9;BackgroundColor3 = Color3.new(0,0,0);
&#9;&#9;&#9;BorderColor3 = Color3.new(1,1,1);
&#9;&#9;&#9;TextColor3 = Color3.new(1,1,1);
&#9;&#9;&#9;FontSize = &quot;Size14&quot;;
&#9;&#9;&#9;Font = &quot;ArialBold&quot;;
&#9;&#9;}
&#9;end
&#9;Class.GUI = Label
&#9;
&#9;local pt,pr,pb,pl = 0,0,0,0
&#9;local t,r,b,l = 0,0,0,0
&#9;local lx,ly
&#9;local function Update()
&#9;&#9;local bounds = Label.TextBounds
&#9;&#9;local x = lx or bounds.x+l+r
&#9;&#9;local y = ly or bounds.y+t+b
&#9;&#9;Label.Size = UDim2.new(0,x,0,y)
&#9;end
&#9;Class.Update = Update
&#9;
&#9;local function reflectPadding()
&#9;&#9;t,r,b,l = pt,pr,pb,pl
&#9;&#9;if Label.TextXAlignment == Enum.TextXAlignment.Left then
&#9;&#9;&#9;l = 0
&#9;&#9;elseif Label.TextXAlignment == Enum.TextXAlignment.Right then
&#9;&#9;&#9;r = 0
&#9;&#9;end
&#9;&#9;if Label.TextYAlignment == Enum.TextYAlignment.Top then
&#9;&#9;&#9;t = 0
&#9;&#9;elseif Label.TextYAlignment == Enum.TextYAlignment.Bottom then
&#9;&#9;&#9;b = 0
&#9;&#9;end
&#9;&#9;Update()
&#9;end

&#9;local function SetPadding(nt,nr,nb,nl)
&#9;&#9;if nl then
&#9;&#9;&#9;pt,pr,pb,pl = nt,nr,nb,nl
&#9;&#9;elseif nb then
&#9;&#9;&#9;pt,pr,pb,pl = nt,nr,nb,nr
&#9;&#9;elseif nr then
&#9;&#9;&#9;pt,pr,pb,pl = nt,nr,nt,nr
&#9;&#9;elseif nt then
&#9;&#9;&#9;pt,pr,pb,pl = nt,nt,nt,nt
&#9;&#9;else
&#9;&#9;&#9;pt,pr,pb,pl = 0,0,0,0
&#9;&#9;end
&#9;&#9;reflectPadding()
&#9;end
&#9;Class.SetPadding = SetPadding
&#9;
&#9;local function LockAxis(x,y)
&#9;&#9;lx,ly = x,y
&#9;&#9;Update()
&#9;end
&#9;Class.LockAxis = LockAxis
&#9;
&#9;local con = Label.Changed:connect(function(p)
&#9;&#9;if p == &quot;TextBounds&quot; then
&#9;&#9;&#9;Update()
&#9;&#9;elseif p == &quot;TextXAlignment&quot; or p == &quot;TextYAlignment&quot; then
&#9;&#9;&#9;reflectPadding()
&#9;&#9;end
&#9;end)
&#9;
&#9;local function Destroy()
&#9;&#9;for k in pairs(Class) do
&#9;&#9;&#9;Class[k] = nil
&#9;&#9;end
&#9;&#9;con:disconnect()
&#9;end
&#9;Class.Destroy = Destroy
&#9;
&#9;Update()
&#9;
&#9;return Class,Label
end

lib.AutoSizeLabel = CreateAutoSizeLabel

--[[DEPEND:]]

doc[&quot;TruncatingLabel&quot;] = [==[
TruncatingLabel ( GuiText `label` ) [constructor]
&#9;returns: GuiText `label`

Creates a label that displays truncated text.
When the label is hovered over, the full text is displayed.

Arguments:
&#9;`label`
&#9;&#9;An object that will be turned into a truncating label.
&#9;&#9;Optional; defaults to a new GuiText

Returns:
&#9;`label`
&#9;&#9;The label GUI.
]==]

local function CreateTruncatingLabel(Label)
&#9;if not Label then
&#9;&#9;Label = Create&apos;TextLabel&apos;{
&#9;&#9;&#9;BackgroundColor3 = Color3.new(0,0,0);
&#9;&#9;&#9;BorderColor3 = Color3.new(1,1,1);
&#9;&#9;&#9;TextColor3 = Color3.new(1,1,1);
&#9;&#9;&#9;FontSize = &quot;Size14&quot;;
&#9;&#9;&#9;Font = &quot;ArialBold&quot;;
&#9;&#9;&#9;Text = &quot;&quot;;
&#9;&#9;}
&#9;end
&#9;Label.ClipsDescendants = true;

&#9;local FullTextLabel = Create&apos;TextLabel&apos;{
&#9;&#9;Name = &quot;FullTextLabel&quot;;
&#9;&#9;BackgroundColor3 = Label.BackgroundColor3;
&#9;&#9;BorderColor3 = Label.BorderColor3;
&#9;&#9;TextColor3 = Label.TextColor3;
&#9;&#9;FontSize = Label.FontSize;
&#9;&#9;Font = Label.Font;
&#9;&#9;Text = Label.Text;
&#9;&#9;Visible = false;
&#9;&#9;ZIndex = 9;
&#9;&#9;Parent = Label;
&#9;}

&#9;local ex = {
&#9;&#9;Name = true;
&#9;&#9;Parent = true;
&#9;&#9;Position = true;
&#9;&#9;Size = true;
&#9;&#9;ClipsDescendants = true;
&#9;&#9;ZIndex = true;
&#9;&#9;Visible = true;
&#9;}

&#9;local function pset(t,k,v)
&#9;&#9;t[k] = v
&#9;end

&#9;Label.Changed:connect(function(p)
&#9;&#9;if not ex[p] then
&#9;&#9;&#9;pcall(pset,FullTextLabel,p,Label[p])
&#9;&#9;end
&#9;end)

&#9;Label.MouseEnter:connect(function()
&#9;&#9;local align = Label.TextXAlignment
&#9;&#9;local bound = math.max(Label.TextBounds.x+4,Label.AbsoluteSize.x)
&#9;&#9;if align == Enum.TextXAlignment.Center then
&#9;&#9;&#9;FullTextLabel.Size = UDim2.new(0,bound,1,0)
&#9;&#9;&#9;FullTextLabel.Position = UDim2.new(0.5,-bound/2,0,0)
&#9;&#9;elseif align == Enum.TextXAlignment.Right then
&#9;&#9;&#9;FullTextLabel.Size = UDim2.new(0,bound,1,0)
&#9;&#9;&#9;FullTextLabel.Position = UDim2.new(1,-bound,0,0)
&#9;&#9;else
&#9;&#9;&#9;FullTextLabel.Size = UDim2.new(0,bound,1,0)
&#9;&#9;&#9;FullTextLabel.Position = UDim2.new(0,0,0,0)
&#9;&#9;end
&#9;&#9;Label.ClipsDescendants = false
&#9;&#9;SetZIndex(FullTextLabel,9)
&#9;&#9;FullTextLabel.Visible = true
&#9;end)

&#9;FullTextLabel.MouseLeave:connect(function()
&#9;&#9;FullTextLabel.Visible = false
&#9;&#9;Label.ClipsDescendants = true
&#9;end)

&#9;return Label
end

lib.TruncatingLabel = CreateTruncatingLabel

--[[DEPEND:]]

doc[&quot;DockedSide&quot;] = [==[
DockedSide [enum]

Represents a side that a dockable was docked on.

Enumerators:
&#9;0:None
&#9;&#9;Represents no sides of a dockable
&#9;1:Left
&#9;&#9;Represents the left side of a dockable
&#9;2:Right
&#9;&#9;Represents the right side of a dockable
&#9;4:Top
&#9;&#9;Represents the top side of a dockable
&#9;8:Bottom
&#9;&#9;Represents the bottom side of a dockable
]==]

local DockedSide = {
&#9;None = 0;
&#9;Left = 1;
&#9;Top = 2;
&#9;Right = 4;
&#9;Bottom = 8;
&#9;[0] = &apos;None&apos;;
&#9;[1] = &apos;Left&apos;;
&#9;[2] = &apos;Top&apos;;
&#9;[4] = &apos;Right&apos;;
&#9;[8] = &apos;Bottom&apos;;
}
lib.DockedSide = DockedSide

--[===[
doc[&quot;DockedSide&quot;] = [==[
[enum] DockedSide

Represents a side that a dockable was docked on.

Enumerators:
&#9;Left
&#9;&#9;Represents the left side of a dockable
&#9;Right
&#9;&#9;Represents the right side of a dockable
&#9;Top
&#9;&#9;Represents the top side of a dockable
&#9;Bottom
&#9;&#9;Represents the bottom side of a dockable

&#9;XAxis
&#9;&#9;Represents docking on the XAxis
&#9;&#9;Equal to Left and Right
&#9;YAxis
&#9;&#9;Represents docking on the YAxis
&#9;&#9;Equal to Top and Bottom
&#9;Inner
&#9;&#9;Represents docking on the inner sides (towards 0,0)
&#9;&#9;Equal to Left and Top
&#9;Outer
&#9;&#9;Represents docking on the outer sides (away from 0,0)
&#9;&#9;Equal to Right and Bottom

&#9;None
&#9;&#9;Represents no sides, or neither the X nor Y axis
&#9;&#9;Equal to Center
&#9;Center
&#9;&#9;Represents no docking, or docked on neither the inner or outer sides
&#9;&#9;Equal to None

Value Casts:
&#9;-1, &quot;-1&quot;
&#9;&#9;-&gt; Inner
&#9;0, &quot;0&quot;
&#9;&#9;-&gt; Center
&#9;1, &quot;1&quot;
&#9;&#9;-&gt; Outer
&#9;&quot;x&quot;, &quot;X&quot;
&#9;&#9;-&gt; XAxis
&#9;&quot;y&quot;, &quot;Y&quot;
&#9;&#9;-&gt; YAxis
&#9;&quot;&quot; (empty string)
&#9;&#9;-&gt; None
]==]

local DockedSide do
&#9;local enum = setmetatable({__type = &quot;DockedSide&quot;},ENUM_MT)
&#9;local mt = {
&#9;&#9;__eq = function(a,b)
&#9;&#9;&#9;local n = b[1]
&#9;&#9;&#9;for i = 1,#a do
&#9;&#9;&#9;&#9;if a[i] == n then
&#9;&#9;&#9;&#9;&#9;return true
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;return false
&#9;&#9;end;
&#9;&#9;__tostring = function(e)
&#9;&#9;&#9;return e.__type..&apos;.&apos;..e[1]
&#9;&#9;end;
&#9;}

---- Enumerators
&#9;enum.Left&#9;= setmetatable({__type = enum.__type, &apos;Left&apos;,&apos;XAxis&apos;,&apos;Inner&apos;},mt)
&#9;enum.Right&#9;= setmetatable({__type = enum.__type, &apos;Right&apos;,&apos;XAxis&apos;,&apos;Outer&apos;},mt)
&#9;enum.Top&#9;= setmetatable({__type = enum.__type, &apos;Top&apos;,&apos;YAxis&apos;,&apos;Inner&apos;},mt)
&#9;enum.Bottom&#9;= setmetatable({__type = enum.__type, &apos;Bottom&apos;,&apos;YAxis&apos;,&apos;Outer&apos;},mt)

&#9;enum.XAxis&#9;= setmetatable({__type = enum.__type, &apos;XAxis&apos;,&apos;Left&apos;,&apos;Right&apos;},mt)
&#9;enum.YAxis&#9;= setmetatable({__type = enum.__type, &apos;YAxis&apos;,&apos;Top&apos;,&apos;Bottom&apos;},mt)
&#9;enum.Inner&#9;= setmetatable({__type = enum.__type, &apos;Inner&apos;,&apos;Left&apos;,&apos;Top&apos;},mt)
&#9;enum.Outer&#9;= setmetatable({__type = enum.__type, &apos;Outer&apos;,&apos;Right&apos;,&apos;Bottom&apos;},mt)

&#9;enum.None&#9;= setmetatable({__type = enum.__type, &apos;None&apos;,&apos;Center&apos;},mt)
&#9;enum.Center&#9;= setmetatable({__type = enum.__type, &apos;Center&apos;,&apos;None&apos;},mt)

---- Value Casts
&#9;enum[&apos;x&apos;] = enum.XAxis
&#9;enum[&apos;y&apos;] = enum.YAxis
&#9;enum[&apos;&apos;] = enum.None

&#9;enum[&apos;X&apos;] = enum.XAxis
&#9;enum[&apos;Y&apos;] = enum.YAxis

&#9;enum[-1] = enum.Inner
&#9;enum[0] = enum.Center
&#9;enum[1] = enum.Outer

&#9;enum[&apos;-1&apos;] = enum.Inner
&#9;enum[&apos;0&apos;] = enum.Center
&#9;enum[&apos;1&apos;] = enum.Outer

---- Finish
&#9;DockedSide = enum
&#9;lib.DockedSide = enum
end
]===]

doc[&quot;DockContainer&quot;] = [==[
DockContainer ( GuiBase `container` ) [constructor]
&#9;returns: DockContainer `object`, GuiBase `container`

Creates a container whose children can snap to each others&apos; edges when dragged (referred to as &quot;dockables&quot;).
Only children that are GuiButtons will be made draggable.
However, they will still dock to any sibling that is a GuiObject.

Arguments:
&#9;`container`
&#9;&#9;An object that becomes the dock container.
&#9;&#9;Optional; defaults to a new ScreenGui

Returns:
&#9;`object`
&#9;&#9;The DockContainer object.

&#9;`container`
&#9;&#9;The container GUI.

DockContainer Class:
&#9;This class contains the following members:

&#9;Readonly:
&#9;&#9;GUI
&#9;&#9;&#9;The container GUI.

&#9;Fields:
&#9;&#9;SnapWidth
&#9;&#9;&#9;A number indicating the space (in pixels) required between the edges of two dockables before one snaps to the other.
&#9;&#9;&#9;Initially, this value is 16.

&#9;&#9;ConstrainToContainer
&#9;&#9;&#9;A bool indicating whether dockables can&apos;t be dragged outside the container.
&#9;&#9;&#9;Initially, this value is false.

&#9;&#9;SnapToContainerEdge
&#9;&#9;&#9;A bool indicating whether dockables can snap to the edge of the container.
&#9;&#9;&#9;Only applies if ConstrainToContainer is false.
&#9;&#9;&#9;Initially, this value is true.

&#9;&#9;PositionScaled
&#9;&#9;&#9;A bool indicating whether the position of dockables are set as a Scale or an Offset.
&#9;&#9;&#9;Initially, this value is true.

&#9;&#9;DragZIndex
&#9;&#9;&#9;A number indicating the amount to increase the ZIndex of a dockable by when it is dragged.
&#9;&#9;&#9;Initially, this value is 1.

&#9;Methods:
&#9;&#9;InvokeDrag ( GuiObject `dragged`, Vector2 `mouse_offset` )
&#9;&#9;&#9;Starts dragging `dragged` as if it were clicked.
&#9;&#9;&#9;`mouse_offset` is the position of the mouse when it &quot;clicked&quot; the object, in relation to the object.

&#9;&#9;StopDrag ( )
&#9;&#9;&#9;Stops the dragging of an object, if there is an object being dragged.

&#9;Callbacks:
&#9;&#9;DragBeginCallback ( GuiObject `dragged`, Vector2 `mouse_offset` )
&#9;&#9;&#9;Called before an object starts being dragged.
&#9;&#9;&#9;`dragged` is the object being dragged.
&#9;&#9;&#9;`mouse_offset` is the position of the mouse, in relation to the object.
&#9;&#9;&#9;If the function returns false, then the drag will be canceled.

&#9;&#9;DragCallback ( GuiObject `dragged`, Vector2 `mouse_offset` )
&#9;&#9;&#9;Called when an object is dragged, before the object updates.
&#9;&#9;&#9;`dragged` is the object being dragged.
&#9;&#9;&#9;`mouse_offset` is the location of the mouse when it started dragging, in relation to the object.
&#9;&#9;&#9;If the function returns false, then the object&apos;s position will not be updated.

&#9;&#9;DockCallback ( GuiObject `dragged`, GuiObject `docked`, DockedSide `docked_side` )
&#9;&#9;&#9;Called before the currently dragged object snaps to another dockable.
&#9;&#9;&#9;`dragged` is the current object being dragged.
&#9;&#9;&#9;`docked` is the dockable that `dragged` snapped to.
&#9;&#9;&#9;`docked_side` is the side of `dragged` that was docked on.
&#9;&#9;&#9;Note that `docked` can be the container, if objects are allowed to snap to it.
&#9;&#9;&#9;If the function returns false, then the snap to the dockable will be canceled.

&#9;Events:
&#9;&#9;DragBegin ( GuiObject `dragged`, Vector2 `mouse_offset` )
&#9;&#9;&#9;Fired after an object start being dragged.
&#9;&#9;&#9;`dragged` is the object being dragged.
&#9;&#9;&#9;`mouse_offset` is the position of the mouse, in relation to the object.

&#9;&#9;DragStopped ( GuiObject `dragged`, Vector2 `mouse_pos` )
&#9;&#9;&#9;Called after an object stops being dragged.
&#9;&#9;&#9;`dragged` is the object that was dragged.
&#9;&#9;&#9;`mouse_offset` is the position of the mouse when it started dragging, in relation to the object.

&#9;&#9;ObjectDocked ( GuiObject `dragged`, GuiObject `docked`, DockedSide `docked_side` )
&#9;&#9;&#9;Fired after the currently dragged objects snaps to another dockable.
&#9;&#9;&#9;`dragged` is the current object being dragged.
&#9;&#9;&#9;`docked` is the dockable that `dragged` snapped to.
&#9;&#9;&#9;`docked_side` is the side of `dragged` that was docked on.
&#9;&#9;&#9;Note that `docked` can be the container, if objects are allowed to snap to it.
]==]

local function CreateDockContainer(Container)
&#9;if not Container then
&#9;&#9;Container = Instance.new(&quot;ScreenGui&quot;)
&#9;&#9;Container.Name = &quot;DockContainer&quot;
&#9;end

&#9;local Class = {
&#9;&#9;GUI = Container;
&#9;&#9;SnapWidth = 16;
&#9;&#9;SnapToEdge = true;
&#9;&#9;ConstrainToContainer = false;
&#9;&#9;PositionScaled = true;
&#9;&#9;DragZIndex = 1;
&#9;}

&#9;local DragEvent = {}
&#9;local MouseDrag = Create&apos;ImageButton&apos;{
&#9;&#9;Active = false;
&#9;&#9;Size = UDim2.new(1.5, 0, 1.5, 0);
&#9;&#9;AutoButtonColor = false;
&#9;&#9;BackgroundTransparency = 1;
&#9;&#9;Name = &quot;MouseDrag&quot;;
&#9;&#9;Position = UDim2.new(-0.25, 0, -0.25, 0);
&#9;&#9;ZIndex = 10;
&#9;}

&#9;local function stopDragDefault()
&#9;&#9;return false,&quot;no object is being dragged&quot;
&#9;end
&#9;Class.StopDrag = stopDragDefault

&#9;local eventDragBegin = Instance.new(&quot;BindableEvent&quot;)
&#9;Class.DragBegin = eventDragBegin.Event

&#9;local eventDragStopped = Instance.new(&quot;BindableEvent&quot;)
&#9;Class.DragStopped = eventDragStopped.Event

&#9;local eventObjectDocked = Instance.new(&quot;BindableEvent&quot;)
&#9;Class.ObjectDocked = eventObjectDocked.Event

&#9;local function InvokeDrag(dockable,mouse_offset)
&#9;&#9;if Class.DragBeginCallback then
&#9;&#9;&#9;if Class.DragBeginCallback(dockable,mouse_offset)
&#9;&#9;&#9;== false then return end
&#9;&#9;end

&#9;&#9;local drag_con
&#9;&#9;local up_con

&#9;&#9;drag_con = MouseDrag.MouseMoved:connect(function(x,y)
&#9;&#9;&#9;if Class.DragCallback then
&#9;&#9;&#9;&#9;if Class.DragCallback(dockable,mouse_offset)
&#9;&#9;&#9;&#9;== false then return end
&#9;&#9;&#9;end

&#9;&#9;&#9;local snapWidth = Class.SnapWidth

&#9;&#9;&#9;local cApos = Container.AbsolutePosition
&#9;&#9;&#9;local Apos = Vector2.new(x,y) - mouse_offset

&#9;&#9;&#9;local cAsize = Container.AbsoluteSize
&#9;&#9;&#9;local Asize = dockable.AbsoluteSize

&#9;&#9;&#9;local APX,APY = Apos.x,Apos.y
&#9;&#9;&#9;local ASX,ASY = Asize.x,Asize.y

&#9;&#9;&#9;x = Apos.x - cApos.x
&#9;&#9;&#9;y = Apos.y - cApos.y

&#9;&#9;&#9;local docked_x,docked_y
&#9;&#9;&#9;local side_x,side_y

&#9;&#9;&#9;if Class.DockCallback then
&#9;&#9;&#9;&#9;for i,sibling in pairs(Container:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;if sibling:IsA&quot;GuiObject&quot; and sibling ~= dockable and sibling.Visible then
&#9;&#9;&#9;&#9;&#9;&#9;local sApos = sibling.AbsolutePosition
&#9;&#9;&#9;&#9;&#9;&#9;local sAsize = sibling.AbsoluteSize

&#9;&#9;&#9;&#9;&#9;&#9;if Apos.x + Asize.x &gt;= sApos.x and Apos.x &lt;= sApos.x + sAsize.x then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if math.abs((Apos.y + Asize.y) - sApos.y) &lt;= snapWidth then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if Class.DockCallback(dockable,sibling,DockedSide.Bottom) ~= false then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;-- docked on bottom side
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;y = sApos.y - cApos.y - Asize.y
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;eventObjectDocked:Fire(dockable,sibling,DockedSide.Bottom)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;elseif math.abs(Apos.y - (sApos.y + sAsize.y)) &lt;= snapWidth then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if Class.DockCallback(dockable,sibling,DockedSide.Top) ~= false then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;-- docked on top side
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;y = sApos.y - cApos.y + sAsize.y
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;eventObjectDocked:Fire(dockable,sibling,DockedSide.Top)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;if Apos.y + Asize.y &gt;= sApos.y and Apos.y &lt;= sApos.y + sAsize.y then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if math.abs((Apos.x + Asize.x) - sApos.x) &lt;= snapWidth then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if Class.DockCallback(dockable,sibling,DockedSide.Right) ~= false then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;-- docked on right side
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;x = sApos.x - cApos.x - Asize.x
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;eventObjectDocked:Fire(dockable,sibling,DockedSide.Right)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;elseif math.abs(Apos.x - (sApos.x + sAsize.x)) &lt;= snapWidth then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if Class.DockCallback(dockable,sibling,DockedSide.Left) ~= false then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;-- docked on left side
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;x = sApos.x - cApos.x + sAsize.x
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;eventObjectDocked:Fire(dockable,sibling,DockedSide.Left)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if Class.ConstrainToContainer then
&#9;&#9;&#9;&#9;&#9;if APY &lt; cApos.y then
&#9;&#9;&#9;&#9;&#9;&#9;if Class.DockCallback(dockable,Container,DockedSide.Top) ~= false then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;-- docked on top side
&#9;&#9;&#9;&#9;&#9;&#9;&#9;y = 0
&#9;&#9;&#9;&#9;&#9;&#9;&#9;eventObjectDocked:Fire(dockable,Container,DockedSide.Top)
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;elseif APY + ASY &gt; cApos.y + cAsize.y then
&#9;&#9;&#9;&#9;&#9;&#9;if Class.DockCallback(dockable,Container,DockedSide.Bottom) ~= false then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;-- docked on bottom side
&#9;&#9;&#9;&#9;&#9;&#9;&#9;y = cAsize.y - ASY
&#9;&#9;&#9;&#9;&#9;&#9;&#9;eventObjectDocked:Fire(dockable,Container,DockedSide.Bottom)
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;if APX &lt; cApos.x then
&#9;&#9;&#9;&#9;&#9;&#9;if Class.DockCallback(dockable,Container,DockedSide.Left) ~= false then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;-- docked on left side
&#9;&#9;&#9;&#9;&#9;&#9;&#9;x = 0
&#9;&#9;&#9;&#9;&#9;&#9;&#9;eventObjectDocked:Fire(dockable,Container,DockedSide.Left)
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;elseif APX + ASX &gt; cApos.x + cAsize.x then
&#9;&#9;&#9;&#9;&#9;&#9;if Class.DockCallback(dockable,Container,DockedSide.Right) ~= false then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;-- docked on right side
&#9;&#9;&#9;&#9;&#9;&#9;&#9;x = cAsize.x - ASX
&#9;&#9;&#9;&#9;&#9;&#9;&#9;eventObjectDocked:Fire(dockable,Container,DockedSide.Right)
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;elseif Class.SnapToEdge then
&#9;&#9;&#9;&#9;&#9;if math.abs(APY - cApos.y) &lt;= snapWidth then
&#9;&#9;&#9;&#9;&#9;&#9;if Class.DockCallback(dockable,Container,DockedSide.Top) ~= false then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;-- docked on top side
&#9;&#9;&#9;&#9;&#9;&#9;&#9;y = 0
&#9;&#9;&#9;&#9;&#9;&#9;&#9;eventObjectDocked:Fire(dockable,Container,DockedSide.Top)
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;elseif math.abs((APY+ASY) - (cApos.y+cAsize.y)) &lt;= snapWidth then
&#9;&#9;&#9;&#9;&#9;&#9;if Class.DockCallback(dockable,Container,DockedSide.Bottom) ~= false then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;-- docked on bottom side
&#9;&#9;&#9;&#9;&#9;&#9;&#9;y = cAsize.y - ASY
&#9;&#9;&#9;&#9;&#9;&#9;&#9;eventObjectDocked:Fire(dockable,Container,DockedSide.Bottom)
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;if math.abs(APX - cApos.x) &lt;= snapWidth then
&#9;&#9;&#9;&#9;&#9;&#9;if Class.DockCallback(dockable,Container,DockedSide.Left) ~= false then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;-- docked on left side
&#9;&#9;&#9;&#9;&#9;&#9;&#9;x = 0
&#9;&#9;&#9;&#9;&#9;&#9;&#9;eventObjectDocked:Fire(dockable,Container,DockedSide.Left)
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;elseif math.abs((APX+ASX) - (cApos.x+cAsize.x)) &lt;= snapWidth then
&#9;&#9;&#9;&#9;&#9;&#9;if Class.DockCallback(dockable,Container,DockedSide.Right) ~= false then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;-- docked on right side
&#9;&#9;&#9;&#9;&#9;&#9;&#9;x = cAsize.x - ASX
&#9;&#9;&#9;&#9;&#9;&#9;&#9;eventObjectDocked:Fire(dockable,Container,DockedSide.Right)
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;for i,sibling in pairs(Container:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;if sibling:IsA&quot;GuiObject&quot; and sibling ~= dockable and sibling.Visible then
&#9;&#9;&#9;&#9;&#9;&#9;local sApos = sibling.AbsolutePosition
&#9;&#9;&#9;&#9;&#9;&#9;local sAsize = sibling.AbsoluteSize

&#9;&#9;&#9;&#9;&#9;&#9;if Apos.x + Asize.x &gt;= sApos.x and Apos.x &lt;= sApos.x + sAsize.x then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if math.abs((Apos.y + Asize.y) - sApos.y) &lt;= snapWidth then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;y = sApos.y - cApos.y - Asize.y
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;eventObjectDocked:Fire(dockable,sibling,DockedSide.Bottom)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;elseif math.abs(Apos.y - (sApos.y + sAsize.y)) &lt;= snapWidth then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;y = sApos.y - cApos.y + sAsize.y
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;eventObjectDocked:Fire(dockable,sibling,DockedSide.Top)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;if Apos.y + Asize.y &gt;= sApos.y and Apos.y &lt;= sApos.y + sAsize.y then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if math.abs((Apos.x + Asize.x) - sApos.x) &lt;= snapWidth then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;x = sApos.x - cApos.x - Asize.x
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;eventObjectDocked:Fire(dockable,sibling,DockedSide.Right)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;elseif math.abs(Apos.x - (sApos.x + sAsize.x)) &lt;= snapWidth then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;x = sApos.x - cApos.x + sAsize.x
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;eventObjectDocked:Fire(dockable,sibling,DockedSide.Left)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if Class.ConstrainToContainer then
&#9;&#9;&#9;&#9;&#9;if APY &lt; cApos.y then
&#9;&#9;&#9;&#9;&#9;&#9;y = 0
&#9;&#9;&#9;&#9;&#9;&#9;eventObjectDocked:Fire(dockable,Container,DockedSide.Top)
&#9;&#9;&#9;&#9;&#9;elseif APY + ASY &gt; cApos.y + cAsize.y then
&#9;&#9;&#9;&#9;&#9;&#9;y = cAsize.y - ASY
&#9;&#9;&#9;&#9;&#9;&#9;eventObjectDocked:Fire(dockable,Container,DockedSide.Bottom)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;if APX &lt; cApos.x then
&#9;&#9;&#9;&#9;&#9;&#9;x = 0
&#9;&#9;&#9;&#9;&#9;&#9;eventObjectDocked:Fire(dockable,Container,DockedSide.Left)
&#9;&#9;&#9;&#9;&#9;elseif APX + ASX &gt; cApos.x + cAsize.x then
&#9;&#9;&#9;&#9;&#9;&#9;x = cAsize.x - ASX
&#9;&#9;&#9;&#9;&#9;&#9;eventObjectDocked:Fire(dockable,Container,DockedSide.Right)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;elseif Class.SnapToEdge then
&#9;&#9;&#9;&#9;&#9;if math.abs(APY - cApos.y) &lt;= snapWidth then
&#9;&#9;&#9;&#9;&#9;&#9;y = 0
&#9;&#9;&#9;&#9;&#9;&#9;eventObjectDocked:Fire(dockable,Container,DockedSide.Top)
&#9;&#9;&#9;&#9;&#9;elseif math.abs((APY+ASY) - (cApos.y+cAsize.y)) &lt;= snapWidth then
&#9;&#9;&#9;&#9;&#9;&#9;y = cAsize.y - ASY
&#9;&#9;&#9;&#9;&#9;&#9;eventObjectDocked:Fire(dockable,Container,DockedSide.Bottom)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;if math.abs(APX - cApos.x) &lt;= snapWidth then
&#9;&#9;&#9;&#9;&#9;&#9;x = 0
&#9;&#9;&#9;&#9;&#9;&#9;eventObjectDocked:Fire(dockable,Container,DockedSide.Left)
&#9;&#9;&#9;&#9;&#9;elseif math.abs((APX+ASX) - (cApos.x+cAsize.x)) &lt;= snapWidth then
&#9;&#9;&#9;&#9;&#9;&#9;x = cAsize.x - ASX
&#9;&#9;&#9;&#9;&#9;&#9;eventObjectDocked:Fire(dockable,Container,DockedSide.Right)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end

&#9;&#9;&#9;local sx,sy = 0,0
&#9;&#9;&#9;if Class.PositionScaled then
&#9;&#9;&#9;&#9;sx = x/cAsize.x
&#9;&#9;&#9;&#9;sy = y/cAsize.y
&#9;&#9;&#9;&#9;x = 0
&#9;&#9;&#9;&#9;y = 0
&#9;&#9;&#9;end
&#9;&#9;&#9;dockable.Position = UDim2.new(sx,x,sy,y)
&#9;&#9;end)
&#9;&#9;local zIndex = dockable.ZIndex
&#9;&#9;local function mouse_up()
&#9;&#9;&#9;Class.StopDrag = stopDragDefault
&#9;&#9;&#9;MouseDrag.Parent = nil
&#9;&#9;&#9;drag_con:disconnect(); drag_con = nil
&#9;&#9;&#9;up_con:disconnect(); drag = nil
&#9;&#9;&#9;SetZIndex(dockable,zIndex)
&#9;&#9;&#9;eventDragStopped:Fire(dockable,mouse_offset)
&#9;&#9;&#9;return true
&#9;&#9;end
&#9;&#9;up_con = MouseDrag.MouseButton1Up:connect(mouse_up)
&#9;&#9;SetZIndex(dockable,zIndex + Class.DragZIndex)
&#9;&#9;MouseDrag.Parent = GetScreen(dockable)
&#9;&#9;Class.StopDrag = mouse_up
&#9;&#9;eventDragBegin:Fire(dockable,mouse_offset)
&#9;end
&#9;Class.InvokeDrag = InvokeDrag

&#9;local function ChildAdded(child)
&#9;&#9;if child:IsA&quot;GuiButton&quot; then
&#9;&#9;&#9;DragEvent[child] = child.MouseButton1Down:connect(function(x,y)
&#9;&#9;&#9;&#9;InvokeDrag(child,Vector2.new(x,y) - child.AbsolutePosition)
&#9;&#9;&#9;end)
&#9;&#9;end
&#9;end

&#9;local function ChildRemoved(child)
&#9;&#9;if DragEvent[child] then
&#9;&#9;&#9;DragEvent[child]:disconnect()
&#9;&#9;&#9;DragEvent[child] = nil
&#9;&#9;end
&#9;end

&#9;Container.ChildAdded:connect(ChildAdded)
&#9;Container.ChildRemoved:connect(ChildRemoved)

&#9;for i,dockable in pairs(Container:GetChildren()) do
&#9;&#9;ChildAdded(dockable)
&#9;end

&#9;return Class,Container
end

lib.DockContainer = CreateDockContainer

--[[DEPEND:
Stylist.lua;
]]

doc[&quot;Graphic&quot;] = [==[
Graphic ( string `polygon`, Vector2 `size`, table `style`, table `config` ) [constructor]
&#9;returns Graphic `object`, Frame `graphic`

Creates a basic GUI graphic from a polygon or specified preset.

Arguments:
&#9;`polygon`
&#9;&#9;May be a string, referencing a preset (see Presets).
&#9;&#9;May also be a table that contains two tables, which represent the x and y coordinates (respectively) of each point in the polygon.
&#9;&#9;If coordinates are not between 0 and 1, a 3rd entry may be specified, which is the number to divide each coordinate by.

&#9;`size`
&#9;&#9;The size, in pixels, of the graphic.
&#9;&#9;May also be a table that contains the x and y size of the graphic.

&#9;`style`
&#9;&#9;A table that will be used with the graphic&apos;s Stylist, which controls the appearance of the graphic.
&#9;&#9;Optional; defaults to an empty table.
&#9;&#9;Note that the graphic essentially shares the same properties as a Frame object.
&#9;&#9;So, if [&quot;BackgroundColor3&quot;] = Color3.new(1,1,1) were in the table, the graphic&apos;s color would be set to white.

&#9;`config`
&#9;&#9;A table that alters how the graphic will be drawn.
&#9;&#9;It can contain the following possible values:
&#9;&#9;&#9;method
&#9;&#9;&#9;&#9;May be &quot;scaled&quot; or &quot;static&quot;.
&#9;&#9;&#9;&#9;Determines if pixels will be scaled to the parent or static.
&#9;&#9;&#9;round
&#9;&#9;&#9;&#9;May be &quot;half&quot;, &quot;ceil&quot;, or &quot;floor&quot;.
&#9;&#9;&#9;&#9;If static method is chosen, this determines how to round each pixel.
&#9;&#9;&#9;offset
&#9;&#9;&#9;&#9;A Vector2. This offsets the polygon on the final image.

Returns:
&#9;`object`
&#9;&#9;The Graphic object.

&#9;`graphic`
&#9;&#9;The Frame object which makes up the graphic.

Graphic Class:
&#9;This class contains the following members:

&#9;Readonly:
&#9;&#9;GUI
&#9;&#9;&#9;The Frame object which makes up the graphic.

&#9;&#9;Style
&#9;&#9;&#9;The Stylist object used to change the appearance of the graphic.
&#9;&#9;
&#9;Methods:
&#9;&#9;Destroy ( )
&#9;&#9;&#9;Releases the resources used by this object.
&#9;&#9;&#9;Run this if you&apos;re no longer using this object.


Presets:
&#9;arrow-up
&#9;arrow-down
&#9;arrow-left
&#9;arrow-right
&#9;check-mark
&#9;pin
&#9;wrench
&#9;cross
&#9;grip
&#9;vgrip
]==]

--[[
&#9;polygon:
&#9;&#9;string:&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;a reference to a predefined polygon
&#9;&#9;table: {Vector2, ...}&#9;&#9;&#9;&#9;&#9;a list of Vector2 points
&#9;&#9;table: {{number, ...},{number, ...}}&#9;two lists of x and y axes
&#9;size
&#9;&#9;table: {number, number}
&#9;&#9;Vector2
&#9;style
&#9;config
&#9;&#9;method&#9;= scaled|static&#9;&#9;&#9;Whether pixels will be scaled to the parent or static
&#9;&#9;round&#9;= ceil|floor|half&#9;&#9;If static method is chosen, this determines how to round each pixel
&#9;&#9;offset&#9;= Vector2&#9;&#9;&#9;&#9;Offsets the polygon on the final image. The polygon will be clipped so that it doesn&apos;t render outside the image region
]]

--[[
local polyX = {3,8,9,13,13,10,8,6,2}
local polyY = {2,6,2,9,13,10,15,2,10}
local polyCorners = 9
]]

local internal_polygon = {
&#9;[&quot;arrow-up&quot;] = {
&#9;&#9;{2,4,6};
&#9;&#9;{5,3,5};
&#9;&#9;8;
&#9;};
&#9;[&quot;arrow-down&quot;] = {
&#9;&#9;{2,4,6};
&#9;&#9;{3,5,3};
&#9;&#9;8;
&#9;};
&#9;[&quot;arrow-left&quot;] = {
&#9;&#9;{5,3,5};
&#9;&#9;{2,4,6};
&#9;&#9;8;
&#9;};
&#9;[&quot;arrow-right&quot;] = {
&#9;&#9;{3,5,3};
&#9;&#9;{2,4,6};
&#9;&#9;8;
&#9;};
&#9;[&quot;check-mark&quot;] = {
&#9;&#9;{1,3,7,7,3,1};
&#9;&#9;{3,5,1,3,7,5};
&#9;&#9;8;
&#9;};
&#9;[&quot;pin&quot;] = {
&#9;&#9;{4,11,11,12,12,8,8,7,7,3,3,4, 4,5,7,7,5,5};
&#9;&#9;{2,2,9,9,10,10,14,14,10,10,9,9, 2,3,3,9,9,3};
&#9;&#9;16;
&#9;};
&#9;[&quot;wrench&quot;] = {
&#9;&#9;{&#9;2;&#9;8;&#9;18;&#9;25;&#9;29;&#9;29;&#9;24;&#9;20;&#9;17;&#9;17;&#9;22;&#9;16;&#9;12;&#9;12};
&#9;&#9;{&#9;24;&#9;30;&#9;20;&#9;20;&#9;16;&#9;10;&#9;15;&#9;15;&#9;12;&#9;8;&#9;3;&#9;3;&#9;7;&#9;14};
&#9;&#9;32,
&#9;};
&#9;[&quot;cross&quot;] = {
&#9;&#9;{1;&#9;2;&#9;4;&#9;6;&#9;7;&#9;7;&#9;5;&#9;7;&#9;7;&#9;6;&#9;4;&#9;2;&#9;1;&#9;1;&#9;3;&#9;1};
&#9;&#9;{1;&#9;1;&#9;3;&#9;1;&#9;1;&#9;2;&#9;4;&#9;6;&#9;7;&#9;7;&#9;5;&#9;7;&#9;7;&#9;6;&#9;4;&#9;2};
&#9;&#9;8;
&#9;};
&#9;[&quot;grip&quot;] = function(size,class,config)
&#9;&#9;local GraphicFrame = class.GUI
&#9;&#9;GraphicFrame.Size = UDim2.new(0,size.x*(size.y == 0 and 2 or size.y),0,size.x*2)
&#9;&#9;for i=1,size.x do
&#9;&#9;&#9;local p = Instance.new(&quot;Frame&quot;,GraphicFrame)
&#9;&#9;&#9;p.BackgroundColor3 = Color3.new(0,0,0)
&#9;&#9;&#9;p.BorderSizePixel = 0
&#9;&#9;&#9;p.Size = UDim2.new(1,0,0,1)
&#9;&#9;&#9;p.Position = UDim2.new(0,0,0,(i-1)*(size.y == 0 and 2 or size.y))
&#9;&#9;&#9;class.Stylist.AddObject(p)
&#9;&#9;end
&#9;&#9;
&#9;&#9;return class,GraphicFrame
&#9;end;
&#9;[&quot;vgrip&quot;] = function(size,class,config)
&#9;&#9;local GraphicFrame = class.GUI
&#9;&#9;GraphicFrame.Size = UDim2.new(0,size.x*2,0,size.x*(size.y == 0 and 2 or size.y))
&#9;&#9;for i=1,size.x do
&#9;&#9;&#9;local p = Instance.new(&quot;Frame&quot;,GraphicFrame)
&#9;&#9;&#9;p.BackgroundColor3 = Color3.new(0,0,0)
&#9;&#9;&#9;p.BorderSizePixel = 0
&#9;&#9;&#9;p.Size = UDim2.new(0,1,1,0)
&#9;&#9;&#9;p.Position = UDim2.new(0,(i-1)*(size.y == 0 and 2 or size.y),0,0)
&#9;&#9;&#9;class.Stylist.AddObject(p)
&#9;&#9;end
&#9;&#9;
&#9;&#9;return class,GraphicFrame
&#9;end;
}

local function CreateGraphic(polygon,size,style,config)
--[[&#9;local function round(d)
&#9;&#9;local i = floor(d)
&#9;&#9;d = d - i
&#9;&#9;if d &lt; 0.5 then
&#9;&#9;&#9;return i
&#9;&#9;elseif d &gt; 0.5 then
&#9;&#9;&#9;return i + 1
&#9;&#9;elseif i%2==0 then
&#9;&#9;&#9;return i
&#9;&#9;else
&#9;&#9;&#9;return i + 1
&#9;&#9;end
&#9;end
]]
&#9;local function round(n)
&#9;&#9;if n &lt; 0 then
&#9;&#9;&#9;return ceil(n - 0.5)
&#9;&#9;else
&#9;&#9;&#9;return floor(n + 0.5)
&#9;&#9;end
&#9;end
&#9;
&#9;local GraphicFrame = Instance.new(&quot;Frame&quot;)
&#9;GraphicFrame.Name = &quot;Graphic&quot;
&#9;GraphicFrame.BackgroundTransparency = 1
&#9;
&#9;local GraphicStylist = CreateStylist(style)
&#9;
&#9;local Class = {
&#9;&#9;GUI = GraphicFrame;
&#9;&#9;Stylist = GraphicStylist;
&#9;}
&#9;
&#9;function Class.Destroy()
&#9;&#9;for k in pairs(Class) do
&#9;&#9;&#9;Class[k] = nil
&#9;&#9;end
&#9;&#9;GraphicStylist.Destroy()
&#9;&#9;GraphicFrame:Destroy()
&#9;end
&#9;
&#9;local polygonX,polygonY = {},{}
&#9;if type(polygon) == &quot;table&quot; then
&#9;&#9;polygonX = polygon[1]
&#9;&#9;polygonY = polygon[2]
&#9;&#9;local div = polygon[3]
&#9;&#9;if div then
&#9;&#9;&#9;for i=1,#polygonX do
&#9;&#9;&#9;&#9;polygonX[i] = (polygonX[i])/div
&#9;&#9;&#9;end
&#9;&#9;&#9;for i=1,#polygonY do
&#9;&#9;&#9;&#9;polygonY[i] = (polygonY[i])/div
&#9;&#9;&#9;end
&#9;&#9;end
&#9;elseif type(polygon) == &quot;string&quot; then
&#9;&#9;local in_poly = internal_polygon[polygon]
&#9;&#9;if type(in_poly) == &quot;table&quot; then
&#9;&#9;&#9;local div = in_poly[3] or 1
&#9;&#9;&#9;for i=1,#in_poly[1] do
&#9;&#9;&#9;&#9;polygonX[i] = (in_poly[1][i])/div
&#9;&#9;&#9;end
&#9;&#9;&#9;for i=1,#in_poly[2] do
&#9;&#9;&#9;&#9;polygonY[i] = (in_poly[2][i])/div
&#9;&#9;&#9;end
&#9;&#9;elseif type(in_poly) == &quot;function&quot; then
&#9;&#9;&#9;return in_poly(size,Class,config)
&#9;&#9;else
&#9;&#9;&#9;error(&quot;\&apos;&quot;..tostring(polygon)..&quot;\&apos; is not a valid internal polygon&quot;,2)
&#9;&#9;end
&#9;else
&#9;&#9;error(&quot;invalid polygon&quot;,2)
&#9;end
&#9;local posX,posY,sizeX,sizeY = 0,0,0,0
&#9;config = config or {}
&#9;local method = config.method or &quot;scaled&quot;
&#9;local round = round
&#9;if config.round == &quot;ceil&quot; then
&#9;&#9;round = math.ceil
&#9;elseif config.round == &quot;floor&quot; then
&#9;&#9;round = math.floor
&#9;elseif config.round == &quot;half&quot; then
&#9;&#9;round = round
&#9;end
&#9;if config.offset then
&#9;&#9;posX,posY = -config.offset.x,-config.offset.y
&#9;end
&#9;if type(size) == &quot;userdata&quot; then
&#9;&#9;sizeX = size.x
&#9;&#9;sizeY = size.y
&#9;elseif type(size) == &quot;table&quot; then
&#9;&#9;sizeX = size[1] or size.x
&#9;&#9;sizeY = size[2] or size.y
&#9;else
&#9;&#9;error(&quot;invalid size&quot;,2)
&#9;end
&#9;polygonN = #polygonX
&#9;for i=1,polygonN do
&#9;&#9;polygonX[i] = polygonX[i]*sizeX
&#9;end
&#9;for i=1,polygonN do
&#9;&#9;polygonY[i] = polygonY[i]*sizeY
&#9;end
&#9;
&#9;GraphicFrame.Size = UDim2.new(0,sizeX,0,sizeY)
&#9;
&#9;local p = Instance.new(&quot;Frame&quot;)
&#9;p.BorderSizePixel = 0
&#9;p.BackgroundColor3 = Color3.new()
&#9;p.Size = UDim2.new(0,1,0,1)
&#9;
&#9;local fillLine
&#9;if method == &quot;scaled&quot; then
&#9;&#9;fillLine = function(x1,x2,y)
&#9;&#9;&#9;x2 = x2-x1
&#9;&#9;&#9;if x2 ~= 0 then
&#9;&#9;&#9;&#9;local c = p:Clone()
&#9;&#9;&#9;&#9;GraphicStylist.AddObject(c)
&#9;&#9;&#9;&#9;c.Position = UDim2.new(x1/sizeX,0,y/sizeY,0)
&#9;&#9;&#9;&#9;c.Size = UDim2.new(x2/sizeX,0,1/sizeY,0)
&#9;&#9;&#9;&#9;c.Parent = GraphicFrame
&#9;&#9;&#9;end
&#9;&#9;end
&#9;elseif method == &quot;static&quot; then
&#9;&#9;fillLine = function(x1,x2,y)
&#9;&#9;&#9;x1 = round(x1,1)
&#9;&#9;&#9;x2 = round(x2,1)-x1
&#9;&#9;&#9;if x2 ~= 0 then
&#9;&#9;&#9;&#9;local c = p:Clone()
&#9;&#9;&#9;&#9;GraphicStylist.AddObject(c)
&#9;&#9;&#9;&#9;c.Position = UDim2.new(0,x1,0,y)
&#9;&#9;&#9;&#9;c.Size = UDim2.new(0,x2,0,1)
&#9;&#9;&#9;&#9;c.Parent = GraphicFrame
&#9;&#9;&#9;end
&#9;&#9;end
&#9;else
&#9;&#9;error(&quot;invalid method&quot;,2)
&#9;end
&#9;
&#9;for pixelY = posY,sizeY+posY-1 do
&#9;&#9;local nodes = 0
&#9;&#9;local nodeX = {}
&#9;&#9;local j = polygonN;
&#9;&#9;for i=1,polygonN do
&#9;&#9;&#9;if polygonY[i] &lt; pixelY and polygonY[j] &gt;= pixelY or polygonY[j] &lt; pixelY and polygonY[i] &gt;= pixelY then
&#9;&#9;&#9;&#9;nodeX[nodes] = (polygonX[i] + (pixelY - polygonY[i])/(polygonY[j] - polygonY[i])*(polygonX[j] - polygonX[i]))
&#9;&#9;&#9;&#9;nodes = nodes + 1
&#9;&#9;&#9;end
&#9;&#9;&#9;j = i
&#9;&#9;end
&#9;&#9;
&#9;&#9;local i = 0
&#9;&#9;while i &lt; nodes - 1 do
&#9;&#9;&#9;if nodeX[i] &gt; nodeX[i+1] then
&#9;&#9;&#9;&#9;nodeX[i],nodeX[i+1] = nodeX[i+1],nodeX[i]
&#9;&#9;&#9;&#9;if i ~= 0 then i = i - 1 end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;i = i + 1
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;
&#9;&#9;local modX,modY = posX + sizeX, posY + sizeY
&#9;&#9;
&#9;&#9;local i = 0
&#9;&#9;while i &lt; nodes - 1 do
&#9;&#9;&#9;if nodeX[i] &gt;= modX then
&#9;&#9;&#9;&#9;break
&#9;&#9;&#9;end
&#9;&#9;&#9;if nodeX[i+1] &gt; posX then
&#9;&#9;&#9;&#9;if nodeX[i] &lt; posX then
&#9;&#9;&#9;&#9;&#9;nodeX[i] = posX
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if nodeX[i+1] &gt; modX then
&#9;&#9;&#9;&#9;&#9;nodeX[i+1] = modX
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;fillLine(nodeX[i]-posX,nodeX[i+1]-posX,pixelY-posY)
&#9;&#9;&#9;end
&#9;&#9;&#9;i = i + 2
&#9;&#9;end
&#9;end
&#9;
&#9;return Class,GraphicFrame
end

lib.Graphic = CreateGraphic

--[[DEPEND:
SetZIndex.lua;
GetScreen.lua;
Graphic.lua;
]]

doc[&quot;ScrollBar&quot;] = [==[
ScrollBar ( bool `horizontal`, number `size` ) [constructor]
&#9;returns: ScrollBar `object`, Frame `scroll_bar`

Creates a primative scroll bar.
This scroll bar features a draggable thumb, paging buttons at either end, and a clickable track.

Arguments:
&#9;`horizontal`
&#9;&#9;If true, the scroll bar will appear horizontally instead of vertically.
&#9;&#9;Optional; defaults to false.
&#9;`size`
&#9;&#9;Sets the width or height of the scroll bar.
&#9;&#9;Optional; defaults to ]==]..ENTRY_SIZE..[==[

Returns:
&#9;`object`
&#9;&#9;The ScrollBar object.
&#9;&#9;
&#9;`scroll_bar`
&#9;&#9;The scroll bar GUI.


ScrollBar Class:
&#9;This class contains the following members:

&#9;Readonly:
&#9;&#9;GUI
&#9;&#9;&#9;The scroll bar itself.

&#9;Fields:
&#9;&#9;ScrollIndex
&#9;&#9;&#9;A number indicating the current position of the scroll bar.

&#9;&#9;TotalSpace
&#9;&#9;&#9;A number indicating the total span of the scrollable space.

&#9;&#9;VisibleSpace
&#9;&#9;&#9;A number indicating the visible span of the scrollable space.

&#9;&#9;PageIncrement
&#9;&#9;&#9;The amount to increase or decrease the ScrollIndex when ScrollDown or ScrollUp is called.

&#9;Methods:
&#9;&#9;Update ( )
&#9;&#9;&#9;Updates the scroll bar to reflect any changes.

&#9;&#9;CanScrollDown ( )
&#9;&#9;&#9;Returns whether the scroll bar can scroll down (or right if `horizontal` is true).

&#9;&#9;CanScrollRight ( )
&#9;&#9;&#9;Alias of CanScrollDown.

&#9;&#9;CanScrollUp ( )
&#9;&#9;&#9;Returns whether the scroll bar can scroll up (or left if `horizontal` is true).

&#9;&#9;CanScrollLeft ( )
&#9;&#9;&#9;Alias of CanScrollUp.

&#9;&#9;ScrollDown ( )
&#9;&#9;&#9;Scrolls down (or right) by the current PageIncrement.

&#9;&#9;ScrollRight( )
&#9;&#9;&#9;Alias of ScrollDown.

&#9;&#9;ScrollUp ( )
&#9;&#9;&#9;Scrolls up (or left) by the current PageIncrement.

&#9;&#9;ScrollLeft ( )
&#9;&#9;&#9;Alias of ScrollUp.

&#9;&#9;ScrollTo ( number `index` )
&#9;&#9;&#9;Scrolls to a specific place, specified by `index`.
&#9;&#9;&#9;This may be any number; it will be clamped between 0 and TotalSpace.

&#9;&#9;GetScrollPercent ( )
&#9;&#9;&#9;Returns the scroll index as a percentage between 0 and 1.
&#9;&#9;&#9;
&#9;&#9;SetScrollPercent ( number `percent` )
&#9;&#9;&#9;Sets the ScrollIndex as a percentage between 0 and 1.

&#9;&#9;Destroy ( )
&#9;&#9;&#9;Releases the resources used by this object.
&#9;&#9;&#9;Run this if you&apos;re no longer using this object.

&#9;Callbacks:
&#9;&#9;UpdateCallback ( table `object` )
&#9;&#9;&#9;When Update is called, the function is called before updating.
&#9;&#9;&#9;If the function returns false, the update will be canceled.
]==]

local function CreateScrollBar(horizontal,size)
&#9;size = size or ENTRY_SIZE
&#9;
&#9;-- create row scroll bar
&#9;local ScrollFrame = Create&apos;Frame&apos;{
&#9;&#9;Size = horizontal and UDim2.new(1,0,0,size) or UDim2.new(0,size,1,0);
&#9;&#9;Position = horizontal and UDim2.new(0,0,1,-size) or UDim2.new(1,-size,0,0);
&#9;&#9;BackgroundTransparency = 1;
&#9;&#9;Name = &quot;ScrollFrame&quot;;
&#9;&#9;Create&apos;ImageButton&apos;{
&#9;&#9;&#9;BackgroundColor3 = Color3.new(1,1,1);
&#9;&#9;&#9;BackgroundTransparency = 0.7;
&#9;&#9;&#9;BorderSizePixel = 0;
&#9;&#9;&#9;Size = UDim2.new(0, size, 0, size);
&#9;&#9;&#9;Name = &quot;ScrollDown&quot;;
&#9;&#9;&#9;Position = horizontal and UDim2.new(1,-size,0,0) or UDim2.new(0,0,1,-size);
&#9;&#9;};
&#9;&#9;Create&apos;ImageButton&apos;{
&#9;&#9;&#9;BackgroundColor3 = Color3.new(1,1,1);
&#9;&#9;&#9;BackgroundTransparency = 0.7;
&#9;&#9;&#9;BorderSizePixel = 0;
&#9;&#9;&#9;Size = UDim2.new(0, size, 0, size);
&#9;&#9;&#9;Name = &quot;ScrollUp&quot;;
&#9;&#9;};
&#9;&#9;Create&apos;ImageButton&apos;{
&#9;&#9;&#9;AutoButtonColor = false;
&#9;&#9;&#9;Size = horizontal and UDim2.new(1,-size*2,1,0) or UDim2.new(1,0,1,-size*2);
&#9;&#9;&#9;BackgroundColor3 = Color3.new(0,0,0);
&#9;&#9;&#9;BorderSizePixel = 0;
&#9;&#9;&#9;BackgroundTransparency = 0.7;
&#9;&#9;&#9;Position = horizontal and UDim2.new(0,size,0,0) or UDim2.new(0,0,0,size);
&#9;&#9;&#9;Name = &quot;ScrollBar&quot;;
&#9;&#9;&#9;Create&apos;ImageButton&apos;{
&#9;&#9;&#9;&#9;BorderSizePixel = 0;
&#9;&#9;&#9;&#9;BackgroundColor3 = Color3.new(1,1,1);
&#9;&#9;&#9;&#9;Size = UDim2.new(0, size, 0, size);
&#9;&#9;&#9;&#9;BackgroundTransparency = 0.5;
&#9;&#9;&#9;&#9;Name = &quot;ScrollThumb&quot;;
&#9;&#9;&#9;};
&#9;&#9;};
&#9;}

&#9;local ScrollDownFrame = ScrollFrame.ScrollDown
&#9;&#9;local ScrollDownGraphic = CreateGraphic(horizontal and &quot;arrow-right&quot; or &quot;arrow-down&quot;,Vector2.new(size,size))
&#9;&#9;ScrollDownGraphic.GUI.Parent = ScrollDownFrame
&#9;local ScrollUpFrame = ScrollFrame.ScrollUp
&#9;&#9;local ScrollUpGraphic = CreateGraphic(horizontal and &quot;arrow-left&quot; or &quot;arrow-up&quot;,Vector2.new(size,size))
&#9;&#9;ScrollUpGraphic.GUI.Parent = ScrollUpFrame
&#9;local ScrollBarFrame = ScrollFrame.ScrollBar
&#9;local ScrollThumbFrame = ScrollBarFrame.ScrollThumb
&#9;&#9;local Decal = CreateGraphic(horizontal and &quot;vgrip&quot; or &quot;grip&quot;,Vector2.new(4),{BackgroundColor3=Color3.new(0,0,0),BackgroundTransparency=0.5})
&#9;&#9;Decal.GUI.Position = UDim2.new(0.5,-4,0.5,-4)
&#9;&#9;Decal.GUI.Parent = ScrollThumbFrame

&#9;local MouseDrag = Create&apos;ImageButton&apos;{
&#9;&#9;Active = false;
&#9;&#9;Size = UDim2.new(1.5, 0, 1.5, 0);
&#9;&#9;AutoButtonColor = false;
&#9;&#9;BackgroundTransparency = 1;
&#9;&#9;Name = &quot;MouseDrag&quot;;
&#9;&#9;Position = UDim2.new(-0.25, 0, -0.25, 0);
&#9;&#9;ZIndex = 10;
&#9;}
&#9;
&#9;local Class = {
&#9;&#9;GUI = ScrollFrame;
&#9;&#9;ScrollIndex = 0;
&#9;&#9;VisibleSpace = 0;
&#9;&#9;TotalSpace = 0;
&#9;&#9;PageIncrement = 1;
&#9;}
&#9;
&#9;local function GetScrollPercent()
&#9;&#9;return Class.ScrollIndex/(Class.TotalSpace-Class.VisibleSpace)
&#9;end
&#9;Class.GetScrollPercent = GetScrollPercent
&#9;
&#9;local function CanScrollDown()
&#9;&#9;return Class.ScrollIndex + Class.VisibleSpace &lt; Class.TotalSpace
&#9;end
&#9;Class.CanScrollDown = CanScrollDown
&#9;Class.CanScrollRight = CanScrollDown
&#9;
&#9;local function CanScrollUp()
&#9;&#9;return Class.ScrollIndex &gt; 0
&#9;end
&#9;Class.CanScrollUp = CanScrollUp
&#9;Class.CanScrollLeft = CanScrollUp
&#9;
&#9;local ScrollStyle = {BackgroundColor3=Color3.new(0,0,0),BackgroundTransparency=0}
&#9;local ScrollStyle_ds = {BackgroundColor3=Color3.new(0,0,0),BackgroundTransparency=0.7}
&#9;
&#9;local last_down
&#9;local last_up
&#9;local UpdateScrollThumb = horizontal
&#9;and function()
&#9;&#9;ScrollThumbFrame.Size = UDim2.new(Class.VisibleSpace/Class.TotalSpace,0,0,size)
&#9;&#9;if ScrollThumbFrame.AbsoluteSize.x &lt; size then
&#9;&#9;&#9;ScrollThumbFrame.Size = UDim2.new(0,size,0,size)
&#9;&#9;end
&#9;&#9;local bar_size = ScrollBarFrame.AbsoluteSize.x
&#9;&#9;ScrollThumbFrame.Position = UDim2.new(GetScrollPercent()*(bar_size - ScrollThumbFrame.AbsoluteSize.x)/bar_size,0,0,0)
&#9;end
&#9;or function()
&#9;&#9;ScrollThumbFrame.Size = UDim2.new(0,size,Class.VisibleSpace/Class.TotalSpace,0)
&#9;&#9;if ScrollThumbFrame.AbsoluteSize.y &lt; size then
&#9;&#9;&#9;ScrollThumbFrame.Size = UDim2.new(0,size,0,size)
&#9;&#9;end
&#9;&#9;local bar_size = ScrollBarFrame.AbsoluteSize.y
&#9;&#9;ScrollThumbFrame.Position = UDim2.new(0,0,GetScrollPercent()*(bar_size - ScrollThumbFrame.AbsoluteSize.y)/bar_size,0)
&#9;end
&#9;
&#9;local function Update()
&#9;&#9;local t = Class.TotalSpace
&#9;&#9;local v = Class.VisibleSpace
&#9;&#9;local s = Class.ScrollIndex
&#9;&#9;if v &lt;= t then
&#9;&#9;&#9;if s &gt; 0 then
&#9;&#9;&#9;&#9;if s + v &gt; t then
&#9;&#9;&#9;&#9;&#9;Class.ScrollIndex = t - v
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;Class.ScrollIndex = 0
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;Class.ScrollIndex = 0
&#9;&#9;end
&#9;&#9;
&#9;&#9;if Class.UpdateCallback then
&#9;&#9;&#9;if Class.UpdateCallback(Class) == false then
&#9;&#9;&#9;&#9;return
&#9;&#9;&#9;end
&#9;&#9;end

&#9;&#9;local down = CanScrollDown()
&#9;&#9;local up = CanScrollUp()
&#9;&#9;if down ~= last_down then
&#9;&#9;&#9;last_down = down
&#9;&#9;&#9;ScrollDownFrame.Active = down
&#9;&#9;&#9;ScrollDownFrame.AutoButtonColor = down
&#9;&#9;&#9;ScrollDownGraphic.Stylist.SetProperties(down and ScrollStyle or ScrollStyle_ds)
&#9;&#9;&#9;ScrollDownFrame.BackgroundTransparency = down and 0.5 or 0.7
&#9;&#9;end
&#9;&#9;if up ~= last_up then
&#9;&#9;&#9;last_up = up
&#9;&#9;&#9;ScrollUpFrame.Active = up
&#9;&#9;&#9;ScrollUpFrame.AutoButtonColor = up
&#9;&#9;&#9;ScrollUpGraphic.Stylist.SetProperties(up and ScrollStyle or ScrollStyle_ds)
&#9;&#9;&#9;ScrollUpFrame.BackgroundTransparency = up and 0.5 or 0.7
&#9;&#9;end
&#9;&#9;ScrollThumbFrame.Visible = down or up
&#9;&#9;UpdateScrollThumb()
&#9;end
&#9;Class.Update = Update
&#9;
&#9;local function ScrollDown()
&#9;&#9;Class.ScrollIndex = Class.ScrollIndex + Class.PageIncrement
&#9;&#9;Update()
&#9;end
&#9;Class.ScrollDown = ScrollDown
&#9;Class.ScrollRight = ScrollDown

&#9;local function ScrollUp()
&#9;&#9;Class.ScrollIndex = Class.ScrollIndex - Class.PageIncrement
&#9;&#9;Update()
&#9;end
&#9;Class.ScrollUp = ScrollUp
&#9;Class.ScrollLeft = ScrollUp

&#9;local function ScrollTo(index)
&#9;&#9;Class.ScrollIndex = index
&#9;&#9;Update()
&#9;end
&#9;Class.ScrollTo = ScrollTo
&#9;
&#9;local function SetScrollPercent(percent)
&#9;&#9;Class.ScrollIndex = math.floor((Class.TotalSpace - Class.VisibleSpace)*percent + 0.5)
&#9;&#9;Update()
&#9;end
&#9;Class.SetScrollPercent = SetScrollPercent
&#9;
&#9;-- fixes AutoButtonColor
&#9;local function ResetButtonColor(button)
&#9;&#9;local active = button.Active
&#9;&#9;button.Active = not active
&#9;&#9;button.Active = active
&#9;end
&#9;
&#9;SetZIndexOnChanged(ScrollFrame)
&#9;
&#9;local scroll_event_id = 0
&#9;ScrollDownFrame.MouseButton1Down:connect(function()
&#9;&#9;scroll_event_id = tick()
&#9;&#9;local current = scroll_event_id
&#9;&#9;local up_con
&#9;&#9;up_con = MouseDrag.MouseButton1Up:connect(function()
&#9;&#9;&#9;scroll_event_id = tick()
&#9;&#9;&#9;MouseDrag.Parent = nil
&#9;&#9;&#9;ResetButtonColor(ScrollDownFrame)
&#9;&#9;&#9;up_con:disconnect(); drag = nil
&#9;&#9;end)
&#9;&#9;MouseDrag.Parent = GetScreen(ScrollFrame)
&#9;&#9;ScrollDown()
&#9;&#9;wait(0.2) -- delay before auto scroll
&#9;&#9;while scroll_event_id == current do
&#9;&#9;&#9;ScrollDown()
&#9;&#9;&#9;if not CanScrollDown() then break end
&#9;&#9;&#9;wait()
&#9;&#9;end
&#9;end)
&#9;
&#9;ScrollDownFrame.MouseButton1Up:connect(function()
&#9;&#9;scroll_event_id = tick()
&#9;end)

&#9;ScrollUpFrame.MouseButton1Down:connect(function()
&#9;&#9;scroll_event_id = tick()
&#9;&#9;local current = scroll_event_id
&#9;&#9;local up_con
&#9;&#9;up_con = MouseDrag.MouseButton1Up:connect(function()
&#9;&#9;&#9;scroll_event_id = tick()
&#9;&#9;&#9;MouseDrag.Parent = nil
&#9;&#9;&#9;ResetButtonColor(ScrollUpFrame)
&#9;&#9;&#9;up_con:disconnect(); drag = nil
&#9;&#9;end)
&#9;&#9;MouseDrag.Parent = GetScreen(ScrollFrame)
&#9;&#9;ScrollUp()
&#9;&#9;wait(0.2)
&#9;&#9;while scroll_event_id == current do
&#9;&#9;&#9;ScrollUp()
&#9;&#9;&#9;if not CanScrollUp() then break end
&#9;&#9;&#9;wait()
&#9;&#9;end
&#9;end)

&#9;ScrollUpFrame.MouseButton1Up:connect(function()
&#9;&#9;scroll_event_id = tick()
&#9;end)
&#9;
&#9;ScrollBarFrame.MouseButton1Down:connect(horizontal
&#9;and function(x,y)
&#9;&#9;scroll_event_id = tick()
&#9;&#9;local current = scroll_event_id
&#9;&#9;local up_con
&#9;&#9;up_con = MouseDrag.MouseButton1Up:connect(function()
&#9;&#9;&#9;scroll_event_id = tick()
&#9;&#9;&#9;MouseDrag.Parent = nil
&#9;&#9;&#9;ResetButtonColor(ScrollUpFrame)
&#9;&#9;&#9;up_con:disconnect(); drag = nil
&#9;&#9;end)
&#9;&#9;MouseDrag.Parent = GetScreen(ScrollFrame)
&#9;&#9;if x &gt; ScrollThumbFrame.AbsolutePosition.x then
&#9;&#9;&#9;ScrollTo(Class.ScrollIndex + Class.VisibleSpace)
&#9;&#9;&#9;wait(0.2)
&#9;&#9;&#9;while scroll_event_id == current do
&#9;&#9;&#9;&#9;if x &lt; ScrollThumbFrame.AbsolutePosition.x + ScrollThumbFrame.AbsoluteSize.x then break end
&#9;&#9;&#9;&#9;ScrollTo(Class.ScrollIndex + Class.VisibleSpace)
&#9;&#9;&#9;&#9;wait()
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;ScrollTo(Class.ScrollIndex - Class.VisibleSpace)
&#9;&#9;&#9;wait(0.2)
&#9;&#9;&#9;while scroll_event_id == current do
&#9;&#9;&#9;&#9;if x &gt; ScrollThumbFrame.AbsolutePosition.x then break end
&#9;&#9;&#9;&#9;ScrollTo(Class.ScrollIndex - Class.VisibleSpace)
&#9;&#9;&#9;&#9;wait()
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;or function(x,y)
&#9;&#9;scroll_event_id = tick()
&#9;&#9;local current = scroll_event_id
&#9;&#9;local up_con
&#9;&#9;up_con = MouseDrag.MouseButton1Up:connect(function()
&#9;&#9;&#9;scroll_event_id = tick()
&#9;&#9;&#9;MouseDrag.Parent = nil
&#9;&#9;&#9;ResetButtonColor(ScrollUpFrame)
&#9;&#9;&#9;up_con:disconnect(); drag = nil
&#9;&#9;end)
&#9;&#9;MouseDrag.Parent = GetScreen(ScrollFrame)
&#9;&#9;if y &gt; ScrollThumbFrame.AbsolutePosition.y then
&#9;&#9;&#9;ScrollTo(Class.ScrollIndex + Class.VisibleSpace)
&#9;&#9;&#9;wait(0.2)
&#9;&#9;&#9;while scroll_event_id == current do
&#9;&#9;&#9;&#9;if y &lt; ScrollThumbFrame.AbsolutePosition.y + ScrollThumbFrame.AbsoluteSize.y then break end
&#9;&#9;&#9;&#9;ScrollTo(Class.ScrollIndex + Class.VisibleSpace)
&#9;&#9;&#9;&#9;wait()
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;ScrollTo(Class.ScrollIndex - Class.VisibleSpace)
&#9;&#9;&#9;wait(0.2)
&#9;&#9;&#9;while scroll_event_id == current do
&#9;&#9;&#9;&#9;if y &gt; ScrollThumbFrame.AbsolutePosition.y then break end
&#9;&#9;&#9;&#9;ScrollTo(Class.ScrollIndex - Class.VisibleSpace)
&#9;&#9;&#9;&#9;wait()
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end)

&#9;ScrollThumbFrame.MouseButton1Down:connect(horizontal
&#9;and function(x,y)
&#9;&#9;scroll_event_id = tick()
&#9;&#9;local mouse_offset = x - ScrollThumbFrame.AbsolutePosition.x
&#9;&#9;local drag_con
&#9;&#9;local up_con
&#9;&#9;drag_con = MouseDrag.MouseMoved:connect(function(x,y)
&#9;&#9;&#9;local bar_abs_pos = ScrollBarFrame.AbsolutePosition.x
&#9;&#9;&#9;local bar_drag = ScrollBarFrame.AbsoluteSize.x - ScrollThumbFrame.AbsoluteSize.x
&#9;&#9;&#9;local bar_abs_one = bar_abs_pos + bar_drag
&#9;&#9;&#9;x = x - mouse_offset
&#9;&#9;&#9;x = x &lt; bar_abs_pos and bar_abs_pos or x &gt; bar_abs_one and bar_abs_one or x
&#9;&#9;&#9;x = x - bar_abs_pos
&#9;&#9;&#9;SetScrollPercent(x/(bar_drag))
&#9;&#9;end)
&#9;&#9;up_con = MouseDrag.MouseButton1Up:connect(function()
&#9;&#9;&#9;scroll_event_id = tick()
&#9;&#9;&#9;MouseDrag.Parent = nil
&#9;&#9;&#9;ResetButtonColor(ScrollThumbFrame)
&#9;&#9;&#9;drag_con:disconnect(); drag_con = nil
&#9;&#9;&#9;up_con:disconnect(); drag = nil
&#9;&#9;end)
&#9;&#9;MouseDrag.Parent = GetScreen(ScrollFrame)
&#9;end
&#9;or function(x,y)
&#9;&#9;scroll_event_id = tick()
&#9;&#9;local mouse_offset = y - ScrollThumbFrame.AbsolutePosition.y
&#9;&#9;local drag_con
&#9;&#9;local up_con
&#9;&#9;drag_con = MouseDrag.MouseMoved:connect(function(x,y)
&#9;&#9;&#9;local bar_abs_pos = ScrollBarFrame.AbsolutePosition.y
&#9;&#9;&#9;local bar_drag = ScrollBarFrame.AbsoluteSize.y - ScrollThumbFrame.AbsoluteSize.y
&#9;&#9;&#9;local bar_abs_one = bar_abs_pos + bar_drag
&#9;&#9;&#9;y = y - mouse_offset
&#9;&#9;&#9;y = y &lt; bar_abs_pos and bar_abs_pos or y &gt; bar_abs_one and bar_abs_one or y
&#9;&#9;&#9;y = y - bar_abs_pos
&#9;&#9;&#9;SetScrollPercent(y/(bar_drag))
&#9;&#9;end)
&#9;&#9;up_con = MouseDrag.MouseButton1Up:connect(function()
&#9;&#9;&#9;scroll_event_id = tick()
&#9;&#9;&#9;MouseDrag.Parent = nil
&#9;&#9;&#9;ResetButtonColor(ScrollThumbFrame)
&#9;&#9;&#9;drag_con:disconnect(); drag_con = nil
&#9;&#9;&#9;up_con:disconnect(); drag = nil
&#9;&#9;end)
&#9;&#9;MouseDrag.Parent = GetScreen(ScrollFrame)
&#9;end)
&#9;
&#9;Update()

&#9;return Class,ScrollFrame
end

lib.ScrollBar = CreateScrollBar

--[[DEPEND:
GetPadding.lua;
]]

doc[&quot;StackingFrame&quot;] = [==[
StackingFrame ( GuiObject `frame`, bool `horizontal`, bool `alignment` ) [constructor]
&#9;returns: StackingFrame `object`, Frame `stacking_frame`

Creates a frame that automatically resizes based on the objects it contains.
These objects are automatically positioned to stack next to each other.
Objects that have their Visible property set to false become ignored.

Arguments:
&#9;`frame`
&#9;&#9;If specified, then it will be used as the StackingFrame.
&#9;&#9;Children that exist in this object beforehand will be added to the StackingFrame automatically. 
&#9;&#9;Use the AddObject function to add children afterwards.
&#9;&#9;Optional; defaults to a new Frame.

&#9;`horizontal`
&#9;&#9;If true, objects will be positioned horizontally instead of vertically.
&#9;&#9;Optional; defaults to false

&#9;`alignment`
&#9;&#9;If true, objects will be aligned to the right if vertical (else left), or the bottom if horizontal (else top).
&#9;&#9;Optional; defaults to false

Returns:
&#9;`object`
&#9;&#9;The StackingFrame object.

&#9;`stacking_frame`
&#9;&#9;The stacking frame GUI.


StackingFrame Class:
&#9;Contains the following members:

&#9;Readonly:
&#9;&#9;GUI
&#9;&#9;&#9;The stacking frame GUI.

&#9;&#9;List
&#9;&#9;&#9;The table containing the objects in the stacking frame.
&#9;&#9;&#9;Should only be used for ordering items! Use AddObject and RemoveObject accordingly!

&#9;Methods:
&#9;&#9;AddObject ( GuiObject `object`, number `index` )
&#9;&#9;&#9;Adds `object` to the list.
&#9;&#9;&#9;If `index` is specified, the object is added at that position in the list.
&#9;&#9;&#9;Otherwise, it is added to the end.

&#9;&#9;RemoveObject ( number `index` )
&#9;&#9;&#9;Removes the object at `index` in the list.
&#9;&#9;&#9;`index` can be an object in the list.
&#9;&#9;&#9;`index` can be nil, in which case the last item in the list is used.
&#9;&#9;&#9;`index` is clamped within the range of the list.

&#9;&#9;MoveObject ( number `index`, number `to` )
&#9;&#9;&#9;Moves the object at `index` to the new index `to`.
&#9;&#9;&#9;`index` and `to` can be objects in the list.
&#9;&#9;&#9;`index` and `to` can be nil, in which case the last item in the list is used.
&#9;&#9;&#9;`index` and `to` are clamped within the range of the list.

&#9;&#9;GetIndex ( Instance `object` )
&#9;&#9;&#9;Returns the index of `object` in the stacking frame, if it exists there.

&#9;&#9;SetPadding ( number `padding`, number `border` )
&#9;&#9;&#9;Sets the amount of space between and around children, in pixels.
&#9;&#9;&#9;`padding` is the amount of space between each child.
&#9;&#9;&#9;`border` is the amount of space around all children.
&#9;&#9;&#9;
&#9;&#9;Update ( )
&#9;&#9;&#9;Updates the object.

&#9;&#9;Destroy ( )
&#9;&#9;&#9;Releases the resources used by this object.
&#9;&#9;&#9;Run this if you&apos;re no longer using this object.
]==]

local function CreateStackingFrame(Frame,horizontal,alignment)
&#9;Frame = Frame or Instance.new(&quot;Frame&quot;)
&#9;local children = {}
&#9;local connections = {}
&#9;local border = 0
&#9;local padding = 0
&#9;local style_pad = 0
&#9;local event_id = 0
&#9;local Update

&#9;if horizontal then
&#9;&#9;if alignment then
&#9;&#9;&#9;Update = function()
&#9;&#9;&#9;&#9;event_id = event_id + 1; local eid = event_id
&#9;&#9;&#9;&#9;local height = 0
&#9;&#9;&#9;&#9;local length = 0
&#9;&#9;&#9;&#9;for i,child in pairs(children) do
&#9;&#9;&#9;&#9;&#9;if event_id ~= eid then return end
&#9;&#9;&#9;&#9;&#9;if child.Visible then
&#9;&#9;&#9;&#9;&#9;&#9;local abs = child.AbsoluteSize
&#9;&#9;&#9;&#9;&#9;&#9;child.Position = UDim2.new(0,length + border,1,-abs.y - border)
&#9;&#9;&#9;&#9;&#9;&#9;height = abs.y &gt; height and abs.y or height
&#9;&#9;&#9;&#9;&#9;&#9;length = length + abs.x + padding
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if event_id ~= eid then return end
&#9;&#9;&#9;&#9;if #children &gt; 0 then
&#9;&#9;&#9;&#9;&#9;Frame.Size = UDim2.new(0,length - padding + border*2 + style_pad,0,height + border*2 + style_pad)
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;Frame.Size = UDim2.new(0,border*2 + style_pad,0,border*2 + style_pad)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;Update = function()
&#9;&#9;&#9;&#9;event_id = event_id + 1; local eid = event_id
&#9;&#9;&#9;&#9;local height = 0
&#9;&#9;&#9;&#9;local length = 0
&#9;&#9;&#9;&#9;for i,child in pairs(children) do
&#9;&#9;&#9;&#9;&#9;if event_id ~= eid then return end
&#9;&#9;&#9;&#9;&#9;if child.Visible then
&#9;&#9;&#9;&#9;&#9;&#9;local abs = child.AbsoluteSize
&#9;&#9;&#9;&#9;&#9;&#9;child.Position = UDim2.new(0,length + border,0,border)
&#9;&#9;&#9;&#9;&#9;&#9;height = abs.y &gt; height and abs.y or height
&#9;&#9;&#9;&#9;&#9;&#9;length = length + abs.x + padding
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if event_id ~= eid then return end
&#9;&#9;&#9;&#9;if #children &gt; 0 then
&#9;&#9;&#9;&#9;&#9;Frame.Size = UDim2.new(0,length - padding + border*2 + style_pad,0,height + border*2 + style_pad)
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;Frame.Size = UDim2.new(0,border*2 + style_pad,0,border*2 + style_pad)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;else
&#9;&#9;if alignment then
&#9;&#9;&#9;Update = function()
&#9;&#9;&#9;&#9;event_id = event_id + 1; local eid = event_id
&#9;&#9;&#9;&#9;local width = 0
&#9;&#9;&#9;&#9;local length = 0
&#9;&#9;&#9;&#9;for i,child in pairs(children) do
&#9;&#9;&#9;&#9;&#9;if event_id ~= eid then return end
&#9;&#9;&#9;&#9;&#9;if child.Visible then
&#9;&#9;&#9;&#9;&#9;&#9;local abs = child.AbsoluteSize
&#9;&#9;&#9;&#9;&#9;&#9;child.Position = UDim2.new(1,-abs.x - border,0,length + border)
&#9;&#9;&#9;&#9;&#9;&#9;width = abs.x &gt; width and abs.x or width
&#9;&#9;&#9;&#9;&#9;&#9;length = length + abs.y + padding
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if event_id ~= eid then return end
&#9;&#9;&#9;&#9;if #children &gt; 0 then
&#9;&#9;&#9;&#9;&#9;Frame.Size = UDim2.new(0,width + border*2 + style_pad,0,length - padding + border*2 + style_pad)
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;Frame.Size = UDim2.new(0,border*2 + style_pad,0,border*2 + style_pad)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;Update = function()
&#9;&#9;&#9;&#9;event_id = event_id + 1; local eid = event_id
&#9;&#9;&#9;&#9;local width = 0
&#9;&#9;&#9;&#9;local length = 0
&#9;&#9;&#9;&#9;for i,child in pairs(children) do
&#9;&#9;&#9;&#9;&#9;if event_id ~= eid then return end
&#9;&#9;&#9;&#9;&#9;if child.Visible then
&#9;&#9;&#9;&#9;&#9;&#9;local abs = child.AbsoluteSize
&#9;&#9;&#9;&#9;&#9;&#9;child.Position = UDim2.new(0,border,0,length + border)
&#9;&#9;&#9;&#9;&#9;&#9;width = abs.x &gt; width and abs.x or width
&#9;&#9;&#9;&#9;&#9;&#9;length = length + abs.y + padding
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if event_id ~= eid then return end
&#9;&#9;&#9;&#9;if #children &gt; 0 then
&#9;&#9;&#9;&#9;&#9;Frame.Size = UDim2.new(0,width + border*2 + style_pad,0,length - padding + border*2 + style_pad)
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;Frame.Size = UDim2.new(0,border*2 + style_pad,0,border*2 + style_pad)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;
&#9;local function SetPadding(pad,bor)
&#9;&#9;padding = pad or padding
&#9;&#9;border = bor or border
&#9;&#9;Update()
&#9;end

&#9;local function AddObject(object,index)
&#9;&#9;if object:IsA&quot;GuiObject&quot; then
&#9;&#9;&#9;if type(index) == &quot;number&quot; then
&#9;&#9;&#9;&#9;table.insert(children,index,object)
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;table.insert(children,object)
&#9;&#9;&#9;end
&#9;&#9;&#9;connections[object] = object.Changed:connect(function(p)
&#9;&#9;&#9;&#9;if p == &quot;AbsoluteSize&quot; or p == &quot;Visible&quot; then
&#9;&#9;&#9;&#9;&#9;Update()
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end)
&#9;&#9;&#9;object.Parent = Frame
&#9;&#9;&#9;Update()
&#9;&#9;end
&#9;end
&#9;
&#9;local function RemoveObject(index)
&#9;&#9;if index == nil then
&#9;&#9;&#9;index = #children
&#9;&#9;elseif type(index) ~= &quot;number&quot; then
&#9;&#9;&#9;index = GetIndex(children,index)
&#9;&#9;end
&#9;&#9;if index then
&#9;&#9;&#9;index = ClampIndex(children,index)
&#9;&#9;&#9;local object = table.remove(children,index)
&#9;&#9;&#9;if connections[object] then
&#9;&#9;&#9;&#9;connections[object]:disconnect()
&#9;&#9;&#9;&#9;connections[object] = nil
&#9;&#9;&#9;end
&#9;&#9;&#9;object.Parent = nil
&#9;&#9;&#9;Update()
&#9;&#9;&#9;return object
&#9;&#9;end
&#9;end
&#9;
&#9;local function MoveObject(index,to)
&#9;&#9;if index == nil then
&#9;&#9;&#9;index = #children
&#9;&#9;elseif type(index) ~= &quot;number&quot; then
&#9;&#9;&#9;index = GetIndex(children,index)
&#9;&#9;end
&#9;&#9;if to == nil then
&#9;&#9;&#9;to = #children
&#9;&#9;elseif type(to) ~= &quot;number&quot; then
&#9;&#9;&#9;to = GetIndex(children,to)
&#9;&#9;end
&#9;&#9;if index and to then
&#9;&#9;&#9;index = ClampIndex(children,index)
&#9;&#9;&#9;to = ClampIndex(children,to)
&#9;&#9;&#9;local child = table.remove(children,index)
&#9;&#9;&#9;table.insert(children,to,child)
&#9;&#9;&#9;Update()
&#9;&#9;end
&#9;end
&#9;
&#9;local Class = {
&#9;&#9;GUI = Frame;
&#9;&#9;List = children;
&#9;&#9;Update = Update;
&#9;&#9;SetPadding = SetPadding;
&#9;&#9;AddObject = AddObject;
&#9;&#9;RemoveObject = RemoveObject;
&#9;&#9;MoveObject = MoveObject;
&#9;&#9;GetIndex = function(object)
&#9;&#9;&#9;return GetIndex(children,object)
&#9;&#9;end;
&#9;}
&#9;
&#9;local function Destroy()
&#9;&#9;for i,v in pairs(children) do
&#9;&#9;&#9;if connections[v] then
&#9;&#9;&#9;&#9;connections[v]:disconnect()
&#9;&#9;&#9;&#9;connections[v] = nil
&#9;&#9;&#9;end
&#9;&#9;&#9;v.Parent = nil
&#9;&#9;&#9;children[i] = nil
&#9;&#9;end
&#9;&#9;for i,con in pairs(connections) do
&#9;&#9;&#9;con:disconnect()
&#9;&#9;&#9;connections[i] = nil
&#9;&#9;end
&#9;&#9;for k in pairs(Class) do
&#9;&#9;&#9;Class[k] = nil
&#9;&#9;end
&#9;&#9;Frame:Destroy()
&#9;end
&#9;Class.Destroy = Destroy

&#9;for i,child in pairs(Frame:GetChildren()) do
&#9;&#9;AddObject(child,i)
&#9;end
&#9;
&#9;Update()
&#9;
&#9;Frame.Changed:connect(function(p)
&#9;&#9;if p == &quot;AbsoluteSize&quot; or p == &quot;Style&quot; then
&#9;&#9;&#9;local old = style_pad
&#9;&#9;&#9;style_pad = GetPadding(Frame)*2
&#9;&#9;&#9;if style_pad ~= old then
&#9;&#9;&#9;&#9;Update()
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end)
&#9;
&#9;return Class,Frame
end

lib.StackingFrame = CreateStackingFrame

--[[DEPEND:
ScrollBar.lua;
]]

doc[&quot;ScrollingList&quot;] = [==[
ScrollingList ( table `list`, number `entry_height` ) [constructor]
&#9;returns: ScrollingList `object`, Frame `scrolling_frame`

Creates a scrollable list designed to display a large number of items.

Arguments:
&#9;`list`
&#9;&#9;Contains the items to display in the list.
&#9;&#9;Items will be converted to a string before being displayed, so this may contain any type of value.
&#9;&#9;Optional; defaults to an empty table
&#9;&#9;
&#9;`entry_height`
&#9;&#9;Specifies the height, in pixels, of each displayed entry.
&#9;&#9;Optional; defaults to ]==]..ENTRY_SIZE..[==[

Returns:
&#9;`object`
&#9;&#9;The ScrollingList object.

&#9;`scrolling_frame`
&#9;&#9;The scrolling list GUI.


ScrollingList Class:
&#9;This class contains the folloing members.
&#9;Readonly:
&#9;&#9;List
&#9;&#9;&#9;The `list` table.
&#9;&#9;&#9;
&#9;&#9;GUI
&#9;&#9;&#9;The scrolling list GUI.

&#9;&#9;Scroll
&#9;&#9;&#9;A object for the list&apos;s scroll bar.

&#9;&#9;EntryStylist
&#9;&#9;&#9;A stylist containing every displayed entry.

&#9;Methods:
&#9;&#9;AddEntry ( * `item`, number `index` )
&#9;&#9;&#9;Add an entry to the list and updates automatically.
&#9;&#9;&#9;`item` is the value to add to the list.
&#9;&#9;&#9;If `index` is specified, `item` will be added to the list at `index`.
&#9;&#9;&#9;Otherwise, it will be added to the end.

&#9;&#9;AddEntries ( table `items`, number `index` )
&#9;&#9;&#9;Adds a group of entries to the list.
&#9;&#9;&#9;`items` is a table of values that will be added to the list.
&#9;&#9;&#9;If `index` is specified, the items will be inserted into the list starting at `index.
&#9;&#9;&#9;Otherwise, they will be added to the end.

&#9;&#9;RemoveEntry ( * `item` )
&#9;&#9;&#9;Removes the first occurance of `item` in the list.
&#9;&#9;&#9;If `item` is a number, the item at that index in the list will be removed.
&#9;&#9;&#9;If `item` is not specified, then the list item in the list will be removed.

&#9;&#9;Update ( )
&#9;&#9;&#9;Updates the display to reflect the list.

&#9;&#9;Destroy ( )
&#9;&#9;&#9;Releases the resources used by this object.
&#9;&#9;&#9;Run this if you&apos;re no longer using this object.
]==]

local function CreateScrollingList(List,entryHeight)
&#9;List = List or {}
&#9;entryHeight = entyHeight or ENTRY_SIZE
&#9;
&#9;local ScrollingListFrame = Instance.new(&quot;Frame&quot;)
&#9;ScrollingListFrame.Size = UDim2.new(0,300,0,200)
&#9;ScrollingListFrame.Style = Enum.FrameStyle.RobloxRound
&#9;ScrollingListFrame.Active = true
&#9;ScrollingListFrame.Name = &quot;ScrollingListFrame&quot;
&#9;
&#9;local ListViewFrame = Instance.new(&quot;Frame&quot;,ScrollingListFrame)
&#9;ListViewFrame.Name = &quot;ListViewFrame&quot;
&#9;ListViewFrame.BackgroundTransparency = 1
&#9;ListViewFrame.Size = UDim2.new(1,-entryHeight,1,0)

&#9;local EntryStylist = Stylist{
&#9;&#9;Name = &quot;ListEntry&quot;;
&#9;&#9;Font = &quot;ArialBold&quot;;
&#9;&#9;FontSize = &quot;Size14&quot;;
&#9;&#9;TextColor3 = Color3.new(1,1,1);
&#9;&#9;BackgroundTransparency = 1;
&#9;&#9;TextXAlignment = &quot;Left&quot;;
&#9;}
&#9;local EntryTemplate = Instance.new(&quot;TextLabel&quot;)
&#9;
&#9;local EntryFrames = {}

&#9;local Scroll,ScrollBarFrame = CreateScrollBar(false,entryHeight)
&#9;ScrollBarFrame.Size = UDim2.new(0,entryHeight,1,0)
&#9;ScrollBarFrame.Position = UDim2.new(1,-entryHeight,0,0)
&#9;ScrollBarFrame.Parent = ScrollingListFrame

&#9;local Update = Scroll.Update
&#9;
&#9;local Class = {
&#9;&#9;List = List;
&#9;&#9;GUI = ScrollingListFrame;
&#9;&#9;Scroll = Scroll;
&#9;&#9;Update = Update;
&#9;&#9;EntryStylist = EntryStylist;
&#9;}
&#9;
&#9;Scroll.UpdateCallback = function()
&#9;&#9;local visible_space = Scroll.VisibleSpace
&#9;&#9;-- update current entries
&#9;&#9;for i = 1,visible_space do
&#9;&#9;&#9;local item = List[i + Scroll.ScrollIndex]
&#9;&#9;&#9;if item then
&#9;&#9;&#9;&#9;local entry = EntryFrames[i]
&#9;&#9;&#9;&#9;if not entry then
&#9;&#9;&#9;&#9;&#9;entry = EntryTemplate:Clone()
&#9;&#9;&#9;&#9;&#9;EntryStylist.AddObject(entry)
&#9;&#9;&#9;&#9;&#9;EntryFrames[i] = entry
&#9;&#9;&#9;&#9;&#9;entry.Parent = ListViewFrame
&#9;&#9;&#9;&#9;&#9;entry.ZIndex = ScrollingListFrame.ZIndex
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;entry.Text = tostring(item)
&#9;&#9;&#9;&#9;entry.Position = UDim2.new(0,0,0,(i-1)*entryHeight)
&#9;&#9;&#9;&#9;entry.Size = UDim2.new(1,0,0,entryHeight)
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;local entry = EntryFrames[i]
&#9;&#9;&#9;&#9;if entry then
&#9;&#9;&#9;&#9;&#9;EntryStylist.RemoveObject(entry)
&#9;&#9;&#9;&#9;&#9;entry:Destroy()
&#9;&#9;&#9;&#9;&#9;EntryFrames[i] = nil
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;-- remove extra entries (occurs only when #EntryFrames &gt; VisibleSpace)
&#9;&#9;for i = Scroll.VisibleSpace+1,#EntryFrames do
&#9;&#9;&#9;local entry = EntryFrames[i]
&#9;&#9;&#9;if entry then
&#9;&#9;&#9;&#9;EntryStylist.RemoveObject(entry)
&#9;&#9;&#9;&#9;entry:Destroy()
&#9;&#9;&#9;end
&#9;&#9;&#9;EntryFrames[i] = nil
&#9;&#9;end
&#9;end

&#9;-- add an item to the list; optional list index
&#9;local function AddEntry(item,index)
&#9;&#9;if index then
&#9;&#9;&#9;table.insert(List,index,item)
&#9;&#9;else
&#9;&#9;&#9;table.insert(List,item)
&#9;&#9;end
&#9;&#9;Scroll.TotalSpace = #List
&#9;&#9;Update()
&#9;end
&#9;Class.AddEntry = AddEntry
&#9;
&#9;-- add multiple items to list
&#9;local function AddEntries(items,index)
&#9;&#9;if index then
&#9;&#9;&#9;for i = 1,#items do
&#9;&#9;&#9;&#9;table.insert(List,index+i-1,items[i])
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;for i = 1,#items do
&#9;&#9;&#9;&#9;table.insert(List,items[i])
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;Scroll.TotalSpace = #List
&#9;&#9;Update()
&#9;end
&#9;Class.AddEntries = AddEntries

&#9;-- remove entry from list; may be a list index or an item in the list
&#9;local function RemoveEntry(item)
&#9;&#9;if type(item) == &quot;number&quot; or type(item) == &quot;nil&quot; then
&#9;&#9;&#9;table.remove(List,item)
&#9;&#9;else
&#9;&#9;&#9;for i,v in pairs(List) do
&#9;&#9;&#9;&#9;if v == item then
&#9;&#9;&#9;&#9;&#9;table.remove(List,i)
&#9;&#9;&#9;&#9;&#9;break
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;Scroll.TotalSpace = #List
&#9;&#9;Update()
&#9;end
&#9;Class.RemoveEntry = RemoveEntry

&#9;SetZIndexOnChanged(ScrollingListFrame)

&#9;ListViewFrame.Changed:connect(function(p)
&#9;&#9;if p == &quot;AbsoluteSize&quot; then
&#9;&#9;&#9;Scroll.VisibleSpace = math.floor(ListViewFrame.AbsoluteSize.y/entryHeight)
&#9;&#9;&#9;Update()
&#9;&#9;end
&#9;end)
&#9;
&#9;function Class.Destroy()
&#9;&#9;for i in pairs(Class) do
&#9;&#9;&#9;Class[i] = nil
&#9;&#9;end
&#9;&#9;for i,v in pairs(EntryFrames) do
&#9;&#9;&#9;v:Destroy()
&#9;&#9;&#9;EntryFrames[i] = nil
&#9;&#9;end
&#9;&#9;EntryStylist.Destroy()
&#9;&#9;Scroll.Destroy()
&#9;&#9;ScrollingListFrame:Destroy()
&#9;end

&#9;return Class,ScrollingListFrame
end

lib.ScrollingList = CreateScrollingList

--[[DEPEND:
ScrollBar.lua;
]]

doc[&quot;ScrollingContainer&quot;] = [==[
ScrollingContainer ( bool `v_scroll_bar`, bool `h_scroll_bar`, number `scroll_width` ) [constructor]
&#9;returns: ScrollingContainer `object`, Frame `scrolling_container`

Creates a container that can be scrolled with one or more scroll bars.
The scroll bars update dynamically based on the size of the boundary and container.
Objects in the container are automatically clipped to display only within the boundary.

Arguments:
&#9;`v_scroll_bar`
&#9;&#9;Indicates whether the container should have a vertical scroll bar.
&#9;&#9;Optional; defaults to true

&#9;`h_scroll_bar`
&#9;&#9;Indicates whether the container should have a horizontal scroll bar.
&#9;&#9;Optional; defaults to false
&#9;&#9;
&#9;`scroll_width`
&#9;&#9;Indicates the width the scrollbar(s).
&#9;&#9;Optional; defaults to ]==]..ENTRY_SIZE..[==[

Returns:
&#9;`object`
&#9;&#9;The ScrollingContainer object.

&#9;`scrolling_container`
&#9;&#9;The scrolling container GUI.


ScrollingContainer Class:
&#9;This class contains the following members:

&#9;Readonly:
&#9;&#9;Boundary
&#9;&#9;&#9;A Frame that represents the visible area, clipping off any overflowing content.

&#9;&#9;Container
&#9;&#9;&#9;A Frame that will contain other items to be displayed in the scrolling container.

&#9;&#9;GUI
&#9;&#9;&#9;The scrolling container GUI.

&#9;&#9;HScroll
&#9;&#9;&#9;The horizontal scroll bar object (if available).

&#9;&#9;VScroll
&#9;&#9;&#9;The vertical scroll bar object (if available).
&#9;&#9;
&#9;Methods:
&#9;&#9;Update ( )
&#9;&#9;&#9;Updates the scroll bar (or both, if present).
]==]

local function CreateScrollingContainer(v_scroll,h_scroll,scroll_width)
&#9;if v_scroll == nil then v_scroll = true end
&#9;scroll_width = scroll_width or ENTRY_SIZE

&#9;local ParentFrame = Create&apos;Frame&apos;{
&#9;&#9;Name = &quot;ScrollingContainer&quot;;
&#9;&#9;Size = UDim2.new(0,300,0,200);
&#9;&#9;BackgroundTransparency = 1;
&#9;}

&#9;local Boundary = Create&apos;Frame&apos;{
&#9;&#9;Name = &quot;Boundary&quot;;
&#9;&#9;BackgroundColor3 = Color3.new(0,0,0);
&#9;&#9;BorderColor3 = Color3.new(1,1,1);
&#9;&#9;ClipsDescendants = true;
&#9;&#9;Parent = ParentFrame;
&#9;}

&#9;local Container = Create&apos;Frame&apos;{
&#9;&#9;Name = &quot;Container&quot;;
&#9;&#9;BackgroundTransparency = 1;
&#9;&#9;Parent = Boundary;
&#9;}
&#9;
&#9;local Class = {
&#9;&#9;GUI = ParentFrame;
&#9;&#9;Boundary = Boundary;
&#9;&#9;Container = Container;
&#9;}
&#9;
&#9;if v_scroll and h_scroll then
&#9;&#9;local VScroll = CreateScrollBar(false,scroll_width)
&#9;&#9;VScroll.PageIncrement = scroll_width
&#9;&#9;VScroll.GUI.Position = UDim2.new(1,-scroll_width,0,0)
&#9;&#9;VScroll.GUI.Size = UDim2.new(0,scroll_width,1,-scroll_width)
&#9;&#9;VScroll.GUI.Parent = ParentFrame
&#9;&#9;local VUpdate = VScroll.Update
&#9;&#9;VScroll.UpdateCallback = function()
&#9;&#9;&#9;Container.Position = UDim2.new(0,Container.Position.X.Offset,0,-VScroll.ScrollIndex)
&#9;&#9;end
&#9;&#9;
&#9;&#9;local HScroll = CreateScrollBar(true,scroll_width)
&#9;&#9;HScroll.PageIncrement = scroll_width
&#9;&#9;HScroll.GUI.Position = UDim2.new(0,0,1,-scroll_width)
&#9;&#9;HScroll.GUI.Size = UDim2.new(1,-scroll_width,0,scroll_width)
&#9;&#9;HScroll.GUI.Parent = ParentFrame
&#9;&#9;local HUpdate = HScroll.Update
&#9;&#9;HScroll.UpdateCallback = function()
&#9;&#9;&#9;Container.Position = UDim2.new(0,-HScroll.ScrollIndex,0,Container.Position.Y.Offset)
&#9;&#9;end

&#9;&#9;Boundary.Size = UDim2.new(1,-scroll_width,1,-scroll_width)
&#9;&#9;
&#9;&#9;local function Update()
&#9;&#9;&#9;VUpdate()
&#9;&#9;&#9;HUpdate()
&#9;&#9;end
&#9;&#9;
&#9;&#9;local function SizeChanged(p)
&#9;&#9;&#9;if p == &quot;AbsoluteSize&quot; then
&#9;&#9;&#9;&#9;VScroll.TotalSpace = Container.AbsoluteSize.y
&#9;&#9;&#9;&#9;VScroll.VisibleSpace = Boundary.AbsoluteSize.y
&#9;&#9;&#9;&#9;HScroll.TotalSpace = Container.AbsoluteSize.x
&#9;&#9;&#9;&#9;HScroll.VisibleSpace = Boundary.AbsoluteSize.x
&#9;&#9;&#9;&#9;Update()
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;Boundary.Changed:connect(SizeChanged)
&#9;&#9;Container.Changed:connect(SizeChanged)
&#9;&#9;Class.VScroll = VScroll
&#9;&#9;Class.HScroll = HScroll
&#9;&#9;Class.Update = Update
&#9;&#9;SizeChanged(&quot;AbsoluteSize&quot;)
&#9;&#9;Update()
&#9;elseif v_scroll then
&#9;&#9;local Scroll = CreateScrollBar(false,scroll_width)
&#9;&#9;Scroll.PageIncrement = scroll_width
&#9;&#9;Scroll.GUI.Position = UDim2.new(1,-scroll_width,0,0)
&#9;&#9;Scroll.GUI.Size = UDim2.new(0,scroll_width,1,0)
&#9;&#9;Scroll.GUI.Parent = ParentFrame
&#9;&#9;local Update = Scroll.Update
&#9;&#9;Scroll.UpdateCallback = function()
&#9;&#9;&#9;Container.Position = UDim2.new(0,Container.Position.X.Offset,0,-Scroll.ScrollIndex)
&#9;&#9;end
&#9;&#9;local function SizeChanged(p)
&#9;&#9;&#9;if p == &quot;AbsoluteSize&quot; then
&#9;&#9;&#9;&#9;Scroll.TotalSpace = Container.AbsoluteSize.y
&#9;&#9;&#9;&#9;Scroll.VisibleSpace = Boundary.AbsoluteSize.y
&#9;&#9;&#9;&#9;Update()
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;Boundary.Changed:connect(SizeChanged)
&#9;&#9;Container.Changed:connect(SizeChanged)
&#9;&#9;Class.VScroll = Scroll
&#9;&#9;Class.Update = Update
&#9;&#9;SizeChanged(&quot;AbsoluteSize&quot;)
&#9;&#9;Update()
&#9;elseif h_scroll then
&#9;&#9;local Scroll = CreateScrollBar(true,scroll_width)
&#9;&#9;Scroll.PageIncrement = scroll_width
&#9;&#9;Scroll.GUI.Position = UDim2.new(0,0,1,-scroll_width)
&#9;&#9;Scroll.GUI.Size = UDim2.new(1,0,0,scroll_width)
&#9;&#9;Scroll.GUI.Parent = ParentFrame
&#9;&#9;local Update = Scroll.Update
&#9;&#9;Scroll.UpdateCallback = function()
&#9;&#9;&#9;Container.Position = UDim2.new(0,-Scroll.ScrollIndex,0,Container.Position.Y.Offset)
&#9;&#9;end
&#9;&#9;local function SizeChanged(p)
&#9;&#9;&#9;if p == &quot;AbsoluteSize&quot; then
&#9;&#9;&#9;&#9;Scroll.TotalSpace = Container.AbsoluteSize.x
&#9;&#9;&#9;&#9;Scroll.VisibleSpace = Boundary.AbsoluteSize.x
&#9;&#9;&#9;&#9;Update()
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;Boundary.Changed:connect(SizeChanged)
&#9;&#9;Container.Changed:connect(SizeChanged)
&#9;&#9;Class.HScroll = Scroll
&#9;&#9;Class.Update = Update
&#9;&#9;SizeChanged(&quot;AbsoluteSize&quot;)
&#9;&#9;Update()
&#9;end
&#9;
&#9;return Class,ParentFrame
end

lib.ScrollingContainer = CreateScrollingContainer

--[[DEPEND:
SetZIndex.lua;
Stylist.lua;
Graphic.lua;
ScrollBar.lua;
]]

doc[&quot;DetailedList&quot;] = [==[
DetailedList ( table `row_data_list`, table `column_scheme`, number `row_height` ) [constructor]
&#9;returns: DetailedList `object`, Frame `list_frame`

Creates a customizable list for displaying data.

Arguments:
&#9;`row_data_list`
&#9;&#9;Holds all the data to be displayed.
&#9;&#9;It contains tables that hold data for each row in the list (see Row Data).
&#9;&#9;Optional; defaults to an empty table.

&#9;`column_scheme`
&#9;&#9;Contains information for how each column will be displayed (see Column Scheme).
&#9;&#9;
&#9;`row_height`
&#9;&#9;Sets the height of each row, in pixels.
&#9;&#9;Optional; defaults to ]==]..ENTRY_SIZE..[==[

Returns:
&#9;`object`
&#9;&#9;The DetailedList object.
&#9;&#9;
&#9;`list_frame`
&#9;&#9;The DetailedList GUI.


DetailedList Class:
&#9;This class contains the following members:
&#9;
&#9;Readonly:
&#9;&#9;GUI
&#9;&#9;&#9;The DetailedList GUI.

&#9;&#9;Data
&#9;&#9;&#9;The `row_data_list` table.

&#9;&#9;Scroll
&#9;&#9;&#9;A class for the list&apos;s scroll bar.

&#9;&#9;Stylist
&#9;&#9;&#9;A table that contains Stylist classes for controlling the appearance of the DetailedList.
&#9;&#9;&#9;It contains the following values:
&#9;&#9;&#9;&#9;Global: Every object in the DetailedList
&#9;&#9;&#9;&#9;Cell: Every cell in list
&#9;&#9;&#9;&#9;Header: Each cell the top (header) row of the list.
&#9;&#9;&#9;&#9;RowSpan: Each cell container of each row.
&#9;&#9;&#9;&#9;Rows: A table that contains Stylists for each row in the list, referenced by the row&apos;s data table.
&#9;&#9;&#9;&#9;Columns: A table that contains Stylists for each column in the list.

&#9;Methods:
&#9;&#9;AddRow ( table `row_data`, number `index`, table `style` )
&#9;&#9;&#9;Adds a new row to the list.
&#9;&#9;&#9;`row_data` is the data to display in the row.
&#9;&#9;&#9;If `index` is specified, then the row will be added to that place in the list, instead of the end.
&#9;&#9;&#9;If `style` is specified, then the row&apos;s Stylist will be created with it.
&#9;&#9;&#9;Returns the row&apos;s data table.

&#9;&#9;RemoveRow ( number `index` )
&#9;&#9;&#9;Removes a row from the list.
&#9;&#9;&#9;`index` may be a numerical index in the list, or a row data table in the list.
&#9;&#9;&#9;Returns the removed row&apos;s data table.

&#9;&#9;UpdateRow ( number `index` )
&#9;&#9;&#9;Updates the specified row to reflect the data in `row_data_list`
&#9;&#9;&#9;`index` may be a numerical index in the list, or a row data table in the list.

&#9;&#9;Update ( )
&#9;&#9;&#9;Updates the display.

&#9;&#9;Destroy ( )
&#9;&#9;&#9;Releases the resources used by this object.
&#9;&#9;&#9;Run this if you&apos;re no longer using this object.


Column Scheme:
&#9;The column scheme is a list of tables, each representing a column that will appear in the DetailedList.
&#9;Each of these tables contain the following entries:
&#9;&#9;[&quot;type&quot;] = (string)
&#9;&#9;&#9;Indicates the data type of the column.
&#9;&#9;&#9;More entries may be required depending on the type (see Column Scheme Types).
&#9;&#9;[&quot;name&quot;] = (string)
&#9;&#9;&#9;The name of the column. This will appear in the header at the top.
&#9;&#9;[&quot;width&quot;] = (UDim)
&#9;&#9;&#9;The width of the column.
&#9;&#9;[&quot;style&quot;] = (table)
&#9;&#9;&#9;Optional. Defines a custom style for the column.
&#9;&#9;&#9;If defined, then it will become the corresponding stylist in `object`.Stylist.Columns.


Row Data:
&#9;A row data table holds the data for each cell of a row.
&#9;Each entry corresponds to each cell in the row.
&#9;Their types should match up with the column scheme (see Column Scheme Types).

&#9;Example (for scheme {&quot;check-box&quot;, &quot;image&quot;, &quot;text&quot;}):
&#9;&#9;row_data_list = {
&#9;&#9;&#9;{true, &quot;flower.png&quot;, &quot;Flowers&quot;};
&#9;&#9;&#9;{false, &quot;beehive.png&quot;, &quot;Bees&quot;};
&#9;&#9;}


Column Scheme Types:
&#9;Here are the possible data types, and their extra entries:
&#9;&#9;text
&#9;&#9;&#9;Row Data: string
&#9;&#9;&#9;&#9;The text to display in the cell.
&#9;&#9;&#9;Entries: none
&#9;&#9;image
&#9;&#9;&#9;Row Data: string
&#9;&#9;&#9;&#9;The Content string of the image to display in the cell.
&#9;&#9;&#9;Entries: none
&#9;&#9;text-button
&#9;&#9;&#9;Row Data: string
&#9;&#9;&#9;&#9;The text to display in the cell.
&#9;&#9;&#9;Entries:
&#9;&#9;&#9;&#9;[&quot;callback&quot;] = function (table `row_data`, table `object`)
&#9;&#9;&#9;&#9;&#9;Called when the button is clicked.
&#9;&#9;&#9;&#9;&#9;`row_data` is the button&apos;s row data.
&#9;&#9;&#9;&#9;&#9;`object` is the DetailedList object.
&#9;&#9;image-button
&#9;&#9;&#9;Row Data: string
&#9;&#9;&#9;&#9;The Content string of the image to display in the cell.
&#9;&#9;&#9;Entries:
&#9;&#9;&#9;&#9;[&quot;callback&quot;] = function (table `row_data`, table `object`)
&#9;&#9;&#9;&#9;&#9;Called when the button is clicked.
&#9;&#9;&#9;&#9;&#9;`row_data` is the button&apos;s row data.
&#9;&#9;&#9;&#9;&#9;`object` is the DetailedList object.
&#9;&#9;text-field
&#9;&#9;&#9;Row Data: string
&#9;&#9;&#9;&#9;The value displayed in the text field.
&#9;&#9;&#9;Entries:
&#9;&#9;&#9;&#9;[&quot;callback&quot;] = function (string `text`, table `row_data`, table `object`, bool `entered`)
&#9;&#9;&#9;&#9;&#9;Called when the field loses focus.
&#9;&#9;&#9;&#9;&#9;`text` is the field&apos;s current text.
&#9;&#9;&#9;&#9;&#9;`row_data` is the field&apos;s row data.
&#9;&#9;&#9;&#9;&#9;`object` is the DetailedList object.
&#9;&#9;&#9;&#9;&#9;`entered` is whether the user pressed enter to lose focus.
&#9;&#9;&#9;&#9;&#9;This function should return a string (usually same as `text`).
&#9;&#9;&#9;&#9;&#9;If nil or false is returned, then the field will be reverted to the text before the change.
&#9;&#9;check-box
&#9;&#9;&#9;Row Data: bool
&#9;&#9;&#9;&#9;The state of the check box.
&#9;&#9;&#9;Entries:
&#9;&#9;&#9;&#9;[&quot;checked&quot;] = string, table
&#9;&#9;&#9;&#9;&#9;The image (Content string) to display when the box is checked.
&#9;&#9;&#9;&#9;&#9;If a table, its entries are the arguments to make a new Graphic.
&#9;&#9;&#9;&#9;[&quot;unchecked&quot;] = string, table
&#9;&#9;&#9;&#9;&#9;The image (Content string) to display when the box is unchecked.
&#9;&#9;&#9;&#9;&#9;If a table, its entries are the arguments to make a new Graphic.
&#9;&#9;&#9;&#9;[&quot;callback&quot;] = function (table `row_data`, table `object`)
&#9;&#9;&#9;&#9;&#9;Called when the check box is clicked.
&#9;&#9;&#9;&#9;&#9;`row_data` is the button&apos;s row data.
&#9;&#9;&#9;&#9;&#9;`object` is the DetailedList object.
&#9;&#9;&#9;&#9;&#9;This function should return a bool, indicating if the check box should toggle its state.
&#9;&#9;drop-list (NOT IMPLEMENTED)
&#9;&#9;&#9;Row Data: string
&#9;&#9;&#9;&#9;The value displayed in the drop list.
&#9;&#9;&#9;Entries:
&#9;&#9;&#9;&#9;[&quot;items&quot;] = table
&#9;&#9;&#9;&#9;&#9;A list of items to appear in the drop list.
]==]

--[==[EXCLUDE:
detailed list notes

&#9;updating will take much more processing, due to amount of info per row
&#9;there aren&apos;t going to be millions of rows
&#9;so, go back to having frames for each row
&#9;but, still use row indexing
&#9;on update, stop displaying displayed rows, query new rows, display them

&#9;row frames in the RowFramesList table are referenced by data rows in the RowDataList table

&#9;PANIC: columns have a fixed width
&#9;when updating, resize each cell width using one of the following options:
&#9;-&gt;&#9;basic: columns have fixed, perminent width, defined by column scheme, calculated once on row addition
&#9;&#9;detailed view-like: columns have fixed width regardless of row content, recalculated when column tab is resized
&#9;&#9;table-like: each column width is recalculated based on its content, when a row is added/removed (expensive)

&#9;entry scheme:
&#9;&#9;a table that describes an entry to the list
&#9;&#9;keys are sequential, describing a part of the entry

&#9;&#9;Entry Data:
&#9;&#9;&#9;For a cell type, the acceptable entry data type is defined below.
&#9;&#9;&#9;If the entry is a table instead, the first value in that table is the original data,
&#9;&#9;&#9;while other keys defined will set the corresponding property of the cell.
&#9;&#9;&#9;Example:
&#9;&#9;&#9;&#9;As Data Type:&#9;&quot;A string&quot;
&#9;&#9;&#9;&#9;As Table:&#9;&#9;{&quot;A string&quot;, TextColor3 = Color3.new(1,0,0)}
&#9;&#9;Types:
&#9;&#9;Column Scheme Definition:&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Entry Data:
&#9;&#9;{&quot;text&quot;};&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;string
&#9;&#9;{&quot;image&quot;};&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;string
&#9;&#9;{&quot;text-button&quot;, callback = function};&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;string
&#9;&#9;{&quot;image-button&quot;, callback = function};&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;string
&#9;&#9;{&quot;text-field&quot;, callback = function};&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;string
&#9;&#9;{&quot;check-box&quot;, checked = string, unchecked = string, callback};&#9;&#9;bool
&#9;&#9;{&quot;drop-list&quot;, items = table};&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;string

&#9;&#9;Each scheme has a &apos;name&apos; key (string) and a &apos;width&apos; key (UDim), which define he name and width of the column
&#9;&#9;Each scheme can also have a &apos;style&apos; key, who&apos;s value is a table that defines properties for each cell as columns
]==]

local function CreateDetailedList(RowDataList,ColumnScheme,rowHeight)
&#9;RowDataList = RowDataList or {}
&#9;rowHeight = rowHeight or ENTRY_SIZE
&#9;local viewHeight = 0
&#9;local numRows = math.floor(viewHeight/rowHeight)
&#9;local scrollIndex = 0

&#9;local RowFramesList = {}&#9;-- holds a list of frames associated with RowDataList entries. This list is independent of RowDataList, and may be resorted
&#9;local RowFrameLookup = {}&#9;-- [data]=frame references
&#9;local RowDataLookup = {}&#9;-- [frame]=data references; it would be nice if this didn&apos;t have to exist
&#9;local DisplayedRows = {}&#9;-- a list of currently displayed row frames
&#9;local CellMetadata = {}&#9;&#9;-- extra data associated with a cell

&#9;local DetailedListFrame = Create&apos;Frame&apos;{
&#9;&#9;Size = UDim2.new(0,300,0,200);
&#9;&#9;BackgroundTransparency = 1;
&#9;&#9;Create&apos;Frame&apos;{
&#9;&#9;&#9;Name = &quot;ListViewFrame&quot;;
&#9;&#9;&#9;BackgroundTransparency = 1;
&#9;&#9;&#9;Size = UDim2.new(1,-rowHeight,1,-rowHeight);
&#9;&#9;&#9;Position = UDim2.new(0,0,0,rowHeight);
&#9;&#9;};
&#9;&#9;Create&apos;Frame&apos;{
&#9;&#9;&#9;Name = &quot;ColumnHeaderFrame&quot;;
&#9;&#9;&#9;BackgroundTransparency = 1;
&#9;&#9;&#9;Size = UDim2.new(1,-rowHeight,0,rowHeight);
&#9;&#9;&#9;Position = UDim2.new(0,0,0,0);
&#9;&#9;};
&#9;}
&#9;
&#9;local ListViewFrame = DetailedListFrame.ListViewFrame
&#9;local ColumnHeaderFrame = DetailedListFrame.ColumnHeaderFrame

---- Stylists
&#9;local GlobalStylist = CreateStylist{&#9;&#9;-- for all objects
&#9;&#9;TextColor3&#9;&#9;&#9;= Color3.new(1,1,1);
&#9;--&#9;TextXAlignment&#9;&#9;= Enum.TextXAlignment.Center;
&#9;--&#9;TextYAlignment&#9;&#9;= Enum.TextYAlignment.Center;
&#9;&#9;TextTransparency&#9;= 0;
&#9;&#9;Font&#9;&#9;&#9;&#9;= Enum.Font.ArialBold;
&#9;&#9;FontSize&#9;&#9;&#9;= Enum.FontSize.Size14;
&#9;}
&#9;local CellStylist = CreateStylist{&#9;&#9;-- for all cells
&#9;&#9;BackgroundColor3&#9;&#9;= Color3.new(0,0,0);
&#9;&#9;BorderColor3&#9;&#9;&#9;= Color3.new(1,1,1);
&#9;&#9;BorderSizePixel&#9;&#9;&#9;= 1;
&#9;&#9;BackgroundTransparency&#9;= 0.7;
&#9;}
&#9;GlobalStylist.AddStylist(CellStylist)
&#9;local HeaderStylist = CreateStylist{&#9;&#9;-- for all column headers
&#9;&#9;BackgroundColor3&#9;&#9;= Color3.new(1,1,1);
&#9;&#9;BorderColor3&#9;&#9;&#9;= Color3.new(1,1,1);
&#9;&#9;BorderSizePixel&#9;&#9;&#9;= 1;
&#9;&#9;BackgroundTransparency&#9;= 0.8;
&#9;}
&#9;GlobalStylist.AddStylist(HeaderStylist)
&#9;local RowSpanStylist = CreateStylist{&#9;&#9;-- for cell container of each row
&#9;&#9;BackgroundTransparency&#9;= 1;
&#9;}
&#9;GlobalStylist.AddStylist(RowSpanStylist)
&#9;local RowStylists = {}&#9;&#9;&#9;&#9;-- list of stylists for each row
&#9;local ColumnStylists = {}&#9;&#9;&#9;-- list of stylists for each column

&#9;local Scroll,ScrollBarFrame = CreateScrollBar(false,rowHeight)
&#9;Modify(ScrollBarFrame){
&#9;&#9;Size = UDim2.new(0,rowHeight,1,-rowHeight);
&#9;&#9;Position = UDim2.new(1,-rowHeight,0,rowHeight);
&#9;&#9;Parent = DetailedListFrame;
&#9;}

&#9;local Update = Scroll.Update

---- DetailedList Class
&#9;local Class = {
&#9;&#9;Data = RowDataList;
&#9;&#9;GUI = DetailedListFrame;
&#9;&#9;Stylist = {
&#9;&#9;&#9;Global = GlobalStylist;
&#9;&#9;&#9;Cell = CellStylist;
&#9;&#9;&#9;Header = HeaderStylist;
&#9;&#9;&#9;RowSpan = RowSpanStylist;
&#9;&#9;&#9;Rows = RowStylists;
&#9;&#9;&#9;Columns = ColumnStylists;
&#9;&#9;};
&#9;&#9;Update = Update;
&#9;}
&#9;
&#9;-- update row display
&#9;local event_id = 0
&#9;Scroll.UpdateCallback = function()
&#9;&#9;event_id = event_id + 1
&#9;&#9;local current_id = event_id
&#9;&#9;-- stop displaying previous rows
&#9;&#9;for i,row in pairs(DisplayedRows) do
&#9;&#9;&#9;if event_id ~= current_id then return end
&#9;&#9;&#9;row.Visible = false
&#9;&#9;&#9;DisplayedRows[i] = nil
&#9;&#9;end
&#9;&#9;-- query and display current rows
&#9;&#9;for i = 1,Scroll.VisibleSpace do
&#9;&#9;&#9;if event_id ~= current_id then return end
&#9;&#9;&#9;local row = RowFramesList[i + Scroll.ScrollIndex]
&#9;&#9;&#9;if row then
&#9;&#9;&#9;&#9;DisplayedRows[#DisplayedRows+1] = row
&#9;&#9;&#9;&#9;row.Position = UDim2.new(0,0,0,(i-1)*rowHeight)
&#9;&#9;&#9;&#9;row.Size = UDim2.new(1,0,0,rowHeight)
&#9;&#9;&#9;&#9;row.Visible = true
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;
&#9;ListViewFrame.Changed:connect(function(p)
&#9;&#9;if p == &quot;AbsoluteSize&quot; then
&#9;&#9;&#9;Scroll.VisibleSpace = math.floor(ListViewFrame.AbsoluteSize.y/rowHeight)
&#9;&#9;&#9;Update()
&#9;&#9;end
&#9;end)

---- Row Sorting
&#9;local SortGraphic = Create&apos;Frame&apos;{
&#9;&#9;Name = &quot;SortGraphic&quot;;
&#9;&#9;BackgroundTransparency = 1;
&#9;&#9;Size = UDim2.new(0,rowHeight,0,rowHeight);
&#9;&#9;Position = UDim2.new(1,-rowHeight*0.75,0.5,-rowHeight/8);
&#9;}
&#9;local GraphicTextAlias = {[&quot;TextColor3&quot;]=&quot;BackgroundColor3&quot;;[&quot;TextTransparency&quot;]=&quot;BackgroundTransparency&quot;;[&quot;BorderSizePixel&quot;]=&quot;&quot;}
&#9;
&#9;local SortUpG,SortUp = CreateGraphic(&quot;arrow-up&quot;,Vector2.new(rowHeight,rowHeight))
&#9;GlobalStylist.AddStylist(SortUpG.Stylist,GraphicTextAlias)
&#9;SortUp.Visible = false
&#9;SortUp.Parent = SortGraphic
&#9;
&#9;local SortDownG,SortDown = CreateGraphic(&quot;arrow-down&quot;,Vector2.new(rowHeight,rowHeight))
&#9;GlobalStylist.AddStylist(SortDownG.Stylist,GraphicTextAlias)
&#9;SortDown.Visible = false
&#9;SortDown.Parent = SortGraphic
&#9;
&#9;-- sets the direction (up or down) and parent (column header)
&#9;local function SetSortGraphic(direction,parent)
&#9;&#9;if parent then
&#9;&#9;&#9;if parent.TextXAlignment == Enum.TextXAlignment.Right then
&#9;&#9;&#9;&#9;SortGraphic.Position = UDim2.new(0,0,0,0)
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;SortGraphic.Position = UDim2.new(1,-rowHeight,0,0)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;if direction &gt; 0 then
&#9;&#9;&#9;SortUp.Visible = true
&#9;&#9;&#9;SortDown.Visible = false
&#9;&#9;&#9;if SortGraphic.ZIndex ~= parent.ZIndex then
&#9;&#9;&#9;&#9;SetZIndex(SortGraphic,parent.ZIndex)
&#9;&#9;&#9;end
&#9;&#9;&#9;SortGraphic.Parent = parent
&#9;&#9;elseif direction &lt; 0 then
&#9;&#9;&#9;SortUp.Visible = false
&#9;&#9;&#9;SortDown.Visible = true
&#9;&#9;&#9;if SortGraphic.ZIndex ~= parent.ZIndex then
&#9;&#9;&#9;&#9;SetZIndex(SortGraphic,parent.ZIndex)
&#9;&#9;&#9;end
&#9;&#9;&#9;SortGraphic.Parent = parent
&#9;&#9;else
&#9;&#9;&#9;SortUp.Visible = false
&#9;&#9;&#9;SortDown.Visible = false
&#9;&#9;&#9;SortGraphic.Parent = nil
&#9;&#9;end
&#9;end
&#9;
&#9;-- sorts a column (at index) by a sort type (ascending/descending/none)
&#9;-- will eventually be added to class
&#9;local function SortColumn(index,sort_type)
&#9;&#9;-- re-sort to original sorting
&#9;&#9;for i,data in pairs(RowDataList) do
&#9;&#9;&#9;RowFramesList[i] = RowFrameLookup[data]
&#9;&#9;end
&#9;&#9;local header = ColumnHeaderFrame:GetChildren()[index] -- eww
&#9;&#9;SetSortGraphic(0)
&#9;&#9;-- sort depending on type, if provided
&#9;&#9;if sort_type == SORT.ASCENDING then
&#9;&#9;&#9;table.sort(RowFramesList,function(a,b)
&#9;&#9;&#9;&#9;local adata,bdata = RowDataLookup[a][index],RowDataLookup[b][index]
&#9;&#9;&#9;&#9;-- a and b should always have the same type
&#9;&#9;&#9;&#9;local t = type(adata)
&#9;&#9;&#9;&#9;if t == &quot;table&quot; then
&#9;&#9;&#9;&#9;&#9;adata,bdata = adata[1],bdata[1]
&#9;&#9;&#9;&#9;&#9;t = type(adata)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if t == &quot;boolean&quot; then
&#9;&#9;&#9;&#9;&#9;return tostring(adata) &gt; tostring(bdata)
&#9;&#9;&#9;&#9;elseif t == &quot;number&quot; or t == &quot;string&quot; then
&#9;&#9;&#9;&#9;&#9;return adata &lt; bdata
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;return tostring(adata) &lt; tostring(bdata)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end)
&#9;&#9;&#9;SetSortGraphic(1,header)
&#9;&#9;elseif sort_type == SORT.DESCENDING then
&#9;&#9;&#9;table.sort(RowFramesList,function(a,b)
&#9;&#9;&#9;&#9;local adata,bdata = RowDataLookup[a][index],RowDataLookup[b][index]
&#9;&#9;&#9;&#9;-- a and b should always have the same type
&#9;&#9;&#9;&#9;local t = type(adata)
&#9;&#9;&#9;&#9;if t == &quot;table&quot; then
&#9;&#9;&#9;&#9;&#9;adata,bdata = adata[1],bdata[1]
&#9;&#9;&#9;&#9;&#9;t = type(adata)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if t == &quot;boolean&quot; then
&#9;&#9;&#9;&#9;&#9;return tostring(adata) &lt; tostring(bdata)
&#9;&#9;&#9;&#9;elseif t == &quot;number&quot; or t == &quot;string&quot; then
&#9;&#9;&#9;&#9;&#9;return adata &gt; bdata
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;return tostring(adata) &gt; tostring(bdata)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end)
&#9;&#9;&#9;local header = ColumnHeaderFrame:GetChildren()[index]
&#9;&#9;&#9;SetSortGraphic(-1,header)
&#9;&#9;end
&#9;&#9;Update()
&#9;end

---- Initialize column scheme
&#9;local RowTemplate = Create&apos;Frame&apos;{
&#9;&#9;Name = &quot;Row&quot;;
&#9;&#9;Visible = false;
&#9;}

&#9;-- appends a space character to aligned text as cheap padding
&#9;local function SetText(frame,text)
&#9;&#9;if text == nil then
&#9;&#9;&#9;frame.Text = &quot;&quot;;
&#9;&#9;else
&#9;&#9;&#9;text = tostring(text)
&#9;&#9;&#9;if #text &gt; 0 and frame.TextXAlignment ~= Enum.TextXAlignment.Center then
&#9;&#9;&#9;&#9;if frame.TextXAlignment == Enum.TextXAlignment.Left then
&#9;&#9;&#9;&#9;&#9;frame.Text = &quot; &quot; .. text
&#9;&#9;&#9;&#9;elseif frame.TextXAlignment == Enum.TextXAlignment.Right then
&#9;&#9;&#9;&#9;&#9;frame.Text = text .. &quot; &quot;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;frame.Text = text
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;
&#9;-- used by check-box, which uses either an image or a Graphic.
&#9;local function SetImageOrGraphic(cell,active)
&#9;&#9;local md = CellMetadata[cell]
&#9;&#9;local checked,unchecked = md.Checked,md.Unchecked
&#9;&#9;if type(unchecked) == &quot;string&quot; then
&#9;&#9;&#9;cell.Image = active and &quot;&quot; or unchecked
&#9;&#9;elseif type(unchecked) == &quot;table&quot; then
&#9;&#9;&#9;if active then
&#9;&#9;&#9;&#9;unchecked.GUI.Parent = nil
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;if unchecked.GUI.ZIndex ~= cell.ZIndex then
&#9;&#9;&#9;&#9;&#9;SetZIndex(unchecked.GUI,cell.ZIndex)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;unchecked.GUI.Parent = cell
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;if type(checked) == &quot;string&quot; then
&#9;&#9;&#9;cell.Image = active and checked or &quot;&quot;
&#9;&#9;elseif type(checked) == &quot;table&quot; then
&#9;&#9;&#9;if active then
&#9;&#9;&#9;&#9;if checked.GUI.ZIndex ~= cell.ZIndex then
&#9;&#9;&#9;&#9;&#9;SetZIndex(checked.GUI,cell.ZIndex)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;checked.GUI.Parent = cell
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;checked.GUI.Parent = nil
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;
&#9;local current_sort_header = nil
&#9;local current_sort_type = SORT.NONE

&#9;-- generate a template for rows
&#9;local ColumnHeaderPos = UDim.new()
&#9;for i,cell_scheme in pairs(ColumnScheme) do
&#9;&#9;local columnStylist = CreateStylist(cell_scheme.style)
&#9;&#9;ColumnStylists[i] = columnStylist
&#9;--&#9;CellStylist.AddStylist(columnStylist)
&#9;--&#9;columnStylist.AddStylist(HeaderStylist)
&#9;&#9;local cell_type = cell_scheme.type
&#9;&#9;local template
&#9;&#9;if cell_type == &quot;text&quot; then
&#9;&#9;&#9;template = Instance.new(&quot;TextLabel&quot;,RowTemplate)
&#9;&#9;&#9;template.Name = &quot;Text&quot;
&#9;&#9;elseif cell_type == &quot;image&quot; then
&#9;&#9;&#9;template = Instance.new(&quot;ImageLabel&quot;,RowTemplate)
&#9;&#9;&#9;template.Name = &quot;Image&quot;
&#9;&#9;elseif cell_type == &quot;text-button&quot; then
&#9;&#9;&#9;template = Instance.new(&quot;TextButton&quot;,RowTemplate)
&#9;&#9;&#9;template.Name = &quot;TextButton&quot;
&#9;&#9;elseif cell_type == &quot;image-button&quot; then
&#9;&#9;&#9;template = Instance.new(&quot;ImageButton&quot;,RowTemplate)
&#9;&#9;&#9;template.Name = &quot;ImageButton&quot;
&#9;&#9;elseif cell_type == &quot;text-field&quot; then
&#9;&#9;&#9;template = Instance.new(&quot;TextBox&quot;,RowTemplate)
&#9;&#9;&#9;template.Name = &quot;TextField&quot;
&#9;&#9;&#9;template.ClearTextOnFocus = false
&#9;&#9;elseif cell_type == &quot;check-box&quot; then
&#9;&#9;&#9;template = Instance.new(&quot;ImageButton&quot;,RowTemplate)
&#9;&#9;&#9;template.Name = &quot;CheckBox&quot;
&#9;&#9;end
&#9;&#9;
&#9;&#9;-- create the header row
&#9;&#9;local ColumnHeader = Create&apos;TextButton&apos;{
&#9;&#9;&#9;Name = &quot;ColumnHeader&quot;;
&#9;&#9;&#9;Parent = ColumnHeaderFrame;
&#9;&#9;}
&#9;&#9;HeaderStylist.AddObject(ColumnHeader)
&#9;&#9;columnStylist.AddObject(ColumnHeader)
&#9;&#9;SetText(ColumnHeader,cell_scheme.name)
&#9;&#9;-- sort on click
&#9;&#9;ColumnHeader.MouseButton1Click:connect(function()
&#9;&#9;&#9;if current_sort_header == ColumnHeader then
&#9;&#9;&#9;&#9;-- cycle between ascending, descending, and none
&#9;&#9;&#9;&#9;if current_sort_type == SORT.ASCENDING then
&#9;&#9;&#9;&#9;&#9;current_sort_type = SORT.DESCENDING
&#9;&#9;&#9;&#9;elseif current_sort_type == SORT.DESCENDING then
&#9;&#9;&#9;&#9;&#9;current_sort_type = SORT.NONE
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;current_sort_type = SORT.ASCENDING
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;current_sort_type = SORT.ASCENDING
&#9;&#9;&#9;end
&#9;&#9;&#9;current_sort_header = ColumnHeader
&#9;&#9;&#9;SortColumn(i,current_sort_type)
&#9;&#9;end)
&#9;&#9;local Width = cell_scheme.width
&#9;&#9;ColumnHeader.Size = UDim2.new(Width.Scale,Width.Offset,1,0)
&#9;&#9;ColumnHeader.Position = UDim2.new(ColumnHeaderPos.Scale,ColumnHeaderPos.Offset,0,0)
&#9;&#9;ColumnHeaderPos = ColumnHeaderPos + Width
&#9;end
&#9;ColumnHeaderPos = nil

---- Class functions

&#9;-- update the row frame to reflect the row data
&#9;function Class.UpdateRow(index)
&#9;&#9;local RowData
&#9;&#9;if type(index) == &quot;number&quot; then
&#9;&#9;&#9;RowData = RowDataList[index]
&#9;&#9;else
&#9;&#9;&#9;RowData = index
&#9;&#9;end

&#9;&#9;local Row = RowFrameLookup[RowData]
&#9;&#9;local Cells = Row:GetChildren() -- eww
&#9;&#9;local CellColPos = UDim.new()
&#9;&#9;for i,cell_scheme in pairs(ColumnScheme) do
&#9;&#9;&#9;local cell_type = cell_scheme.type
&#9;&#9;&#9;local Cell = Cells[i]
&#9;&#9;&#9;local CellData = RowData[i]
&#9;&#9;&#9;local Width = cell_scheme.width
&#9;&#9;&#9;if cell_type == &quot;text&quot; then
&#9;&#9;&#9;&#9;SetText(Cell,CellData)
&#9;&#9;&#9;elseif cell_type == &quot;image&quot; then
&#9;&#9;&#9;&#9;Cell.Image = CellData
&#9;&#9;&#9;elseif cell_type == &quot;text-button&quot; then
&#9;&#9;&#9;&#9;SetText(Cell,CellData)
&#9;&#9;&#9;elseif cell_type == &quot;image-button&quot; then
&#9;&#9;&#9;&#9;Cell.Image = CellData
&#9;&#9;&#9;elseif cell_type == &quot;text-field&quot; then
&#9;&#9;&#9;&#9;SetText(Cell,CellData)
&#9;&#9;&#9;elseif cell_type == &quot;check-box&quot; then
&#9;&#9;&#9;&#9;SetImageOrGraphic(Cell,CellData)
&#9;&#9;&#9;end
&#9;&#9;&#9;Cell.Size = UDim2.new(Width.Scale,Width.Offset,1,0) -- this would be a lot easier if UDim2.new accepts UDims
&#9;&#9;&#9;Cell.Position = UDim2.new(CellColPos.Scale,CellColPos.Offset,0,0)
&#9;&#9;&#9;CellColPos = CellColPos + Width
&#9;&#9;end
&#9;end

&#9;-- add a new row to the list; optional list index
&#9;function Class.AddRow(RowData,index,style)
&#9;&#9;-- TODO: verify that data matches column scheme
&#9;&#9;local NewRow = RowTemplate:Clone()
&#9;&#9;if index then
&#9;&#9;&#9;index = index &gt; #RowDataList+1 and #RowDataList+1 or index &lt; 1 and 1 or index
&#9;&#9;&#9;table.insert(RowDataList,index,RowData)
&#9;&#9;&#9;table.insert(RowFramesList,index,NewRow)
&#9;&#9;else
&#9;&#9;&#9;table.insert(RowDataList,RowData)
&#9;&#9;&#9;table.insert(RowFramesList,NewRow)
&#9;&#9;end
&#9;&#9;Scroll.TotalSpace = #RowDataList
&#9;&#9;RowSpanStylist.AddObject(NewRow)
&#9;&#9;NewRow.Size = UDim2.new(1,0,0,rowHeight)
&#9;&#9;NewRow.ZIndex = DetailedListFrame.ZIndex
&#9;&#9;NewRow.Parent = ListViewFrame
&#9;&#9;local Cells = NewRow:GetChildren()
&#9;&#9;local CellColPos = UDim.new()
&#9;&#9;local rowStylist = CreateStylist(style)
&#9;&#9;RowStylists[RowData] = rowStylist
&#9;--&#9;CellStylist.AddStylist(rowStylist)
&#9;&#9;for i,cell_scheme in pairs(ColumnScheme) do
&#9;&#9;&#9;local cell_type = cell_scheme.type
&#9;&#9;&#9;local Cell = Cells[i]
&#9;&#9;&#9;Cell.ZIndex = DetailedListFrame.ZIndex
&#9;&#9;&#9;CellStylist.AddObject(Cell)
&#9;&#9;&#9;ColumnStylists[i].AddObject(Cell)
&#9;&#9;&#9;rowStylist.AddObject(Cell)
&#9;&#9;&#9;local CellData = RowData[i]
&#9;&#9;&#9;local Width = cell_scheme.width
&#9;&#9;&#9;if cell_type == &quot;text&quot; then
&#9;&#9;&#9;&#9;SetText(Cell,CellData)
&#9;&#9;&#9;elseif cell_type == &quot;image&quot; then
&#9;&#9;&#9;&#9;Cell.Image = CellData
&#9;&#9;&#9;elseif cell_type == &quot;text-button&quot; then
&#9;&#9;&#9;&#9;SetText(Cell,CellData)
&#9;&#9;&#9;&#9;Cell.MouseButton1Click:connect(function()
&#9;&#9;&#9;&#9;&#9;cell_scheme.callback(RowData,Class)
&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;elseif cell_type == &quot;image-button&quot; then
&#9;&#9;&#9;&#9;Cell.Image = CellData
&#9;&#9;&#9;&#9;Cell.MouseButton1Click:connect(function()
&#9;&#9;&#9;&#9;&#9;cell_scheme.callback(RowData,Class)
&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;elseif cell_type == &quot;text-field&quot; then
&#9;&#9;&#9;&#9;SetText(Cell,CellData)
&#9;&#9;&#9;&#9;local last_text = CellData
&#9;&#9;&#9;&#9;Cell.FocusLost:connect(function(enter)
&#9;&#9;&#9;&#9;&#9;local text = cell_scheme.callback(Cell.Text,RowData,Class,enter)
&#9;&#9;&#9;&#9;&#9;if text then
&#9;&#9;&#9;&#9;&#9;&#9;RowData[i] = text
&#9;&#9;&#9;&#9;&#9;&#9;SetText(Cell,text)
&#9;&#9;&#9;&#9;&#9;&#9;last_text = text
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;SetText(Cell,last_text)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;elseif cell_type == &quot;check-box&quot; then
&#9;&#9;&#9;&#9;CellMetadata[Cell] = {}
&#9;&#9;&#9;&#9;if type(cell_scheme.checked) == &quot;table&quot; then
&#9;&#9;&#9;&#9;&#9;local graphic = CreateGraphic(cell_scheme.checked[1],cell_scheme.checked[2])
&#9;&#9;&#9;&#9;&#9;SetZIndex(graphic.GUI,DetailedListFrame.ZIndex)
&#9;&#9;&#9;&#9;&#9;GlobalStylist.AddStylist(graphic.Stylist,GraphicTextAlias)
&#9;&#9;&#9;&#9;&#9;CellMetadata[Cell].Checked = graphic
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;CellMetadata[Cell].Checked = cell_scheme.checked
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if type(cell_scheme.unchecked) == &quot;table&quot; then
&#9;&#9;&#9;&#9;&#9;local graphic = CreateGraphic(cell_scheme.unchecked[1],cell_scheme.unchecked[2])
&#9;&#9;&#9;&#9;&#9;SetZIndex(graphic.GUI,DetailedListFrame.ZIndex)
&#9;&#9;&#9;&#9;&#9;GlobalStylist.AddStylist(graphic.Stylist,GraphicTextAlias)
&#9;&#9;&#9;&#9;&#9;CellMetadata[Cell].Unchecked = graphic
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;CellMetadata[Cell].Unchecked = cell_scheme.unchecked
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;SetImageOrGraphic(Cell,CellData)
&#9;&#9;&#9;&#9;Cell.MouseButton1Click:connect(function()
&#9;&#9;&#9;&#9;&#9;local continue = true
&#9;&#9;&#9;&#9;&#9;if cell_scheme.callback then
&#9;&#9;&#9;&#9;&#9;&#9;continue = cell_scheme.callback(RowData,Class)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;if continue then
&#9;&#9;&#9;&#9;&#9;&#9;RowData[i] = not RowData[i]
&#9;&#9;&#9;&#9;&#9;&#9;SetImageOrGraphic(Cell,RowData[i])
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;end
&#9;&#9;&#9;Cell.Size = UDim2.new(Width.Scale,Width.Offset,1,0) -- this would be a lot easier if UDim2.new accepts UDims
&#9;&#9;&#9;Cell.Position = UDim2.new(CellColPos.Scale,CellColPos.Offset,0,0)
&#9;&#9;&#9;CellColPos = CellColPos + Width
&#9;&#9;end
&#9;&#9;RowFrameLookup[RowData] = NewRow
&#9;&#9;RowDataLookup[NewRow] = RowData
&#9;&#9;Update()
&#9;&#9;return RowData
&#9;end

&#9;-- remove entry from the list; may be a list index or an item in the list
&#9;function Class.RemoveRow(index)
&#9;&#9;local RowData
&#9;&#9;if type(index) == &quot;number&quot; or type(index) == &quot;nil&quot; then
&#9;&#9;&#9;RowData = table.remove(RowDataList,index)
&#9;&#9;else
&#9;&#9;&#9;for i,v in pairs(RowDataList) do
&#9;&#9;&#9;&#9;if v == index then
&#9;&#9;&#9;&#9;&#9;RowData = table.remove(RowDataList,i)
&#9;&#9;&#9;&#9;&#9;break
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;if RowData then
&#9;&#9;&#9;local stylist = RowStylists[RowData]
&#9;&#9;&#9;stylist.Destroy()
&#9;&#9;&#9;RowStylists[RowData] = nil

&#9;&#9;&#9;local frame = RowFrameLookup[RowData]
&#9;&#9;&#9;RowDataLookup[frame] = nil
&#9;&#9;&#9;RowFrameLookup[RowData] = nil
&#9;&#9;&#9;for i,rowframe in pairs(RowFramesList) do
&#9;&#9;&#9;&#9;if rowframe == frame then
&#9;&#9;&#9;&#9;&#9;for i,cell in pairs(rowframe:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;&#9;GlobalStylist.RemoveObject(cell)
&#9;&#9;&#9;&#9;&#9;&#9;ColumnStylists[i].RemoveObject(cell)
&#9;&#9;&#9;&#9;&#9;&#9;CellStylist.RemoveObject(cell)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;table.remove(RowFramesList,i)
&#9;&#9;&#9;&#9;&#9;break
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;Scroll.TotalSpace = #RowDataList
&#9;&#9;&#9;for i,rowframe in pairs(DisplayedRows) do
&#9;&#9;&#9;&#9;if rowframe == frame then
&#9;&#9;&#9;&#9;&#9;table.remove(DisplayedRows,i)
&#9;&#9;&#9;&#9;&#9;break
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;frame:Destroy()
&#9;&#9;end
&#9;&#9;Update()
&#9;&#9;return RowData
&#9;end

&#9;do
&#9;&#9;local tmp = {}
&#9;&#9;for k,v in pairs(RowDataList) do
&#9;&#9;&#9;tmp[k] = v
&#9;&#9;&#9;RowDataList[k] = nil
&#9;&#9;end
&#9;&#9;for i=1,#tmp do
&#9;&#9;&#9;Class.AddRow(tmp[i])
&#9;&#9;end
&#9;end

---- Finish

&#9;-- when the list&apos;s Zindex changes, update the ZIndex of everything
&#9;SetZIndexOnChanged(DetailedListFrame)

&#9;-- attempts to free resources
&#9;function Class.Destroy()
&#9;&#9;local function empty_table(t)
&#9;&#9;&#9;for k in pairs(t) do t[k] = nil end
&#9;&#9;end
&#9;&#9;empty_table(Class.Stylist)
&#9;&#9;empty_table(Class)
&#9;&#9;empty_table(RowFramesList)
&#9;&#9;empty_table(RowFrameLookup)
&#9;&#9;empty_table(RowDataLookup)
&#9;&#9;empty_table(DisplayedRows)
&#9;&#9;empty_table(CellMetadata)
&#9;&#9;GlobalStylist.Destroy()
&#9;&#9;CellStylist.Destroy()
&#9;&#9;HeaderStylist.Destroy()
&#9;&#9;RowSpanStylist.Destroy()
&#9;&#9;for k,v in pairs(RowStylists) do
&#9;&#9;&#9;v.Destroy()
&#9;&#9;&#9;RowStylists[k] = nil
&#9;&#9;end
&#9;&#9;for k,v in pairs(ColumnStylists) do
&#9;&#9;&#9;v.Destroy()
&#9;&#9;&#9;ColumnStylists[k] = nil
&#9;&#9;end
&#9;&#9;Scroll.Destroy()
&#9;&#9;RowTemplate:Destroy()
&#9;&#9;DetailedListFrame:Destroy()
&#9;end

&#9;Class.Update()
&#9;
&#9;return Class,DetailedListFrame
end

lib.DetailedList = CreateDetailedList

--[[DEPEND:
SetZIndex.lua;
Stylist.lua;
AutoSizeLabel.lua;
StackingFrame.lua;
]]

doc[&quot;TabContainer&quot;] = [==[
TabContainer ( table `content_list`, number `selected_height`, number `tab_height` ) [constructor]
&#9;returns: TabContainer `object`, Frame `tab_container`

Creates a container that can hold multiple GuiObjects in a single space by using tabs.
A GuiObject added to the container gets its own tab, which shows the GuiObject&apos;s Name, and displays the GuiObject when clicked.

Arguments:
&#9;`content_list`
&#9;&#9;A list of GuiObjects to be initially added to the container.
&#9;&#9;Optional; defaults to an empty table

&#9;`selected_height`
&#9;&#9;The height of a selected tab.
&#9;&#9;Optional; defaults to 24

&#9;`tab_height`
&#9;&#9;The height, in pixels, of a tab that is not selected.
&#9;&#9;Optional; defaults to 20

Returns:
&#9;`object`
&#9;&#9;The TabContainer object.
&#9;`tab_container`
&#9;&#9;The container GUI.


TabContainer Class:
&#9;This class contains the following members:

&#9;Readonly:
&#9;&#9;GUI
&#9;&#9;&#9;The container GUI.

&#9;&#9;TabStylist
&#9;&#9;&#9;A Stylist object that controls the appearance of unselected tabs.
&#9;&#9;&#9;Also controls the appearance of the content border.

&#9;&#9;SelectedTabStylist
&#9;&#9;&#9;A Stylist object that controls the appearance of the selected tab.

&#9;Methods:
&#9;&#9;AddTab ( GuiObject `content`, number `index` )
&#9;&#9;&#9;Adds `content` to the container at `index`.
&#9;&#9;&#9;if `index` is not specified, then it will be added to the end.

&#9;&#9;RemoveTab ( number `index` )
&#9;&#9;&#9;Removes the tab at `index`, and returns the content of that tab.
&#9;&#9;&#9;`index` can also be a GUI in the container.

&#9;&#9;MoveTab ( number `index`, number `to` )
&#9;&#9;&#9;Moves the object at `index` to the index of `to`.
&#9;&#9;&#9;`index` and `to` can also be GUIs in the container.

&#9;&#9;SelectTab ( number `index` )
&#9;&#9;&#9;Selects the tab at `index`.
&#9;&#9;&#9;`index` can also be a GUI in the container.

&#9;&#9;GetIndex ( GuiObject `content` )
&#9;&#9;&#9;Returns the index of `content`.
&#9;&#9;&#9;If `content` isn&apos;t in the container, this returns nil.

&#9;&#9;GetSelectedIndex ( )
&#9;&#9;&#9;Returns the index of the selected tab, and its GUI.

&#9;&#9;Destroy ( )
&#9;&#9;&#9;Releases the resources used by this object.
&#9;&#9;&#9;Run this if you&apos;re no longer using this object.

]==]

local function CreateTabContainer(ContentList,SelectedTabHeight,TabHeight)
&#9;SelectedTabHeight = SelectedTabHeight or 24
&#9;TabHeight = TabHeight or 20
&#9;
&#9;local selected_index = 0
&#9;local content_list = {}
&#9;local tab_lookup = {}
&#9;local con = {}
&#9;
&#9;local TabContainerFrame = Create&apos;Frame&apos;{
&#9;&#9;Name = &quot;TabContainer&quot;;
&#9;&#9;Size = UDim2.new(0,300,0,200);
&#9;&#9;BackgroundTransparency = 1;
&#9;&#9;Create&apos;Frame&apos;{
&#9;&#9;&#9;Name = &quot;Content&quot;;
&#9;&#9;&#9;Size = UDim2.new(1,0,1,-SelectedTabHeight);
&#9;&#9;&#9;Position = UDim2.new(0,0,0,SelectedTabHeight);
&#9;&#9;&#9;BackgroundColor3 = Color3.new();
&#9;&#9;&#9;BorderColor3 = Color3.new(1,1,1);
&#9;&#9;};
&#9;&#9;Create&apos;Frame&apos;{
&#9;&#9;&#9;Parent = TabContainerFrame;
&#9;&#9;&#9;Name = &quot;Tabs&quot;;
&#9;&#9;&#9;BackgroundTransparency = 1;
&#9;&#9;};
&#9;}

&#9;local TabContentFrame = TabContainerFrame.Content
&#9;local TabHeaderFrame = TabContainerFrame.Tabs
&#9;local TabHeaderClass = CreateStackingFrame(TabHeaderFrame,true,true)
&#9;
&#9;local TabStylist = CreateStylist({
&#9;&#9;BackgroundColor3 = Color3.new();
&#9;&#9;BackgroundTransparency = 0.5;
&#9;&#9;BorderColor3 = Color3.new(1,1,1);
&#9;&#9;TextColor3 = Color3.new(0.9,0.9,0.9);
&#9;&#9;BorderSizePixel = 0;
&#9;&#9;Font = &quot;Arial&quot;;
&#9;&#9;FontSize = &quot;Size14&quot;;
&#9;})
&#9;TabStylist.AddObject(TabContentFrame)
&#9;
&#9;local SelectedTabStylist = CreateStylist({
&#9;&#9;BackgroundColor3 = Color3.new();
&#9;&#9;BackgroundTransparency = 0.5;
&#9;&#9;BorderColor3 = Color3.new(1,1,1);
&#9;&#9;TextColor3 = Color3.new(1,1,1);
&#9;&#9;BorderSizePixel = 0;
&#9;&#9;Font = &quot;ArialBold&quot;;
&#9;&#9;FontSize = &quot;Size14&quot;;
&#9;})
&#9;
&#9;local function GetIndex(content)
&#9;&#9;for index,c in pairs(content_list) do
&#9;&#9;&#9;if c == content then
&#9;&#9;&#9;&#9;return index
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;
&#9;local function GetSelectedIndex()
&#9;&#9;return selected_index,content_list[selected_index]
&#9;end
&#9;
&#9;local function ClampIndex(index,i)
&#9;&#9;local max = #content_list + (i or 0)
&#9;&#9;index = math.floor(index)
&#9;&#9;return index &lt; 1 and 1 or index &gt; max and max or index
&#9;end

&#9;local function SelectTab(index)
&#9;&#9;if #content_list &gt; 0 then
&#9;&#9;&#9;if type(index) ~= &quot;number&quot; then
&#9;&#9;&#9;&#9;index = GetIndex(index)
&#9;&#9;&#9;end
&#9;&#9;&#9;if index then
&#9;&#9;&#9;&#9;index = ClampIndex(index)
&#9;&#9;&#9;&#9;if selected_index &gt; 0 then
&#9;&#9;&#9;&#9;&#9;local content = content_list[selected_index]
&#9;&#9;&#9;&#9;&#9;content.Visible = false
&#9;&#9;&#9;&#9;&#9;local Tab = tab_lookup[content]
&#9;&#9;&#9;&#9;&#9;Tab.LockAxis(nil,TabHeight)
&#9;&#9;&#9;&#9;&#9;SelectedTabStylist.RemoveObject(Tab,GUI)
&#9;&#9;&#9;&#9;&#9;TabStylist.AddObject(Tab.GUI)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;local content = content_list[index]
&#9;&#9;&#9;&#9;content.Visible = true
&#9;&#9;&#9;&#9;local Tab = tab_lookup[content]
&#9;&#9;&#9;&#9;Tab.LockAxis(nil,SelectedTabHeight)
&#9;&#9;&#9;&#9;TabStylist.RemoveObject(Tab.GUI)
&#9;&#9;&#9;&#9;SelectedTabStylist.AddObject(Tab.GUI)
&#9;&#9;&#9;&#9;selected_index = index
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;selected_index = 0
&#9;&#9;end
&#9;end
&#9;
&#9;local function AddTab(content,index)
&#9;&#9;if index then
&#9;&#9;&#9;index = ClampIndex(index,1)
&#9;&#9;&#9;table.insert(content_list,index,content)
&#9;&#9;else
&#9;&#9;&#9;table.insert(content_list,content)
&#9;&#9;&#9;index = #content_list
&#9;&#9;end
&#9;&#9;content.Visible = false
&#9;&#9;content.Parent = TabContentFrame
&#9;&#9;
&#9;&#9;local TabFrame = Create&apos;TextButton&apos;{
&#9;&#9;&#9;Name = &quot;Tab&quot;;
&#9;&#9;&#9;Text = content.Name;
&#9;&#9;}
&#9;&#9;local Tab = CreateAutoSizeLabel(TabFrame)
&#9;&#9;tab_lookup[content] = Tab
&#9;&#9;Tab.SetPadding(0,4)
&#9;&#9;Tab.LockAxis(nil,TabHeight)
&#9;&#9;TabStylist.AddObject(TabFrame)
&#9;&#9;TabHeaderClass.AddObject(TabFrame,index)
&#9;&#9;TabFrame.MouseButton1Click:connect(function()
&#9;&#9;&#9;SelectTab(content)
&#9;&#9;end)
&#9;&#9;con[content] = content.Changed:connect(function(p)
&#9;&#9;&#9;if p == &quot;Name&quot; then
&#9;&#9;&#9;&#9;TabFrame.Text = content.Name
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;&#9;if selected_index == 0 then
&#9;&#9;&#9;SelectTab(index)
&#9;&#9;elseif index &lt;= selected_index then
&#9;&#9;&#9;selected_index = selected_index + 1
&#9;&#9;end
&#9;end
&#9;
&#9;local function RemoveTab(index)
&#9;&#9;if #content_list &gt; 0 then
&#9;&#9;&#9;if type(index) ~= &quot;number&quot; then
&#9;&#9;&#9;&#9;if index == nil then
&#9;&#9;&#9;&#9;&#9;index = #content_list
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;index = GetIndex(index)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;if index then
&#9;&#9;&#9;&#9;index = ClampIndex(index)
&#9;&#9;&#9;&#9;local content = table.remove(content_list,index)
&#9;&#9;&#9;&#9;content.Parent = nil
&#9;&#9;&#9;&#9;con[content]:disconnect()
&#9;&#9;&#9;&#9;con[content] = nil
&#9;&#9;&#9;&#9;local tab = tab_lookup[content]
&#9;&#9;&#9;&#9;TabHeaderClass.RemoveObject(index)
&#9;&#9;&#9;&#9;tab_lookup[content] = nil
&#9;&#9;&#9;&#9;tab.Destroy()
&#9;&#9;&#9;&#9;if index == selected_index then
&#9;&#9;&#9;&#9;&#9;SelectTab(index)
&#9;&#9;&#9;&#9;elseif index &lt; selected_index then
&#9;&#9;&#9;&#9;&#9;selected_index = selected_index - 1
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;return content
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;
&#9;local function MoveTab(index,to)
&#9;&#9;if #content_list &gt; 0 then
&#9;&#9;&#9;if type(index) ~= &quot;number&quot; then
&#9;&#9;&#9;&#9;index = GetIndex(index)
&#9;&#9;&#9;end
&#9;&#9;&#9;if type(to) ~= &quot;number&quot; then
&#9;&#9;&#9;&#9;to = GetIndex(to)
&#9;&#9;&#9;end
&#9;&#9;&#9;if index and to then
&#9;&#9;&#9;&#9;index = ClampIndex(index)
&#9;&#9;&#9;&#9;to = ClampIndex(to)
&#9;&#9;&#9;&#9;local content = table.remove(content_list,index)
&#9;&#9;&#9;&#9;table.insert(content_list,to,content)
&#9;&#9;&#9;&#9;TabHeaderClass.MoveObject(index,to)
&#9;&#9;&#9;&#9;if index == selected_index then
&#9;&#9;&#9;&#9;&#9;selected_index = to
&#9;&#9;&#9;&#9;elseif index &gt; selected_index and to &lt;= selected_index then
&#9;&#9;&#9;&#9;&#9;selected_index = selected_index + 1
&#9;&#9;&#9;&#9;elseif index &lt; selected_index and to &gt;= selected_index then
&#9;&#9;&#9;&#9;&#9;selected_index = selected_index - 1
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;
&#9;local Class = {
&#9;&#9;GUI = TabContainerFrame;
&#9;&#9;GetIndex = GetIndex;
&#9;&#9;GetSelectedIndex = GetSelectedIndex;
&#9;&#9;SelectTab = SelectTab;
&#9;&#9;AddTab = AddTab;
&#9;&#9;RemoveTab = RemoveTab;
&#9;&#9;MoveTab = MoveTab;
&#9;&#9;TabStylist = TabStylist;
&#9;&#9;SelectedTabStylist = SelectedTabStylist;
&#9;}
&#9;
&#9;SetZIndexOnChanged(TabContainerFrame)
&#9;
&#9;local function Destroy()
&#9;&#9;for k in pairs(Class) do
&#9;&#9;&#9;Class[k] = nil
&#9;&#9;end
&#9;&#9;SelectedTabStylist.Destroy()
&#9;&#9;TabStylist.Destroy()
&#9;&#9;TabHeaderClass.Destroy()
&#9;&#9;for k,v in pairs(con) do
&#9;&#9;&#9;v:disconnect()
&#9;&#9;&#9;con[k] = nil
&#9;&#9;end
&#9;&#9;for i,content in pairs(content_list) do
&#9;&#9;&#9;content.Parent = nil
&#9;&#9;&#9;content_list[i] = nil
&#9;&#9;end
&#9;&#9;for k,tab in pairs(tab_lookup) do
&#9;&#9;&#9;tab_lookup[k] = nil
&#9;&#9;&#9;tab.Destroy()
&#9;&#9;end
&#9;&#9;TabContainerFrame:Destroy()
&#9;end
&#9;Class.Destroy = Destroy
&#9;
&#9;if ContentList then
&#9;&#9;for i,content in pairs(ContentList) do
&#9;&#9;&#9;AddTab(content,i)
&#9;&#9;end
&#9;end
&#9;
&#9;return Class,TabContainerFrame
end

lib.TabContainer = CreateTabContainer

local dialog = {}
doc[&quot;dialog&quot;] = [==[
&#9;A library of various user-input dialogs.
]==]

--[[DEPEND:
Stylist.lua;
]]

doc[&quot;dialog.Confirm&quot;] = [==[
dialog.Confirm ( GuiBase `parent`, string `message`, Stylist `style`, Stylist `button_style` ) [function]
&#9;returns bool `result`

Displays a confirmation message and waits for the user to click Yes, No, or Cancel.

Arguments:
&#9;`parent`
&#9;&#9;The object to display the dialog in.

&#9;`message`
&#9;&#9;The message to display to the user.
&#9;&#9;Optional; defaults to &quot;Are you sure?&quot;

&#9;`stylist`
&#9;&#9;A stylist to apply to the dialog.
&#9;&#9;Optional; defaults to a premade stylist
&#9;&#9;
&#9;`button_style`
&#9;&#9;A stylist to apply to buttons.
&#9;&#9;Automatically inherits from `stylist`.
&#9;&#9;Optional; defaults to a premade stylist

Returns:
&#9;`result`
&#9;&#9;The result of the dialog.
&#9;&#9;If the user clicked Yes, returns true.
&#9;&#9;If the user clicked No, returns false.
&#9;&#9;If the user clicked Cancel, returns nil.
]==]

function dialog.Confirm(parent,message,global,buttons)
&#9;GlobalStylist = global or Stylist{
&#9;&#9;BackgroundColor3 = Color3.new(0,0,0);
&#9;&#9;BorderColor3 = Color3.new(1,1,1);
&#9;&#9;TextColor3 = Color3.new(1,1,1);
&#9;&#9;Font = &quot;ArialBold&quot;;
&#9;&#9;FontSize = &quot;Size14&quot;;
&#9;}
&#9;ButtonStylist = buttons or Stylist{
&#9;&#9;Style = &quot;RobloxButton&quot;;
&#9;}

&#9;local GlobalStylist = CreateStylist(style)
&#9;local ButtonStylist = CreateStylist(button_style)
&#9;local style_in = GlobalStylist.StylistIn(ButtonStylist)
&#9;GlobalStylist.AddStylist(ButtonStylist)

&#9;local Dialog = Create&apos;Frame&apos;{
&#9;&#9;Name = &quot;ConfirmDialog&quot;;
&#9;&#9;Size = UDim2.new(1.5,0,1.5,0);
&#9;&#9;Position = UDim2.new(-0.25,0,-0.25,0);
&#9;&#9;BorderSizePixel = 0;
&#9;&#9;BackgroundTransparency = 0.5;
&#9;&#9;BackgroundColor3 = Color3.new(0,0,0);
&#9;&#9;Active = true;
&#9;&#9;GlobalStylist.AddObject(Create&apos;Frame&apos;{
&#9;&#9;&#9;Name = &quot;DialogBox&quot;;
&#9;&#9;&#9;Size = UDim2.new(0,250,0,150);
&#9;&#9;&#9;Position = UDim2.new(0.5,-125,0.5,-75);
&#9;&#9;&#9;Create&apos;Frame&apos;{
&#9;&#9;&#9;&#9;Name = &quot;MarginBox&quot;;
&#9;&#9;&#9;&#9;BackgroundTransparency = 1;
&#9;&#9;&#9;&#9;Size = UDim2.new(1,-16,1,-16);
&#9;&#9;&#9;&#9;Position = UDim2.new(0,8,0,8);
&#9;&#9;&#9;&#9;GlobalStylist.AddObject(Create&apos;TextLabel&apos;{
&#9;&#9;&#9;&#9;&#9;BackgroundTransparency = 1;
&#9;&#9;&#9;&#9;&#9;TextScaled = true;
&#9;&#9;&#9;&#9;&#9;Text = message or &quot;&quot;;
&#9;&#9;&#9;&#9;&#9;Size = UDim2.new(1,-16,0.8,-24);
&#9;&#9;&#9;&#9;&#9;Position = UDim2.new(0,8,0,8);
&#9;&#9;&#9;&#9;});
&#9;&#9;&#9;&#9;Create&apos;Frame&apos;{
&#9;&#9;&#9;&#9;&#9;Name = &quot;Buttons&quot;;
&#9;&#9;&#9;&#9;&#9;BackgroundTransparency = 1;
&#9;&#9;&#9;&#9;&#9;Size = UDim2.new(1,0,0.2,0);
&#9;&#9;&#9;&#9;&#9;Position = UDim2.new(0,0,0.8,0);
---- Buttons
&#9;&#9;&#9;&#9;&#9;ButtonStylist.AddObject(Create&apos;TextButton&apos;{
&#9;&#9;&#9;&#9;&#9;&#9;Name = &quot;YesButton&quot;;
&#9;&#9;&#9;&#9;&#9;&#9;Text = &quot;Yes&quot;;
&#9;&#9;&#9;&#9;&#9;&#9;Size = UDim2.new(1/3,0,1,0);
&#9;&#9;&#9;&#9;&#9;&#9;Position = UDim2.new(0/3,0,0,0);
&#9;&#9;&#9;&#9;&#9;});
&#9;&#9;&#9;&#9;&#9;ButtonStylist.AddObject(Create&apos;TextButton&apos;{
&#9;&#9;&#9;&#9;&#9;&#9;Name = &quot;NoButton&quot;;
&#9;&#9;&#9;&#9;&#9;&#9;Text = &quot;No&quot;;
&#9;&#9;&#9;&#9;&#9;&#9;Size = UDim2.new(1/3,0,1,0);
&#9;&#9;&#9;&#9;&#9;&#9;Position = UDim2.new(1/3,0,0,0);
&#9;&#9;&#9;&#9;&#9;});
&#9;&#9;&#9;&#9;&#9;ButtonStylist.AddObject(Create&apos;TextButton&apos;{
&#9;&#9;&#9;&#9;&#9;&#9;Name = &quot;CancelButton&quot;;
&#9;&#9;&#9;&#9;&#9;&#9;Text = &quot;Cancel&quot;;
&#9;&#9;&#9;&#9;&#9;&#9;Size = UDim2.new(1/3,0,1,0);
&#9;&#9;&#9;&#9;&#9;&#9;Position = UDim2.new(2/3,0,0,0);
&#9;&#9;&#9;&#9;&#9;});
----/Buttons
&#9;&#9;&#9;&#9;};
&#9;&#9;&#9;};
&#9;&#9;});
&#9;}
&#9;local Buttons = Dialog.DialogBox.MarginBox.Buttons
&#9;
&#9;local Result = nil
&#9;local Event = Instance.new(&quot;BindableEvent&quot;)

&#9;Buttons.YesButton.MouseButton1Click:connect(function()
&#9;&#9;Result = true
&#9;&#9;Event:Fire()
&#9;end)
&#9;Buttons.NoButton.MouseButton1Click:connect(function()
&#9;&#9;Result = false
&#9;&#9;Event:Fire()
&#9;end)
&#9;Buttons.CancelButton.MouseButton1Click:connect(function()
&#9;&#9;Result = nil
&#9;&#9;Event:Fire()
&#9;end)

&#9;SetZIndex(Dialog,10)

&#9;Dialog.Parent = parent
&#9;Event.Event:wait()
&#9;Dialog:Destroy()
&#9;Event:Destroy()

&#9;if global == nil then
&#9;&#9;GlobalStylist.Destroy()
&#9;else
&#9;&#9;if not style_in then
&#9;&#9;&#9;GlobalStylist.RemoveStylist(ButtonStylist)
&#9;&#9;end
&#9;end
&#9;if buttons == nil then
&#9;&#9;ButtonStylist.Destroy()
&#9;end

&#9;return Result
end

lib.dialog = dialog

--[[DEPEND:]]

doc[&quot;Help&quot;] = [==[
Help ( string `query`, bool `no_print` ) [function]
&#9;returns: string `message`

Returns help information for the library.

Arguments:
&#9;`query`
&#9;&#9;The name of the entry to display help for (case-insensitive).
&#9;&#9;If unspecified, a list of entries will be displayed.

&#9;`no_print`
&#9;&#9;If set to true, the returned message will NOT also be printed.
&#9;&#9;Note than when printed this way, the message is automatically formatted to maintain readability. 

Returns:
&#9;`message`
&#9;&#9;The resulting message.


Documentation Remarks:
&#9;Argument and return values follow this format:
&#9;&#9;type `reference`

&#9;&quot;type&quot; is the argument&apos;s value type (string, bool, table, etc).
&#9;Some arguments may accept more than one type. If so, these types will be indicated in the argument&apos;s description.
&#9;An asterisk (*) as the type indicates that the argument may be of any type.
&#9;Types can also be Roblox Instances, or objects defined by this library.
&#9;The type &quot;GuiText&quot; refers to TextLabels, TextButtons, and TextBoxes.

&#9;In the documentation, a word enclosed in grave accents (i.e. `example`) refers to the indicated value.

&#9;Each entry has one of various types, which are indicated between square brackets (i.e. [type] ):
&#9;&#9;[const]
&#9;&#9;&#9;A constant, unchanging value.
&#9;&#9;[enum]
&#9;&#9;&#9;An enumerated type.
&#9;&#9;[function]
&#9;&#9;&#9;A function; receives arguments and returns values.
&#9;&#9;[constructor]
&#9;&#9;&#9;Similar to a function, buts returns an instantiated object.

&#9;Documentation of a constructor will also contain a definition of the class it creates.
&#9;Classes contain various member types:
&#9;&#9;Readonly
&#9;&#9;&#9;A value that is meant only to be read, not written to.
&#9;&#9;Field
&#9;&#9;&#9;A value that can be changed, affecting the state of the object.
&#9;&#9;Method
&#9;&#9;&#9;A function that does something internally when called.
&#9;&#9;&#9;NOTE: Currently, methods must be called with &quot;.&quot;, not &quot;:&quot;. This may change in future versions.
&#9;&#9;Callback
&#9;&#9;&#9;Similar to a field in that it can be set, but the value is a function.
&#9;&#9;&#9;When set, the function will be invoked at some point, and may have arguments passed to it.
&#9;&#9;&#9;What the function returns can affect the object&apos;s behavior.
&#9;&#9;Event
&#9;&#9;&#9;Allows the user to connect functions (called &quot;listeners&quot;).
&#9;&#9;&#9;At some point, the event will fire, which then calls each listener connected to it.
&#9;&#9;&#9;Values may be passed to each listener, received as &quot;parameters&quot;.
]==]

local default_help = [==[
Use ]==]..PROJECT_NAME..[==[.Help(&quot;EntryName&quot;) for more information about a specific entry.

Entries:
]==]

do
&#9;local sorted = {}
&#9;for name,ref in pairs(doc) do
&#9;&#9;if type(name) == &quot;string&quot; then
&#9;&#9;&#9;table.insert(sorted,name)
&#9;&#9;end
&#9;end
&#9;table.sort(sorted)
&#9;for i,name in pairs(sorted) do
&#9;&#9;default_help = default_help .. &quot;\t&quot; .. name .. &quot;\n&quot;
&#9;end
end

doc[&quot;EntryName&quot;] = [==[
That was an example, silly.

]==]..default_help


local DocumentationLookup = {}
DocumentationLookup[false] = default_help

function lib.Help(query,no_print)
&#9;if type(query) == &quot;string&quot; then
&#9;&#9;query = query:lower()
&#9;end
&#9;local output = DocumentationLookup[query] or DocumentationLookup[false]
&#9;if not no_print then
&#9;&#9;print(string.rep(&quot;_&quot;,80))
&#9;&#9;for c in output:gsub(&quot;\r\n?&quot;,&quot;\n&quot;):gmatch(&quot;(.-)\n&quot;) do
&#9;&#9;&#9;c = c:gsub(&quot; &quot;,&quot;\160&quot;)
&#9;&#9;&#9;c = c:gsub(&quot;\t&quot;,string.rep(&quot;\160&quot;,8))
&#9;&#9;&#9;print(#c == 0 and &quot;\160&quot; or c)
&#9;&#9;end
&#9;&#9;print(&quot;\160&quot;)
&#9;end
&#9;return output
end

for name,ref in pairs(doc) do
&#9;if type(name) == &quot;string&quot; then
&#9;&#9;DocumentationLookup[name:lower()] = ref
&#9;&#9;local f = lib[name]
&#9;&#9;if type(f) == &quot;function&quot; then
&#9;&#9;&#9;DocumentationLookup[f] = ref
&#9;&#9;end
&#9;end
end

setmetatable(lib,{
&#9;__tostring = function()
&#9;&#9;return (&quot;%s GUI Library [v%s] (use %s.Help() for help)&quot;):format(PROJECT_NAME, version, PROJECT_NAME)
&#9;end;
})

_G.QuentyglooLibrary = lib
--print((&quot;Loaded %s library. Type _G.%s.Help() for help.&quot;):format(PROJECT_NAME, PROJECT_NAME))

</ProtectedString>
					</Properties>
				</Item>
				<Item class="Frame" referent="RBX444">
					<Properties>
						<bool name="Active">false</bool>
						<Color3 name="BackgroundColor3">4278190080</Color3>
						<float name="BackgroundTransparency">0.699999988</float>
						<Color3 name="BorderColor3">4279970357</Color3>
						<int name="BorderSizePixel">0</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<string name="Name">AboutTextBox</string>
						<UDim2 name="Position">
							<XS>0.5</XS>
							<XO>-300</XO>
							<YS>0</YS>
							<YO>-465</YO>
						</UDim2>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>600</XO>
							<YS>0</YS>
							<YO>400</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<token name="Style">0</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="TextButton" referent="RBX445">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4294901760</Color3>
							<float name="BackgroundTransparency">0.699999988</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">2</token>
							<bool name="Modal">false</bool>
							<string name="Name">TextButton.rbxm</string>
							<UDim2 name="Position">
								<XS>1</XS>
								<XO>-105</XO>
								<YS>1</YS>
								<YO>5</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>100</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<string name="Text">Close</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">2</int>
						</Properties>
						<Item class="LocalScript" referent="RBX446">
							<Properties>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">ClosePlayerList.lua</string>
								<ProtectedString name="Source">wait(1)
while not _G.Gui do
&#9;wait()
end

local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:HideAboutTextBox()
&#9;Gui:ShowApplicationFrame()
end)</ProtectedString>
							</Properties>
						</Item>
						<Item class="Frame" referent="RBX447">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Decoration</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>0</XO>
									<YS>0.5</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
					</Item>
					<Item class="Frame" referent="RBX448">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4278190080</Color3>
							<float name="BackgroundTransparency">0.5</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<string name="Name">Title</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>5</XO>
								<YS>0</YS>
								<YO>-30</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>-5</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="Frame" referent="RBX449">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4278190080</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Title</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>-5</XO>
									<YS>0</YS>
									<YO>-10</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>10</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="Frame" referent="RBX450">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4294940928</Color3>
								<float name="BackgroundTransparency">0.300000012</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Frame</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>-5</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>5</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextLabel" referent="RBX451">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">1</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<string name="Name">TextLabel</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>8</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>-8</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<string name="Text">About Quenty&apos;s GUI Admin Commands</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">0</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
					</Item>
					<Item class="Frame" referent="RBX452">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4278190080</Color3>
							<float name="BackgroundTransparency">0.699999988</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<string name="Name">Frame</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>1</YS>
								<YO>0</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>40</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Frame" referent="RBX453">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4288914085</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<string name="Name">TextStuff</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>5</XO>
								<YS>0</YS>
								<YO>5</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>-10</XO>
								<YS>1</YS>
								<YO>-10</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
				</Item>
				<Item class="Frame" referent="RBX454">
					<Properties>
						<bool name="Active">false</bool>
						<Color3 name="BackgroundColor3">4278190080</Color3>
						<float name="BackgroundTransparency">0.699999988</float>
						<Color3 name="BorderColor3">4279970357</Color3>
						<int name="BorderSizePixel">0</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<string name="Name">SliderFrame</string>
						<UDim2 name="Position">
							<XS>0.5</XS>
							<XO>-300</XO>
							<YS>0</YS>
							<YO>-465</YO>
						</UDim2>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>600</XO>
							<YS>0</YS>
							<YO>400</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<token name="Style">0</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="TextButton" referent="RBX455">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4294901760</Color3>
							<float name="BackgroundTransparency">0.699999988</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">2</token>
							<bool name="Modal">false</bool>
							<string name="Name">TextButton.rbxm</string>
							<UDim2 name="Position">
								<XS>1</XS>
								<XO>-105</XO>
								<YS>1</YS>
								<YO>5</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>100</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<string name="Text">Close</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">2</int>
						</Properties>
						<Item class="LocalScript" referent="RBX456">
							<Properties>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">ClosePlayerList.lua</string>
								<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
Gui:ShowApplicationFrame()
Gui:HideSlider()
end)</ProtectedString>
							</Properties>
						</Item>
						<Item class="Frame" referent="RBX457">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Decoration</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>0</XO>
									<YS>0.5</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
					</Item>
					<Item class="Frame" referent="RBX458">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4278190080</Color3>
							<float name="BackgroundTransparency">0.5</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<string name="Name">Title</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>5</XO>
								<YS>0</YS>
								<YO>-30</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>-5</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="Frame" referent="RBX459">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4278190080</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Title</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>-5</XO>
									<YS>0</YS>
									<YO>-10</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>10</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="Frame" referent="RBX460">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4294940928</Color3>
								<float name="BackgroundTransparency">0.300000012</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Frame</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>-5</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>5</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextLabel" referent="RBX461">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">1</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<string name="Name">TextLabel</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>8</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>-8</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<string name="Text">Slide until adjusted correctly</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">0</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
					</Item>
					<Item class="Frame" referent="RBX462">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4278190080</Color3>
							<float name="BackgroundTransparency">0.699999988</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<string name="Name">Frame</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>1</YS>
								<YO>0</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>40</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Frame" referent="RBX463">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4288914085</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<string name="Name">SliderContainer</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>20</XO>
								<YS>0.5</YS>
								<YO>-20</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>-40</XO>
								<YS>0</YS>
								<YO>20</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="TextLabel" referent="RBX464">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">1</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">2</token>
								<token name="FontSize">5</token>
								<string name="Name">Minimum</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>50</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<string name="Text">0</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">0</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextLabel" referent="RBX465">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">1</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">2</token>
								<token name="FontSize">5</token>
								<string name="Name">Maximum</string>
								<UDim2 name="Position">
									<XS>1</XS>
									<XO>-50</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>50</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<string name="Text">1</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">0</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextLabel" referent="RBX466">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">1</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">2</token>
								<token name="FontSize">6</token>
								<string name="Name">Current</string>
								<UDim2 name="Position">
									<XS>0.5</XS>
									<XO>-25</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>50</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<string name="Text">0.5</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">0</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
					</Item>
				</Item>
				<Item class="LocalScript" referent="RBX467">
					<Properties>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">GlobalLibrary</string>
						<ProtectedString name="Source">_G.Gui = nil

--wait(1)
--wait(0.1)
repeat wait(0) until script and script.Parent

local function WaitForDescendent(Parent, Name)
&#9;local Item = Parent:FindFirstChild(Name)
&#9;if not Item then
&#9;&#9;repeat wait(0) Item = Parent:FindFirstChild(Name)print(&quot;Waiting for &quot;..Name) until Item
&#9;end
&#9;return Item;
end

local Output = script.Parent.Parent.Parent:FindFirstChild(&quot;Output&quot;)
if not Output then
&#9;Output = Instance.new(&quot;StringValue&quot;, script.Parent.Parent.Parent)
&#9;Output.Name = &quot;Output&quot;
end

Output:ClearAllChildren();

local OutputFunc = print

local print = function(...)
&#9;for _, Item in pairs({...}) do
&#9;&#9;OutputFunc(Item)
&#9;&#9;local Out = Instance.new(&quot;StringValue&quot;, Output)
&#9;&#9;Out.Name = tick()
&#9;&#9;Out.Value = Item
&#9;end
end

--print(&quot;Works&quot;)

local Project = script.Parent
local AboutTextBox = WaitForDescendent(Project, &quot;AboutTextBox&quot;)
local TextBox = WaitForDescendent(AboutTextBox, &quot;TextStuff&quot;)
local TextBoxSize = TextBox.Size
local TextBoxAbsSize = TextBox.AbsoluteSize
local SetupTextBox = false

local ApplicationFrame = WaitForDescendent(Project, &quot;Applications&quot;)--Project[&quot;Applications&quot;]
ApplicationFrame.Visible = false
local PlayerList = WaitForDescendent(Project, &quot;PlayerList.rbxm&quot;)--Project[&quot;PlayerList.rbxm&quot;]
local InputBox = WaitForDescendent(Project, &quot;InputBox.rbxm&quot;)--Project[&quot;InputBox.rbxm&quot;]
local StatList = WaitForDescendent(Project, &quot;StatList.rbxm&quot;)--Project[&quot;StatList.rbxm&quot;]
local Confirm = WaitForDescendent(Project, &quot;Confirm&quot;)--Project[&quot;Confirm&quot;]
local ConfirmText = WaitForDescendent(Project, &quot;ConfirmWithText&quot;)--Project[&quot;ConfirmWithText&quot;]

local Slider = WaitForDescendent(Project, &quot;SliderFrame&quot;)
local SliderFrame = WaitForDescendent(Slider, &quot;SliderContainer&quot;)
local SlideMax = WaitForDescendent(SliderFrame, &quot;Maximum&quot;)
local SlideMin = WaitForDescendent(SliderFrame, &quot;Minimum&quot;)
local SlideCurr = WaitForDescendent(SliderFrame, &quot;Current&quot;)

local ColorSelect = WaitForDescendent(Project, &quot;Color3Select&quot;)
local ColorDialog = WaitForDescendent(ColorSelect, &quot;Color3Dialog&quot;)
local ColorConfig = WaitForDescendent(ColorDialog, &quot;Config&quot;)
local ColorValue = WaitForDescendent(ColorConfig, &quot;Value&quot;)
local CurrColorValue = WaitForDescendent(ColorConfig, &quot;CurrValue&quot;)
local ColorVisible = false

local TargetPlayer = nil
local TargetStat = nil
local Show = WaitForDescendent(Project, &quot;Show&quot;) --Project[&quot;Show&quot;]

local AdminTag = script.Parent.Parent.Parent:FindFirstChild(&quot;QuentyGUIAdminTags&quot;)
local Plyr = script.Parent.Parent.Parent

local GUIAppFrames = {WaitForDescendent(ApplicationFrame, &quot;Character&quot;), WaitForDescendent(ApplicationFrame, &quot;Server&quot;), WaitForDescendent(ApplicationFrame, &quot;Player&quot;), WaitForDescendent(ApplicationFrame, &quot;Character2&quot;),  WaitForDescendent(ApplicationFrame, &quot;Misc&quot;)}

if not AdminTag then
&#9;AdminTag = Instance.new(&quot;Configuration&quot;, script.Parent.Parent.Parent)
&#9;AdminTag.Name = &quot;QuentyGUIAdminTags&quot;
end

local SliderVisible = false

local Gui 
local Size = 205 -- Standare Size of Frame (Application)

if not _G.QuentyglooLibrary then
&#9;repeat wait(0) print(&quot;Waiting for QuentyglooLibrary&quot;) until _G.QuentyglooLibrary
end

local scrgui = script.Parent
local Gloo = _G.QuentyglooLibrary
local Admins = Workspace.QuentyAdminCommands.Admins
local MainCache = WaitForDescendent(game:GetService(&quot;Lighting&quot;), &quot;QuentyAdminCache&quot;)
local HatCache = WaitForDescendent(MainCache, &quot;QuentyAdminHatCache&quot;)
local ToolCache = WaitForDescendent(MainCache, &quot;QuentyAdminToolCache&quot;)
local PlayerToolCache = ToolCache:FindFirstChild(game.Players.LocalPlayer.Name)
local CurrVersion = Workspace.QuentyAdminCommands
if not PlayerToolCache then
&#9;ToolCache = Instance.new(&quot;Model&quot;,ToolCache)
&#9;ToolCache.Name = game.Players.LocalPlayer.Name
end

local Banned = game:GetService(&quot;Lighting&quot;):FindFirstChild(&quot;Banned&quot;)

local RbxGui = assert(LoadLibrary(&apos;RbxGui&apos;))


if not Banned then
Banned = Instance.new(&quot;Configuration&quot;, game:GetService(&quot;Lighting&quot;))
Banned.Name = &quot;Banned&quot;
end





local AboutText = [==[
Well, this project was firt created for NeroQuinn, but has grown into a bigger admin project. Actually, it&apos;s based off 
of MrNicNac&apos;s admin commands framework.  This has allowed for a lightweight but easy to create system that allows 
the creation of a simple GUI commands that anyone - even safe chatters, can use.  This is great.  

So far, there are 34 commands.  Features include a seperation of each command into it&apos;s own Local Script so that it 
doesn&apos;t error, and a robust API to create more commands.  

These admin commands were created through the combined effort of Quenty, MrNicNac, and Anaminus (Through 
the use of his &apos;Gloo&apos; library.  I would like to thank everyone who helped - even unknowingly. :D

Also, NeroQuinn and Oxcool1 helped by giving ideas. :D

== Chat Commands ==
No command is case sensitive.  All of these commands can also be accessed using the GUI command panel.  

Chat commands are purely for ease of use, for commonly used commands.  More commands exist in the GUI then in the chat 
commands.  

Kill/Quenty             - Kills Quenty D:
Respawn/Quenty             - Respawns Quenty&apos;s Character
Explode/Quenty             - Explodes Quenty
LoadCharacter/Quenty             - Respawns Quenty&apos;s Character
ForceField/Quenty             - Gives Quenty a Force Field
FF/Quenty             - Gives Quenty a Force Field
Froob/Quenty             - Froob&apos;s Quenty (Ahhhhh *Runs away*)
Blind/Quenty             - Blinds Quenty / Gives Seizure
Unblind/Quenty             - Deblinds Quenty
Message/Quenty&apos;s GUI Admin Commands are cool             - Creates a message stating the admin commands 
                                                           are cool.  
M/Quenty&apos;s GUI Admin Commands are cool             - Same as the Message/ command...
Heal/Quenty             - Heal&apos;s Quenty
Damage/Quenty/35             - Damage&apos;s Quenty by 35 health points
MaxHealth/Quenty/300             - Set&apos;s Quenty&apos;s MaxHealth to 300 health points
Button/Quenty             - Creates a tempting button for Quenty to step on
god/Quenty             - Gives Quenty sparklies and makes him kill anything he touches
Ungod/Quenty             - Removes Quenty&apos;s god powah&apos;s. (Oh noes!)
Noob/Quenty             - Turns Quenty into a Noob
Zombie/Quenty             - Turns Quenty into a Zombie
Teleport/Quenty/Johnny             -  Teleports Johnny to Quenty
Tele/Quenty/Johnny             - Same as Teleport/
Badge/Quenty/15346445             - Rewards Quenty the badge with the ID given (The numbers). 
B/Quenty             - Same as Badge/

Reset - Respawns your own Character
Respawn - Same as Reset/
LoadCharacter - Same as Reset/
Suicide - Same as Reset/

== Identifiers ==
If you want to identify a player in a chat command, you can use several different methods.  

All             - Applys command to &apos;All&apos; players
Everyone             - Applys command to &apos;All&apos; players
Guests             - Applys to all &apos;Guest&apos; users.
Mooooo             - Applys to the user NeroQuinn (Just as a joke. :D)
Random             - Randomly picks 1 player to apply it too.
NonAdmins             - Applys to all people who aren&apos;t admins. 
Others             - Applys to all people who aren&apos;t admins. 
Admins             - Apply&apos;s to admins
Me             - Applys to yourself
Myself             - Applys to yourself

Furthermore, you don&apos;t have to type a person&apos;s name out fully. You can do...

Kill/Que

And it will kill Quenty

You can also do...

Kill/Q

And it will kill anyone who&apos;s name starts with Q.... Such as....

Quenty
QuinnEpicSauce125
Question

But not...

JQuewrkldf

Also, you can use commas to seperate names, like...

Kill/Que,Joh,Bob

Which will kill...

Quenty
John364
BobisniisNice

== Questions? Comments? Updates? ==
Quenty is open to any comments, questions or updates involved.  Just send him a message on ROBLOX.  
]==]

-- FUNCTIONS -- 

local function Shine(Frame)
&#9;local NShine = Instance.new(&quot;Frame&quot;, Frame)
&#9;NShine.Name = &quot;Decoration&quot;
&#9;NShine.BackgroundTransparency = 0.7
&#9;NShine.BorderSizePixel = 0
&#9;NShine.Size = UDim2.new(1, 0, 0.5, 0)
end

local function SetupApp()
Spawn(function()
--local ScrollBar = Gloo.ScrollBar(false, 17)
local ScrollingContainer, Frame = Gloo.ScrollingContainer()
local StandardSize = UDim2.new(ApplicationFrame.Size.X.Scale, ApplicationFrame.Size.X.Offset, 0, Size)
Frame.Parent = scrgui
Frame.Name = &quot;ApplicationsScrollingFrame&quot;
Frame.Size = StandardSize
Frame.Position = ApplicationFrame.Position

ScrollingContainer.Boundary.Size = StandardSize
ScrollingContainer.Container.Size = ApplicationFrame.Size
ApplicationFrame.Position = UDim2.new(0,0,0,0)

ApplicationFrame.Parent = ScrollingContainer.Container

ScrollingContainer.Boundary.BackgroundTransparency = 1
ScrollingContainer.Container.BackgroundTransparency = 1

ApplicationFrame.Title.Parent = Frame
ApplicationFrame.Hide.Parent = Frame
ApplicationFrame.About.Parent = Frame
ApplicationFrame.Visible = true


--print(&quot;Making tab Container&quot;)

local ActiveGui
local AppButtons = {}
local AppButtonDebounce = false

local function UpdateTabButtons()
&#9;--print(&quot;Updating buttons&quot;)
&#9;for Gui, Button in pairs(AppButtons) do
&#9;&#9;if Gui == ActiveGui then
&#9;&#9;&#9;Gui.Visible = true
&#9;&#9;&#9;Button.BackgroundColor3 = Color3.new(0,0,0)
&#9;&#9;else
&#9;&#9;&#9;Gui.Visible = false
&#9;&#9;&#9;Button.BackgroundColor3 = Color3.new(51/255,51/255,51/255)
&#9;&#9;end
&#9;end
end

local function Modify(instance, t)
&#9;for key, value in next, t do
&#9;&#9;if type(key) == &apos;number&apos; then
&#9;&#9;&#9;value.Parent = instance 
&#9;&#9;else
&#9;&#9;&#9;instance[key] = value
&#9;&#9;end
&#9;end
&#9;return instance
end

for _, Gui in pairs(GUIAppFrames) do
&#9;if Gui and ApplicationFrame:FindFirstChild(&quot;Tab:&quot;..Gui.Name) and  ApplicationFrame:FindFirstChild(&quot;Tab:&quot;..Gui.Name):IsA(&quot;TextButton&quot;) then
&#9;&#9;--print(&quot;Valid&quot;)
&#9;&#9;local Button =  ApplicationFrame:FindFirstChild(&quot;Tab:&quot;..Gui.Name)
&#9;&#9;AppButtons[Gui] = Button
&#9;&#9;Button.MouseButton1Click:connect(function()
&#9;&#9;&#9;if not AppButtonDebounce then
&#9;&#9;&#9;&#9;AppButtonDebounce = true
&#9;&#9;&#9;&#9;ActiveGui = Gui
&#9;&#9;&#9;&#9;UpdateTabButtons()
&#9;&#9;&#9;&#9;wait(0.05)
&#9;&#9;&#9;&#9;AppButtonDebounce = false
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;&#9;if not ActiveGui then
&#9;&#9;&#9;ActiveGui = Gui
&#9;&#9;end
&#9;end
end

UpdateTabButtons()

ApplicationFrame = Frame
--[[
local TabContainer, ContainerFrame = Gloo.TabContainer({}, 30, 29)
ContainerFrame.Parent = ScrollingContainer.Container
ContainerFrame.BackgroundTransparency = 1

for Index, Item in pairs(GUIAppFrames) do
TabContainer:AddTab(Item, Index);
end--]]

--[[
TabContainer.TabStylist:SetProperties({FontSize = &quot;Size8&quot;;
&#9;Font = &quot;Legacy&quot;;
&#9;TextColor3 = Color3.new(0.5, 0.5, 0.5);
&#9;BorderSizePixel = 0;
&#9;BackgroundTransparency = 0.7;
&#9;BackgroundColor3 = Color3.new(0, 0, 0);
}) --]]
--[[
TabContainer.SelectedTabStylist:SetProperties({
&#9;&quot;FontSize&quot; = &quot;Size12&quot;;
&#9;&quot;Font&quot; = &quot;ArialBold&quot;;
&#9;&quot;TextColor3&quot; = Color3.new(1, 1, 1);
&#9;&quot;BorderSizePixel&quot; = 0;
&#9;&quot;BackgroundTransparency&quot; = 0.1;
&#9;&quot;BackgroundColor3&quot; = Color3.new(0, 0, 0);
})--]]
--[[
for _, Item in pairs(ContainerFrame.Tabs:GetChildren()) do
&#9;if Item and Item:IsA(&quot;TextButton&quot;) then
&#9;&#9;Shine(Item)
&#9;end
end--]]

--[[
for _, Item in pairs(ContainerFrame.Tabs:GetChildren()) do
&#9;if Item and Item:IsA(&quot;TextButton&quot;) then
&#9;&#9;Item.FontSize = &quot;Size12&quot;
&#9;&#9;Shine(Item)
&#9;&#9;Item.BackgroundTransparency = 0.7
&#9;&#9;Item.BorderSizePixel = 0
&#9;end
end--]]

--ContainerFrame.Content.BackgroundTransparency = 1
end)
end

local function SetupTextBox()
&#9;Spawn(function()
&#9;&#9;local ScrollingContainer, Frame = Gloo.ScrollingContainer()
&#9;&#9;Frame.Parent = AboutTextBox
&#9;&#9;Frame.Name = &quot;AboutScrollingFrame&quot;
&#9;&#9;Frame.Size = TextBoxSize
&#9;&#9;Frame.Position = TextBox.Position

&#9;&#9;ScrollingContainer.Boundary.BackgroundTransparency = 1
&#9;&#9;ScrollingContainer.Container.BackgroundTransparency = 1
&#9;&#9;ScrollingContainer.Boundary.Size = TextBoxSize

&#9;&#9;TextBox:Destroy()
&#9;&#9;TextBox = ScrollingContainer.Container
&#9;&#9;print(&quot;Done with textbox setup&quot;)
&#9;&#9;SetupTextBox = true
&#9;end)
end

SetupApp()
SetupTextBox()

Gui = {
&#9;HideColorSelect = function(self)
&#9;&#9;ColorVisible = false
&#9;&#9;ColorSelect:TweenPosition(UDim2.new(0.5, -ColorSelect.AbsoluteSize.X/2, 0, -ColorSelect.AbsoluteSize.Y-40), &quot;In&quot;, &quot;Sine&quot;, 0.4, true)
&#9;end,
&#9;ShowColorSelect = function(self)
&#9;&#9;ColorVisible = true
&#9;&#9;ColorSelect:TweenPosition(UDim2.new(0.5, -ColorSelect.AbsoluteSize.X/2, 0.5, -(ColorSelect.AbsoluteSize.Y/2)-35), &quot;Out&quot;, &quot;Sine&quot;, 0.4, true)
&#9;end,
&#9;Verify = function(self) -- For something else later... 
&#9;&#9;if not true and script and script.Parent and script.Parent.Parent and script.Parent.Parent.Parent then
&#9;&#9;&#9;print(&quot;Verify failed :D&quot;)
&#9;&#9;end
&#9;&#9;return true and script and script.Parent and script.Parent.Parent and script.Parent.Parent.Parent;
&#9;end,
&#9;ShowSlider = function(self)
&#9;&#9;SliderVisible = true
&#9;&#9;Slider:TweenPosition(UDim2.new(0.5, -Slider.AbsoluteSize.X/2, 0.5, -(Slider.AbsoluteSize.Y/2)-35), &quot;Out&quot;, &quot;Sine&quot;, 0.4, true)
&#9;end,
&#9;HideSlider = function(self)
&#9;&#9;SliderVisible = false
&#9;&#9;Slider:TweenPosition(UDim2.new(0.5, -Slider.AbsoluteSize.X/2, 0, -Slider.AbsoluteSize.Y-40), &quot;In&quot;, &quot;Sine&quot;, 0.4, true)
&#9;end,
&#9;HideAboutTextBox = function(self)
&#9;&#9;AboutTextBox:TweenPosition(UDim2.new(0.5, -AboutTextBox.AbsoluteSize.X/2, 0, -AboutTextBox.AbsoluteSize.Y-40), &quot;In&quot;, &quot;Sine&quot;, 0.4, true)
&#9;end,
&#9;ShowAboutTextBox = function(self)
&#9;&#9;AboutTextBox:TweenPosition(UDim2.new(0.5, -AboutTextBox.AbsoluteSize.X/2, 0.5, -(AboutTextBox.AbsoluteSize.Y/2)-35), &quot;Out&quot;, &quot;Sine&quot;, 0.4, true)
&#9;end,
&#9;HideApplicationFrame = function(self)
&#9;&#9;ApplicationFrame:TweenPosition(UDim2.new(0, -ApplicationFrame.AbsoluteSize.X-5, 0, ApplicationFrame.AbsolutePosition.Y), &quot;In&quot;, &quot;Sine&quot;, 0.5, true)
&#9;&#9;--ApplicationFrame:TweenPosition(UDim2.new((0-ApplicationFrame.Size.X.Scale) - 0.025,0,ApplicationFrame.Position.Y.Scale,0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 1, true)
&#9;end,
&#9;ShowApplicationFrame = function(self)
&#9;&#9;ApplicationFrame:TweenPosition(UDim2.new(0, 5, 0, ApplicationFrame.AbsolutePosition.Y), &quot;Out&quot;, &quot;Sine&quot;, 0.5, true)
&#9;&#9;--ApplicationFrame:TweenPosition(UDim2.new(0.025,0,ApplicationFrame.Position.Y.Scale,0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 1, true)
&#9;end,
&#9;HidePlayerList = function(self)
&#9;&#9;PlayerList:TweenPosition(UDim2.new(0.5, -PlayerList.AbsoluteSize.X/2, 0, -PlayerList.AbsoluteSize.Y-40), &quot;In&quot;, &quot;Sine&quot;, 0.4, true)
&#9;&#9;--PlayerList:TweenPosition(UDim2.new(PlayerList.Position.X.Scale,0,0-PlayerList.Size.Y.Scale,0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 1, true)
&#9;end,
&#9;ShowPlayerList = function(self)
&#9;&#9;PlayerList:TweenPosition(UDim2.new(0.5, -PlayerList.AbsoluteSize.X/2, 0.5, -(PlayerList.AbsoluteSize.Y/2)-35), &quot;Out&quot;, &quot;Sine&quot;, 0.4, true)
&#9;&#9;--&#9;PlayerList:TweenPosition(UDim2.new(PlayerList.Position.X.Scale,0,.25,0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 1, true)
&#9;end,
&#9;HideInputBox = function(self)
&#9;&#9;InputBox:TweenPosition(UDim2.new(InputBox.Position.X.Scale,0,0-InputBox.Size.Y.Scale,-5), &quot;In&quot;, &quot;Sine&quot;, 0.5, true)
&#9;end,
&#9;ShowInputBox = function(self)
&#9;&#9;InputBox:TweenPosition(UDim2.new(InputBox.Position.X.Scale,0,.25,0), &quot;Out&quot;, &quot;Sine&quot;, 0.5, true)
&#9;end,
&#9;HideStatList = function(self)
&#9;&#9;--print(&quot;Hiding stat list&quot;)
&#9;&#9;StatList:TweenPosition(UDim2.new(0.5, -StatList.AbsoluteSize.X/2, 0, -StatList.AbsoluteSize.Y-40), &quot;In&quot;, &quot;Sine&quot;, 0.5, true)
&#9;&#9;--StatList:TweenPosition(UDim2.new(StatList.Position.X.Scale,0,0-StatList.Size.Y.Scale,0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 1, true)
&#9;end,
&#9;ShowStatList= function(self)
&#9;&#9;StatList:TweenPosition(UDim2.new(0.5, -StatList.AbsoluteSize.X/2, 0.5, -(StatList.AbsoluteSize.Y/2)-35), &quot;Out&quot;, &quot;Sine&quot;, 0.5, true)
&#9;&#9;--StatList:TweenPosition(UDim2.new(StatList.Position.X.Scale,0,.25,0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 1, true)
&#9;end,
&#9;HideConfirm = function(self)
&#9;&#9;Confirm:TweenPosition(UDim2.new(0.5, -Confirm.AbsoluteSize.X/2, 0, -Confirm.AbsoluteSize.Y-40), &quot;In&quot;, &quot;Sine&quot;, 0.5, true)
&#9;end,
&#9;ShowConfirm = function(self)
&#9;&#9;Confirm:TweenPosition(UDim2.new(0.5, -Confirm.AbsoluteSize.X/2, 0.5, -(Confirm.AbsoluteSize.Y/2)-35), &quot;Out&quot;, &quot;Sine&quot;, 0.5, true)
&#9;end,
&#9;HideConfirmText = function(self)
&#9;&#9;ConfirmText:TweenPosition(UDim2.new(0.5, -ConfirmText.AbsoluteSize.X/2, 0, -ConfirmText.AbsoluteSize.Y-40), &quot;In&quot;, &quot;Sine&quot;, 0.5, true)
&#9;end,
&#9;ShowConfirmText = function(self)
&#9;&#9;ConfirmText:TweenPosition(UDim2.new(0.5, -ConfirmText.AbsoluteSize.X/2, 0.5, -(ConfirmText.AbsoluteSize.Y/2)-35), &quot;Out&quot;, &quot;Sine&quot;, 0.5, true)
&#9;end,
&#9;ShowShow = function(self)
&#9;&#9;Show:TweenPosition(UDim2.new(0, 5, 0, Show.AbsolutePosition.Y), &quot;Out&quot;, &quot;Sine&quot;, 0.2, true)
&#9;end,
&#9;HideShow = function(self)
&#9;&#9;Show:TweenPosition(UDim2.new(0, -Show.AbsoluteSize.X-5, 0, Show.AbsolutePosition.Y), &quot;Out&quot;, &quot;Sine&quot;, 0.2, true)
&#9;end,
&#9;GenerateListOfPlayers = function(self)
&#9;&#9;--if PlayerList.Parent ~= script.Parent then
&#9;&#9;--&#9;print(&quot;Hax&quot;)
&#9;&#9;--&#9;PlayerList.Parent = script.Parent
&#9;&#9;--else
&#9;&#9;--&#9;print(&quot;Fine&quot;)
&#9;&#9;--end
&#9;&#9;--PlayerList.Parent = script.Parent
&#9;&#9;--print(&quot;Generating list of players&quot;)
&#9;&#9;--print(&quot;There are &quot;..#game.Players:GetPlayers()..&quot; players in the game&quot;)
&#9;&#9;--Spawn(function()
&#9;&#9;local downBy = 0
&#9;&#9;local currenty = 0
&#9;&#9;local NumDown = 1
&#9;&#9;local NumPlayers = #game.Players:GetPlayers()+1
&#9;&#9;for i,v in pairs(game.Players:GetPlayers()) do
&#9;&#9;&#9;--print(&quot;Generating player&apos;s button&quot;)
&#9;&#9;&#9;local tb = Instance.new(&quot;TextButton&quot;, PlayerList)
&#9;&#9;&#9;--tb.Parent = script.Parent

&#9;&#9;&#9;tb.TextXAlignment = Enum.TextXAlignment.Center
&#9;&#9;&#9;--tb.Style = Enum.ButtonStyle.RobloxButton
&#9;&#9;&#9;tb.BackgroundColor3 = Color3.new(1, 1, 0) 
&#9;&#9;&#9;local Rand = math.random(1,4)
&#9;&#9;&#9;if Rand == 1 then
&#9;&#9;&#9;&#9;tb.BackgroundColor3 = Color3.new(1, 0, 0) 
&#9;&#9;&#9;elseif Rand == 2 then
&#9;&#9;&#9;&#9;tb.BackgroundColor3 = Color3.new(51/255, 204/255, 51/255) 
&#9;&#9;&#9;elseif Rand == 3 then
&#9;&#9;&#9;&#9;tb.BackgroundColor3 = Color3.new(102/255, 153/255, 1) 
&#9;&#9;&#9;end

&#9;&#9;&#9;--[[local Shine = Instance.new(&quot;Frame&quot;, tb)
&#9;&#9;&#9;Shine.Name = &quot;Decoration&quot;
&#9;&#9;&#9;Shine.BackgroundTransparency = 0.7
&#9;&#9;&#9;Shine.BorderSizePixel = 0
&#9;&#9;&#9;Shine.Size = UDim2.new(1, 0, 0.5, 0)--]]

&#9;&#9;&#9;Shine(tb)

&#9;&#9;&#9;tb.BorderSizePixel = 0
&#9;&#9;&#9;tb.BackgroundTransparency = 0.7
&#9;&#9;&#9;tb.TextColor3 = Color3.new(1,1,1)
&#9;&#9;&#9;tb.FontSize = Enum.FontSize.Size10
&#9;&#9;&#9;tb.Text = v.Name

&#9;&#9;&#9;--print(tb.Name..&quot; : &quot;..tb.Text..&quot; : &quot;..tb:GetFullName())
&#9;&#9;&#9;--tb.Parent = script.Parent
&#9;&#9;&#9;--print(tb.Name..&quot; : &quot;..tb.Text..&quot; : &quot;..tb:GetFullName())
&#9;&#9;&#9;--tb.Size = UDim2.new(1,-10,1/#Game.Players:GetPlayers(),(-5*(#Game.Players:GetPlayers()-1)))
&#9;&#9;&#9;--tb.Position = UDim2.new(0,5,currenty,5*(NumDown-1))
&#9;&#9;&#9;--currenty = currenty + 1/#Game.Players:GetPlayers()
&#9;&#9;&#9;tb.Size = UDim2.new(1, -10, 0, ((PlayerList.AbsoluteSize.Y-(5*NumPlayers)-10)/NumPlayers))
&#9;&#9;&#9;tb.Position = UDim2.new(0, 5, 0, currenty+5)
&#9;&#9;&#9;currenty = currenty + ((PlayerList.AbsoluteSize.Y-(5*NumPlayers))/NumPlayers)+5--(PlayerList.AbsoluteSize.Y-5-(5*BannedNum))/BannedNum
&#9;&#9;&#9;NumDown = NumDown+1
&#9;&#9;&#9;--print(&quot;Done generating&quot;)
&#9;&#9;end

&#9;&#9;local AllPlayers = Instance.new(&quot;TextButton&quot;, PlayerList)
&#9;&#9;AllPlayers.TextXAlignment = &quot;Center&quot;
&#9;&#9;AllPlayers.TextColor3 = Color3.new(1,1,1)
&#9;&#9;AllPlayers.BackgroundColor3 = Color3.new(1,1,0)
&#9;&#9;AllPlayers.BackgroundTransparency = 0.7
&#9;&#9;AllPlayers.BorderSizePixel = 0
&#9;&#9;AllPlayers.FontSize = &quot;Size10&quot;
&#9;&#9;AllPlayers.Text = &quot;All Players&quot;
&#9;&#9;AllPlayers.Size = UDim2.new(0, PlayerList.AbsoluteSize.X/3-15, 0, ((PlayerList.AbsoluteSize.Y-(5*NumPlayers)-10)/NumPlayers))
&#9;&#9;AllPlayers.Position = UDim2.new(0, 5, 0, ((PlayerList.AbsoluteSize.Y-(5*NumPlayers))/NumPlayers)*(NumPlayers-1)+10+(5*(NumPlayers-2)))
&#9;&#9;AllPlayers.Name = &quot;AllPlayers&quot;
&#9;&#9;Shine(AllPlayers)

&#9;&#9;local NonAdmins = Instance.new(&quot;TextButton&quot;, PlayerList)
&#9;&#9;NonAdmins.TextXAlignment = &quot;Center&quot;
&#9;&#9;NonAdmins.BackgroundColor3 = Color3.new(51/255, 204/255, 51/255) 
&#9;&#9;NonAdmins.BackgroundTransparency = 0.7
&#9;&#9;NonAdmins.BorderSizePixel = 0
&#9;&#9;NonAdmins.TextColor3 = Color3.new(1,1,1)
&#9;&#9;NonAdmins.FontSize = &quot;Size10&quot;
&#9;&#9;NonAdmins.Text = &quot;All Non-Administrators&quot;
&#9;&#9;NonAdmins.Size = UDim2.new(0, PlayerList.AbsoluteSize.X/3-15, 0, ((PlayerList.AbsoluteSize.Y-(5*NumPlayers)-10)/NumPlayers))
&#9;&#9;NonAdmins.Position = UDim2.new(0, PlayerList.AbsoluteSize.X/3+5, 0, ((PlayerList.AbsoluteSize.Y-(5*NumPlayers))/NumPlayers)*(NumPlayers-1)+10+(5*(NumPlayers-2)))
&#9;&#9;NonAdmins.Name = &quot;NonAdmins&quot;
&#9;&#9;Shine(NonAdmins)

&#9;&#9;local AllAdmins = Instance.new(&quot;TextButton&quot;, PlayerList)
&#9;&#9;AllAdmins.TextXAlignment = &quot;Center&quot;
&#9;&#9;AllAdmins.BackgroundColor3 = Color3.new(102/255, 153/255, 1)
&#9;&#9;AllAdmins.BackgroundTransparency = 0.7
&#9;&#9;AllAdmins.BorderSizePixel = 0
&#9;&#9;AllAdmins.TextColor3 = Color3.new(1,1,1)
&#9;&#9;AllAdmins.FontSize = &quot;Size10&quot;
&#9;&#9;AllAdmins.Text = &quot;All Administrators&quot;
&#9;&#9;AllAdmins.Size = UDim2.new(0, PlayerList.AbsoluteSize.X/3-15, 0, ((PlayerList.AbsoluteSize.Y-(5*NumPlayers)-10)/NumPlayers))
&#9;&#9;AllAdmins.Position = UDim2.new(0, (PlayerList.AbsoluteSize.X/3)*2+5, 0, ((PlayerList.AbsoluteSize.Y-(5*NumPlayers))/NumPlayers)*(NumPlayers-1)+10+(5*(NumPlayers-2)))
&#9;&#9;AllAdmins.Name = &quot;AllAdmins&quot;
&#9;&#9;Shine(AllAdmins)
&#9;&#9;--print(&quot;Done generating list&quot;)
&#9;&#9;_G.Gui:HideApplicationFrame()
&#9;&#9;_G.Gui:ShowPlayerList()
&#9;&#9;--print(&quot;Entirely done&quot;)
&#9;&#9;--end)
&#9;end,
&#9;GenerateSingleListOfPlayers = function(self)
&#9;&#9;local downBy = 0
&#9;&#9;local currenty = 0
&#9;&#9;local NumDown = 1
&#9;&#9;local NumPlayers = #Game.Players:GetPlayers()
&#9;&#9;for i,v in pairs(Game.Players:GetPlayers()) do
&#9;&#9;&#9;local tb = Instance.new(&quot;TextButton&quot;, PlayerList)
&#9;&#9;&#9;tb.TextXAlignment = Enum.TextXAlignment.Center
&#9;&#9;&#9;--tb.Style = Enum.ButtonStyle.RobloxButton
&#9;&#9;&#9;tb.BackgroundColor3 = Color3.new(1, 1, 0) 
&#9;&#9;&#9;local Rand = math.random(1,4)
&#9;&#9;&#9;if Rand == 1 then
&#9;&#9;&#9;&#9;tb.BackgroundColor3 = Color3.new(1, 0, 0) 
&#9;&#9;&#9;elseif Rand == 2 then
&#9;&#9;&#9;&#9;tb.BackgroundColor3 = Color3.new(51/255, 204/255, 51/255) 
&#9;&#9;&#9;elseif Rand == 3 then
&#9;&#9;&#9;&#9;tb.BackgroundColor3 = Color3.new(102/255, 153/255, 1) 
&#9;&#9;&#9;end

&#9;&#9;&#9;--[[local Shine = Instance.new(&quot;Frame&quot;, tb)
&#9;&#9;&#9;Shine.Name = &quot;Decoration&quot;
&#9;&#9;&#9;Shine.BackgroundTransparency = 0.7
&#9;&#9;&#9;Shine.BorderSizePixel = 0
&#9;&#9;&#9;Shine.Size = UDim2.new(1, 0, 0.5, 0)--]]

&#9;&#9;&#9;Shine(tb)

&#9;&#9;&#9;tb.BorderSizePixel = 0
&#9;&#9;&#9;tb.BackgroundTransparency = 0.7
&#9;&#9;&#9;tb.TextColor3 = Color3.new(1,1,1)
&#9;&#9;&#9;tb.FontSize = Enum.FontSize.Size10
&#9;&#9;&#9;tb.Text = v.Name
&#9;&#9;&#9;--tb.Size = UDim2.new(1,-10,1/#Game.Players:GetPlayers(),(-5*(#Game.Players:GetPlayers()-1)))
&#9;&#9;&#9;--tb.Position = UDim2.new(0,5,currenty,5*(NumDown-1))
&#9;&#9;&#9;--currenty = currenty + 1/#Game.Players:GetPlayers()
&#9;&#9;&#9;tb.Size = UDim2.new(1, -10, 0, ((PlayerList.AbsoluteSize.Y-(5*NumPlayers)-10)/NumPlayers))
&#9;&#9;&#9;tb.Position = UDim2.new(0, 5, 0, currenty+5)
&#9;&#9;&#9;currenty = currenty + ((PlayerList.AbsoluteSize.Y-(5*NumPlayers))/NumPlayers)+5--(PlayerList.AbsoluteSize.Y-5-(5*BannedNum))/BannedNum
&#9;&#9;&#9;NumDown = NumDown+1
&#9;&#9;end

&#9;&#9;_G.Gui:HideApplicationFrame()
&#9;&#9;_G.Gui:ShowPlayerList()

&#9;end,
&#9;GenerateListOfBanned = function(self)
&#9;&#9;local downBy = 0
&#9;&#9;local currenty = 0
&#9;&#9;local NumDown = 1
&#9;&#9;local BannedNum = #Banned:GetChildren()
&#9;&#9;for i,v in pairs(Banned:GetChildren()) do
&#9;&#9;&#9;if v and v:IsA(&quot;IntValue&quot;) then
&#9;&#9;&#9;&#9;local tb = Instance.new(&quot;TextButton&quot;, PlayerList)
&#9;&#9;&#9;&#9;tb.TextXAlignment = Enum.TextXAlignment.Center
&#9;&#9;&#9;&#9;--tb.Style = Enum.ButtonStyle.RobloxButton
&#9;&#9;&#9;&#9;tb.BackgroundColor3 = Color3.new(1, 1, 0) 
&#9;&#9;&#9;&#9;local Rand = math.random(1,4)
&#9;&#9;&#9;&#9;if Rand == 1 then
&#9;&#9;&#9;&#9;&#9;tb.BackgroundColor3 = Color3.new(1, 0, 0) 
&#9;&#9;&#9;&#9;elseif Rand == 2 then
&#9;&#9;&#9;&#9;&#9;tb.BackgroundColor3 = Color3.new(51/255, 204/255, 51/255) 
&#9;&#9;&#9;&#9;elseif Rand == 3 then
&#9;&#9;&#9;&#9;&#9;tb.BackgroundColor3 = Color3.new(102/255, 153/255, 1) 
&#9;&#9;&#9;&#9;end

&#9;&#9;&#9;&#9;--[[local Shine = Instance.new(&quot;Frame&quot;, tb)
&#9;&#9;&#9;&#9;Shine.Name = &quot;Decoration&quot;
&#9;&#9;&#9;&#9;Shine.BackgroundTransparency = 0.7
&#9;&#9;&#9;&#9;Shine.BorderSizePixel = 0
&#9;&#9;&#9;&#9;Shine.Size = UDim2.new(1, 0, 0.5, 0)--]]

&#9;&#9;&#9;&#9;Shine(tb)

&#9;&#9;&#9;&#9;tb.BorderSizePixel = 0
&#9;&#9;&#9;&#9;tb.BackgroundTransparency = 0.7
&#9;&#9;&#9;&#9;tb.TextColor3 = Color3.new(1,1,1)
&#9;&#9;&#9;&#9;tb.FontSize = Enum.FontSize.Size10
&#9;&#9;&#9;&#9;tb.TextWrapped = true;
&#9;&#9;&#9;&#9;tb.Text = v.Name..&quot;\n - Tried to rejoin &quot;..v.Value..&quot; time(s) -&quot;
&#9;&#9;&#9;&#9;tb.Size = UDim2.new(1, -10, 0, ((PlayerList.AbsoluteSize.Y-(5*BannedNum)-10)/BannedNum))
&#9;&#9;&#9;&#9;tb.Position = UDim2.new(0, 5, 0, currenty+5)
&#9;&#9;&#9;&#9;--tb.Size = UDim2.new(1,-10,1/BannedNum,(-5--[[*(BannedNum-1)--]]))
&#9;&#9;&#9;&#9;--tb.Position = UDim2.new(0,5,currenty,5*(NumDown-1))
&#9;&#9;&#9;&#9;--currenty = currenty + 1/BannedNum
&#9;&#9;&#9;&#9;currenty = currenty + ((PlayerList.AbsoluteSize.Y-(5*BannedNum))/BannedNum)+5--(PlayerList.AbsoluteSize.Y-5-(5*BannedNum))/BannedNum
&#9;&#9;&#9;&#9;--print(currenty)
&#9;&#9;&#9;&#9;NumDown = NumDown+1
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;_G.Gui:HideApplicationFrame()
&#9;&#9;_G.Gui:ShowPlayerList()
&#9;end,
&#9;GenerateListOfObjects = function(self, ObjectToScan)
&#9;&#9;local downBy = 0
&#9;&#9;local currenty = 0
&#9;&#9;local NumDown = 1
&#9;&#9;local BannedNum = #ObjectToScan:GetChildren()
&#9;&#9;for i,v in pairs(ObjectToScan:GetChildren()) do
&#9;&#9;&#9;local tb = Instance.new(&quot;TextButton&quot;, PlayerList)
&#9;&#9;&#9;tb.TextXAlignment = Enum.TextXAlignment.Center
&#9;&#9;&#9;--tb.Style = Enum.ButtonStyle.RobloxButton
&#9;&#9;&#9;tb.BackgroundColor3 = Color3.new(1, 1, 0) 
&#9;&#9;&#9;local Rand = math.random(1,4)
&#9;&#9;&#9;if Rand == 1 then
&#9;&#9;&#9;&#9;tb.BackgroundColor3 = Color3.new(1, 0, 0) 
&#9;&#9;&#9;elseif Rand == 2 then
&#9;&#9;&#9;&#9;tb.BackgroundColor3 = Color3.new(51/255, 204/255, 51/255) 
&#9;&#9;&#9;elseif Rand == 3 then
&#9;&#9;&#9;&#9;tb.BackgroundColor3 = Color3.new(102/255, 153/255, 1) 
&#9;&#9;&#9;end

&#9;&#9;&#9;--[[local Shine = Instance.new(&quot;Frame&quot;, tb)
&#9;&#9;&#9;Shine.Name = &quot;Decoration&quot;
&#9;&#9;&#9;Shine.BackgroundTransparency = 0.7
&#9;&#9;&#9;Shine.BorderSizePixel = 0
&#9;&#9;&#9;Shine.Size = UDim2.new(1, 0, 0.5, 0)--]]

&#9;&#9;&#9;Shine(tb)

&#9;&#9;&#9;tb.BorderSizePixel = 0
&#9;&#9;&#9;tb.BackgroundTransparency = 0.7
&#9;&#9;&#9;tb.TextColor3 = Color3.new(1,1,1)
&#9;&#9;&#9;tb.FontSize = Enum.FontSize.Size10
&#9;&#9;&#9;tb.TextWrapped = true;
&#9;&#9;&#9;tb.Text = v.Name
&#9;&#9;&#9;tb.Size = UDim2.new(1, -10, 0, ((PlayerList.AbsoluteSize.Y-(5*BannedNum)-10)/BannedNum))
&#9;&#9;&#9;tb.Position = UDim2.new(0, 5, 0, currenty+5)
&#9;&#9;&#9;--tb.Size = UDim2.new(1,-10,1/BannedNum,(-5--[[*(BannedNum-1)--]]))
&#9;&#9;&#9;--tb.Position = UDim2.new(0,5,currenty,5*(NumDown-1))
&#9;&#9;&#9;--currenty = currenty + 1/BannedNum
&#9;&#9;&#9;currenty = currenty + ((PlayerList.AbsoluteSize.Y-(5*BannedNum))/BannedNum)+5--(PlayerList.AbsoluteSize.Y-5-(5*BannedNum))/BannedNum
&#9;&#9;&#9;--print(currenty)
&#9;&#9;&#9;NumDown = NumDown+1
&#9;&#9;end
&#9;&#9;_G.Gui:HideApplicationFrame()
&#9;&#9;_G.Gui:ShowPlayerList()
&#9;end,
&#9;GenerateListOfStats = function(self)
&#9;&#9;--print(&quot;Generating list of stats&quot;)
&#9;&#9;local downBy = 0
&#9;&#9;local currenty = 0
&#9;&#9;local numberstats = {}
&#9;&#9;local NumDown = 1
&#9;&#9;repeat wait() until Game.Players.LocalPlayer:FindFirstChild(&quot;leaderstats&quot;)
&#9;&#9;for i,v in pairs(Game.Players.LocalPlayer.leaderstats:GetChildren()) do
&#9;&#9;&#9;if v:IsA(&quot;NumberValue&quot;) or v:IsA(&quot;IntValue&quot;) then
&#9;&#9;&#9;&#9;table.insert(numberstats, v)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;for i,v in pairs(numberstats) do
&#9;&#9;&#9;--[[local tb = Instance.new(&quot;TextButton&quot;, StatList)
&#9;&#9;&#9;tb.TextXAlignment = Enum.TextXAlignment.Center
&#9;&#9;&#9;tb.Style = Enum.ButtonStyle.RobloxButton
&#9;&#9;&#9;tb.TextColor3 = Color3.new(1,1,1)
&#9;&#9;&#9;tb.FontSize = Enum.FontSize.Size10
&#9;&#9;&#9;tb.Text = v.Name
&#9;&#9;&#9;tb.Size = UDim2.new(1,0,1/#numberstats,0)
&#9;&#9;&#9;tb.Position = UDim2.new(0,0,currenty,0)
&#9;&#9;&#9;currenty = currenty + 1/#numberstats--]]

&#9;&#9;&#9;&#9;local tb = Instance.new(&quot;TextButton&quot;, StatList)
&#9;&#9;&#9;&#9;tb.TextXAlignment = Enum.TextXAlignment.Center
&#9;&#9;&#9;&#9;--tb.Style = Enum.ButtonStyle.RobloxButton
&#9;&#9;&#9;&#9;tb.BackgroundColor3 = Color3.new(1, 1, 0) 
&#9;&#9;&#9;&#9;local Rand = math.random(1,4)
&#9;&#9;&#9;&#9;if Rand == 1 then
&#9;&#9;&#9;&#9;&#9;tb.BackgroundColor3 = Color3.new(1, 0, 0) 
&#9;&#9;&#9;&#9;elseif Rand == 2 then
&#9;&#9;&#9;&#9;&#9;tb.BackgroundColor3 = Color3.new(51/255, 204/255, 51/255) 
&#9;&#9;&#9;&#9;elseif Rand == 3 then
&#9;&#9;&#9;&#9;&#9;tb.BackgroundColor3 = Color3.new(102/255, 153/255, 1) 
&#9;&#9;&#9;&#9;end

&#9;&#9;&#9;&#9;--[[local Shine = Instance.new(&quot;Frame&quot;, tb)
&#9;&#9;&#9;&#9;Shine.Name = &quot;Decoration&quot;
&#9;&#9;&#9;&#9;Shine.BackgroundTransparency = 0.7
&#9;&#9;&#9;&#9;Shine.BorderSizePixel = 0
&#9;&#9;&#9;&#9;Shine.Size = UDim2.new(1, 0, 0.5, 0)--]]

&#9;&#9;&#9;&#9;Shine(tb)

&#9;&#9;&#9;&#9;tb.BorderSizePixel = 0
&#9;&#9;&#9;&#9;tb.BackgroundTransparency = 0.7
&#9;&#9;&#9;&#9;tb.TextColor3 = Color3.new(1,1,1)
&#9;&#9;&#9;&#9;tb.FontSize = Enum.FontSize.Size10
&#9;&#9;&#9;&#9;tb.TextWrapped = true;
&#9;&#9;&#9;&#9;tb.Text = v.Name
&#9;&#9;&#9;&#9;--tb.Size = UDim2.new(1,-10,1/#numberstats,(-5*#numberstats))
&#9;&#9;&#9;&#9;--tb.Position = UDim2.new(0,5,currenty,5*NumDown)
&#9;&#9;&#9;&#9;--currenty = currenty + 1/#numberstats

&#9;&#9;&#9;&#9;tb.Size = UDim2.new(1, -10, 0, ((StatList.AbsoluteSize.Y-(5*#numberstats)-10)/#numberstats))
&#9;&#9;&#9;&#9;tb.Position = UDim2.new(0, 5, 0, currenty+5)
&#9;&#9;&#9;&#9;currenty = currenty + ((StatList.AbsoluteSize.Y-(5*#numberstats))/#numberstats)+5--(PlayerList.AbsoluteSize.Y-5-(5*BannedNum))/BannedNum
&#9;&#9;&#9;&#9;NumDown = NumDown+1
&#9;&#9;end
&#9;&#9;_G.Gui:HideApplicationFrame()
&#9;&#9;_G.Gui:ShowStatList()
&#9;end,
&#9;ClearListOfPlayers = function(self)
&#9;&#9;--print(&quot;Clearing list of players&quot;)
&#9;&#9;for i,v in pairs(PlayerList:GetChildren()) do
&#9;&#9;&#9;if v.Name ~= &quot;TextButton.rbxm&quot; and v:IsA(&quot;TextButton&quot;) then
&#9;&#9;&#9;&#9;v:Destroy()
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end,
&#9;ClearListOfStats = function(self)
&#9;&#9;for i,v in pairs(StatList:GetChildren()) do
&#9;&#9;&#9;if v.Name ~= &quot;TextButton.rbxm&quot; and v:IsA(&quot;TextButton&quot;) then
&#9;&#9;&#9;&#9;v:Destroy()
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end,
&#9;ResetInputBox = function()
&#9;&#9;InputBox[&quot;TextBox.rbxm&quot;].Text = &quot;Type a number here.&quot;
&#9;end,
&#9;ResetTextInputBox = function()
&#9;&#9;InputBox[&quot;TextBox.rbxm&quot;].Text = &quot;Type some text here.&quot;
&#9;end,
&#9;SetTargetPlayer = function(self, player)
&#9;&#9;TargetPlayer = player
&#9;end,
&#9;GetTargetPlayer = function(self)
&#9;&#9;return TargetPlayer
&#9;end,
&#9;SetTargetStat= function(self, sstat)
&#9;&#9;TargetStat = sstat
&#9;end,
&#9;GetTargetStat = function(self)
&#9;&#9;return TargetStat
&#9;end,
&#9;PlayerChoiceSelected = function(self, Function)
&#9;&#9;--print(&quot;PlayerChoiceSelected Start&quot;)
&#9;&#9;coroutine.wrap(function()
&#9;&#9;&#9;for i,v in pairs(PlayerList:GetChildren()) do
&#9;&#9;&#9;&#9;if v.Name ~= &quot;TextButton.rbxm&quot; and v:IsA(&quot;TextButton&quot;) then
&#9;&#9;&#9;&#9;&#9;connection = v.MouseButton1Click:connect(function()
&#9;&#9;&#9;&#9;&#9;&#9;--print(&quot;Down&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;_G.Gui:ClearListOfPlayers()
&#9;&#9;&#9;&#9;&#9;&#9;_G.Gui:HidePlayerList()
&#9;&#9;&#9;&#9;&#9;&#9;_G.Gui:ShowApplicationFrame()
&#9;&#9;&#9;&#9;&#9;&#9;if v.Name == &quot;AllPlayers&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;_G.Gui:SetTargetPlayer(game.Players:GetPlayers() or nil)
&#9;&#9;&#9;&#9;&#9;&#9;elseif v.Name == &quot;NonAdmins&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;--print(&quot;Admins down&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local List = {}

&#9;&#9;&#9;&#9;&#9;&#9;&#9;for _, Player in pairs(game.Players:GetPlayers()) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if not Admins:FindFirstChild(Player.Name) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;List[#List+1] = Player
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;--&#9;print(&quot;Player is not in admins&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;_G.Gui:SetTargetPlayer(List or nil) 
&#9;&#9;&#9;&#9;&#9;&#9;elseif v.Name == &quot;AllAdmins&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;--print(&quot;AllAdmins down&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local List = {}
&#9;&#9;&#9;&#9;&#9;&#9;&#9;for _, Player in pairs(game.Players:GetPlayers()) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if Admins:FindFirstChild(Player.Name) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;List[#List+1] = Player
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Player is in admins&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Player is not an admin&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;--print(&quot;Setting target character&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;_G.Gui:SetTargetPlayer(List or nil) 
&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local NewPlayer = Game.Players:FindFirstChild(v.Text) or nil
&#9;&#9;&#9;&#9;&#9;&#9;&#9;_G.Gui:SetTargetPlayer({NewPlayer})
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;coroutine.resume(coroutine.create(function() Function(_G.Gui:GetTargetPlayer(), connection) end))
&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end)()
&#9;end,
&#9;BannedChoiceSelected = function(self, Function)
&#9;&#9;coroutine.wrap(function()
&#9;&#9;&#9;for i,v in pairs(PlayerList:GetChildren()) do
&#9;&#9;&#9;&#9;if v.Name ~= &quot;TextButton.rbxm&quot; and v:IsA(&quot;TextButton&quot;) then
&#9;&#9;&#9;&#9;&#9;connection = v.MouseButton1Click:connect(function()
&#9;&#9;&#9;&#9;&#9;&#9;_G.Gui:ClearListOfPlayers()
&#9;&#9;&#9;&#9;&#9;&#9;_G.Gui:HidePlayerList()
&#9;&#9;&#9;&#9;&#9;&#9;_G.Gui:ShowApplicationFrame()
&#9;&#9;&#9;&#9;&#9;&#9;local Text = v.Text

&#9;&#9;&#9;&#9;&#9;&#9;local NewText = Text:match(&quot;%w+&quot;)

&#9;&#9;&#9;&#9;&#9;&#9;_G.Gui:SetTargetPlayer(Banned:FindFirstChild(NewText) or nil)
&#9;&#9;&#9;&#9;&#9;&#9;coroutine.resume(coroutine.create(function() Function(_G.Gui:GetTargetPlayer(), connection) end))
&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end)()
&#9;end,
&#9;ObjectChoiceSelected = function(self, Function, Object)
&#9;&#9;coroutine.wrap(function()
&#9;&#9;&#9;for i,v in pairs(PlayerList:GetChildren()) do
&#9;&#9;&#9;&#9;if v.Name ~= &quot;TextButton.rbxm&quot; and v:IsA(&quot;TextButton&quot;) then
&#9;&#9;&#9;&#9;&#9;connection = v.MouseButton1Click:connect(function()
&#9;&#9;&#9;&#9;&#9;&#9;_G.Gui:ClearListOfPlayers()
&#9;&#9;&#9;&#9;&#9;&#9;_G.Gui:HidePlayerList()
&#9;&#9;&#9;&#9;&#9;&#9;_G.Gui:ShowApplicationFrame()

&#9;&#9;&#9;&#9;&#9;&#9;_G.Gui:SetTargetPlayer(Object:FindFirstChild(v.Text) or nil)
&#9;&#9;&#9;&#9;&#9;&#9;coroutine.resume(coroutine.create(function() Function(_G.Gui:GetTargetPlayer(), connection) end))
&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end)()
&#9;end,
&#9;StatChoiceSelected = function(self, Function)
&#9;&#9;coroutine.wrap(function()
&#9;&#9;&#9;for i,v in pairs(StatList:GetChildren()) do
&#9;&#9;&#9;&#9;if v.Name ~= &quot;TextButton.rbxm&quot; and v:IsA(&quot;TextButton&quot;) then
&#9;&#9;&#9;&#9;&#9;connection = v.MouseButton1Click:connect(function()
&#9;&#9;&#9;&#9;&#9;&#9;_G.Gui:ClearListOfStats()
&#9;&#9;&#9;&#9;&#9;&#9;_G.Gui:HideStatList()
&#9;&#9;&#9;&#9;&#9;&#9;_G.Gui:ShowApplicationFrame()
&#9;&#9;&#9;&#9;&#9;&#9;_G.Gui:SetTargetStat(Game.Players.LocalPlayer.leaderstats:FindFirstChild(v.Text) or nil)
&#9;&#9;&#9;&#9;&#9;&#9;coroutine.resume(coroutine.create(function() Function(_G.Gui:GetTargetStat(), connection) end))
&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end)()
&#9;end,
&#9;GetUserInput = function(self, Function)
&#9;&#9;coroutine.wrap(function()
&#9;&#9;&#9;_G.Gui:HideApplicationFrame()
&#9;&#9;&#9;_G.Gui:ShowInputBox()
&#9;&#9;&#9;_G.Gui:ResetInputBox()
&#9;&#9;&#9;connection = InputBox[&quot;TextButton.rbxm&quot;].MouseButton1Click:connect(function()
&#9;&#9;&#9;&#9;input = tonumber(InputBox[&quot;TextBox.rbxm&quot;].Text)
&#9;&#9;&#9;&#9;coroutine.resume(coroutine.create(function() Function(input, connection) end))
&#9;&#9;&#9;&#9;_G.Gui:HideInputBox()
&#9;&#9;&#9;&#9;--_G.Gui:ShowApplicationFrame()
&#9;&#9;&#9;&#9;connection:disconnect()
&#9;&#9;&#9;end)
&#9;&#9;end)()
&#9;end,
&#9;GetUserTextInput = function(self, Function)
&#9;&#9;--print(&quot;Getting text input...&quot;)
&#9;&#9;coroutine.wrap(function()
&#9;&#9;&#9;--print(&quot;Running wrap().&quot;)
&#9;&#9;&#9;_G.Gui:HideApplicationFrame()
&#9;&#9;&#9;_G.Gui:ShowInputBox()
&#9;&#9;&#9;_G.Gui:ResetTextInputBox()
&#9;&#9;&#9;connection = InputBox[&quot;TextButton.rbxm&quot;].MouseButton1Click:connect(function()
&#9;&#9;&#9;&#9;input = InputBox[&quot;TextBox.rbxm&quot;].Text
&#9;&#9;&#9;&#9;coroutine.resume(coroutine.create(function() Function(input, connection) end))
&#9;&#9;&#9;&#9;--print(&quot;Ran given function argument.&quot;)
&#9;&#9;&#9;&#9;_G.Gui:HideInputBox()
&#9;&#9;&#9;&#9;--_G.Gui:ShowApplicationFrame()
&#9;&#9;&#9;&#9;connection:disconnect()
&#9;&#9;&#9;end)
&#9;&#9;end)()
&#9;end,
&#9;GetUserConfirm = function(self)
&#9;&#9;--print(&quot;Getting confirmatino&quot;)
&#9;&#9;--coroutine.wrap(function()
&#9;&#9;&#9;_G.Gui:HideApplicationFrame()
&#9;&#9;&#9;_G.Gui:ShowConfirm()
&#9;&#9;&#9;local GotResult = false
&#9;&#9;&#9;local Result = false
&#9;&#9;&#9;local connection1 = Confirm.Confirm.MouseButton1Click:connect(function()
&#9;&#9;&#9;&#9;--print(&quot;Click&quot;)
&#9;&#9;&#9;&#9;Result = true
&#9;&#9;&#9;&#9;GotResult = true
&#9;&#9;&#9;end)

&#9;&#9;&#9;local connection2 = Confirm.Cancel.MouseButton1Click:connect(function()
&#9;&#9;&#9;&#9;--print(&quot;Click&quot;)
&#9;&#9;&#9;&#9;Result = false
&#9;&#9;&#9;&#9;GotResult = true
&#9;&#9;&#9;end)
&#9;&#9;&#9;repeat wait() until GotResult
&#9;&#9;&#9;--print(&quot;Got result&quot;)
&#9;&#9;&#9;_G.Gui:HideConfirm()
&#9;&#9;&#9;_G.Gui:ShowApplicationFrame()
&#9;&#9;&#9;connection1:disconnect()
&#9;&#9;&#9;connection2:disconnect()
&#9;&#9;&#9;return Result;
&#9;&#9;--end)()
&#9;end,&#9;
&#9;GetUserConfirmWithText = function(self, Text)
&#9;&#9;--print(&quot;Getting confirmatino&quot;)
&#9;&#9;--coroutine.wrap(function()
&#9;&#9;&#9;_G.Gui:HideApplicationFrame()
&#9;&#9;&#9;_G.Gui:ShowConfirmText()
&#9;&#9;&#9;ConfirmText.Label.Text = &quot;[ Content Moderated ] D:&quot;
&#9;&#9;&#9;ConfirmText.Label.Text = Text
&#9;&#9;&#9;local GotResult = false
&#9;&#9;&#9;local Result = false
&#9;&#9;&#9;local connection1 = ConfirmText.Confirm.MouseButton1Click:connect(function()
&#9;&#9;&#9;&#9;--print(&quot;Click&quot;)
&#9;&#9;&#9;&#9;Result = true
&#9;&#9;&#9;&#9;GotResult = true
&#9;&#9;&#9;end)

&#9;&#9;&#9;local connection2 = ConfirmText.Cancel.MouseButton1Click:connect(function()
&#9;&#9;&#9;&#9;--print(&quot;Click&quot;)
&#9;&#9;&#9;&#9;Result = false
&#9;&#9;&#9;&#9;GotResult = true
&#9;&#9;&#9;end)
&#9;&#9;&#9;repeat wait() until GotResult
&#9;&#9;&#9;--print(&quot;Got result&quot;)
&#9;&#9;&#9;_G.Gui:HideConfirmText()
&#9;&#9;&#9;_G.Gui:ShowApplicationFrame()
&#9;&#9;&#9;connection1:disconnect()
&#9;&#9;&#9;connection2:disconnect()
&#9;&#9;&#9;return Result;
&#9;&#9;--end)()
&#9;end,
&#9;SetupPlayerHumanoidModification = function(self, Button, Proporty, Value) --Using Numbers, value is optional.  
&#9;&#9;--print(&quot;Setting up player humanoid modification&quot;)
&#9;&#9;Button.MouseButton1Click:connect(function()
&#9;&#9;&#9;if Value then
&#9;&#9;&#9;&#9;--print(&quot;Has value&quot;)
&#9;&#9;&#9;&#9;Gui:GenerateListOfPlayers()
&#9;&#9;&#9;&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;&#9;&#9;&#9;--print(&quot;Player choice&quot;)
&#9;&#9;&#9;&#9;&#9;if player then
&#9;&#9;&#9;&#9;&#9;&#9;--print(&quot;Has player&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;--print(&quot;Has table&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;--print(&quot;Running on player&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;--print(&quot;Check&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if Player and Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Humanoid&quot;):IsA(&quot;Humanoid&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Player.Character.Humanoid[Proporty] = Value
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;--print(&quot;Done running&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;--print(&quot;Entirely done&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;connection:disconnect()
&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;Gui:GetUserInput(function(input, connection2)
&#9;&#9;&#9;&#9;&#9;if input then
&#9;&#9;&#9;&#9;&#9;&#9;Gui:GenerateListOfPlayers()
&#9;&#9;&#9;&#9;&#9;&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if player then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character.Humanoid:IsA(&quot;Humanoid&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Player.Character.Humanoid[Proporty] = input
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;connection:disconnect()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;connection2:disconnect()
&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;Gui:ShowApplicationFrame()
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;end,
&#9;RenderTextBoxWithText = function(Text)
&#9;&#9;repeat wait(0) until SetupTextBox
&#9;&#9;--print(&quot;Rendering TextBox for Text: &quot;..Text)
&#9;&#9;local LineNum = 1
&#9;&#9;local Offset = 10
&#9;&#9;local Indent = 13


&#9;&#9;for a, b in pairs(TextBox:GetChildren()) do
&#9;&#9;&#9;if b:IsA(&quot;TextLabel&quot;) then
&#9;&#9;&#9;&#9;b:Destroy()
&#9;&#9;&#9;end
&#9;&#9;end

&#9;&#9;for line in string.gmatch(Text, &quot;[^\n]*\n&quot;) do
&#9;&#9;&#9;--print(&quot;Creating textlabel in &quot;..TextBox.Name)
&#9;&#9;&#9;local TextLabel = Instance.new(&quot;TextLabel&quot;)
&#9;&#9;&#9;TextLabel.BackgroundTransparency = 1
&#9;&#9;&#9;TextLabel.Name = &quot;HelpLine&quot;..LineNum
&#9;&#9;&#9;TextLabel.ZIndex = 2

&#9;&#9;&#9;TextLabel.TextXAlignment = &quot;Left&quot;
&#9;&#9;&#9;TextLabel.Text = &quot;[ Content Filtered ] D:&quot;
&#9;&#9;&#9;TextLabel.Text = line
&#9;&#9;&#9;TextLabel.Position = UDim2.new(0, Indent, 0, LineNum*15)
&#9;&#9;&#9;TextLabel.Size = UDim2.new(1,0,0,15)
&#9;&#9;&#9;TextLabel.TextColor3 = Color3.new(1,1,1)
&#9;&#9;&#9;TextLabel.Parent = TextBox
&#9;&#9;&#9;TextLabel.ClipsDescendants = true
&#9;&#9;&#9;TextLabel.Archivable = false

&#9;&#9;&#9;LineNum = LineNum + 1
&#9;&#9;end
&#9;&#9;local NewSize = LineNum * 15
&#9;&#9;if NewSize &lt; TextBoxAbsSize.Y+30 then
&#9;&#9;&#9;TextBox.Size = UDim2.new(1, 0, 0, TextBoxAbsSize.Y + 30)
&#9;&#9;else
&#9;&#9;&#9;TextBox.Size = UDim2.new(1, 0, 0, NewSize)
&#9;&#9;end
&#9;&#9;--print(&quot;Done&quot;)
&#9;end,
&#9;ApplyToEachCharacter = function(self, Button, TheFunction, SingleList)
&#9;&#9;--Spawn(function()
&#9;&#9;&#9;Button.MouseButton1Click:connect(function()
&#9;&#9;&#9;&#9;if SingleList then
&#9;&#9;&#9;&#9;&#9;Gui:GenerateSingleListOfPlayers()
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;Gui:GenerateListOfPlayers()&#9;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;&#9;&#9;&#9;if player then
&#9;&#9;&#9;&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if Player and Player:IsA(&quot;Player&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;coroutine.resume(coroutine.create(function() TheFunction(Player) end))
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;connection:disconnect()
&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;end)
&#9;&#9;--end)
&#9;end,
&#9;ApplyToEachCharacterWithTargetPlayer = function(self, Button, TheFunction, FunctionToApplyToTarget)
&#9;&#9;--Spawn(function()
&#9;&#9;&#9;Button.MouseButton1Click:connect(function()
&#9;&#9;&#9;&#9;local CurrentChoice
&#9;&#9;&#9;&#9;Gui:GenerateSingleListOfPlayers()
&#9;&#9;&#9;&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;&#9;&#9;&#9;CurrentChoice = player or true;
&#9;&#9;&#9;&#9;&#9;--print(CurrentChoice[1].Name)
&#9;&#9;&#9;&#9;&#9;connection:disconnect()
&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;repeat wait() until CurrentChoice
&#9;&#9;&#9;&#9;if CurrentChoice and type(CurrentChoice) == &quot;table&quot; and #CurrentChoice == 1 and CurrentChoice[1] then
&#9;&#9;&#9;&#9;&#9;print(&quot;Good choice&quot;)
&#9;&#9;&#9;&#9;&#9;local Target = CurrentChoice[1]
&#9;&#9;&#9;&#9;&#9;if Target and Target:IsA(&quot;Player&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;Gui:GenerateListOfPlayers()
&#9;&#9;&#9;&#9;&#9;&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if player then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if Player and Player:IsA(&quot;Player&quot;) and Target and Target:IsA(&quot;Player&quot;) and Player ~= Target then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;coroutine.resume(coroutine.create(function() TheFunction(Player, Target) end))
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;elseif Player == Target then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;coroutine.resume(coroutine.create(function() FunctionToApplyToTarget(Target) end))
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Invalid&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;connection:disconnect()
&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;print(&quot;Choice failed somehow. D:&quot;)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end)
&#9;end,
&#9;ApplyToEachCharacterWithTargetPlayerAndNumberInput = function(self, Button, TheFunction, FunctionToApplyToTarget)
&#9;&#9;Button.MouseButton1Click:connect(function()
&#9;&#9;&#9;Gui:GetUserInput(function(Input, Connection)
&#9;&#9;&#9;&#9;if Input then
&#9;&#9;&#9;&#9;&#9;print(&quot;Got input&quot;)
&#9;&#9;&#9;&#9;&#9;local CurrentChoice
&#9;&#9;&#9;&#9;&#9;Gui:GenerateSingleListOfPlayers()
&#9;&#9;&#9;&#9;&#9;wait(0)
&#9;&#9;&#9;&#9;&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;&#9;&#9;&#9;&#9;CurrentChoice = player or true;
&#9;&#9;&#9;&#9;&#9;&#9;print(CurrentChoice[1].Name)
&#9;&#9;&#9;&#9;&#9;&#9;connection:disconnect()
&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;repeat wait() until CurrentChoice
&#9;&#9;&#9;&#9;&#9;if CurrentChoice and type(CurrentChoice) == &quot;table&quot; and #CurrentChoice == 1 and CurrentChoice[1] then
&#9;&#9;&#9;&#9;&#9;&#9;local Target = CurrentChoice[1]
&#9;&#9;&#9;&#9;&#9;&#9;if Target and Target:IsA(&quot;Player&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Got target&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Gui:GenerateListOfPlayers()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Got second recepitant&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if player and type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if Player and Player:IsA(&quot;Player&quot;) and Target and Target:IsA(&quot;Player&quot;) and Player ~= Target then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;coroutine.resume(coroutine.create(function() TheFunction(Player, Target, Input) end))
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;elseif Player == Target then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;coroutine.resume(coroutine.create(function() FunctionToApplyToTarget(Target, Input) end))
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Invalid&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;connection:disconnect();
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Current choice failed&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;Gui:ShowApplicationFrame();
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;Gui:ShowApplicationFrame();
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;Connection:disconnect()
&#9;&#9;&#9;end)
&#9;&#9;end)
&#9;end,
&#9;ApplyToEachCharacterWithNumInput = function(self, Button, TheFunction)
&#9;&#9;--Spawn(function()
&#9;&#9;&#9;Button.MouseButton1Click:connect(function()
&#9;&#9;&#9;&#9;Gui:GetUserInput(function(Input, connection2)
&#9;&#9;&#9;&#9;&#9;if Input then
&#9;&#9;&#9;&#9;&#9;&#9;Gui:GenerateListOfPlayers()
&#9;&#9;&#9;&#9;&#9;&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if player then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if Player and Player:IsA(&quot;Player&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;coroutine.resume(coroutine.create(function() TheFunction(Player, Input) end))
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;Gui:ShowApplicationFrame();
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;connection:disconnect()
&#9;&#9;&#9;&#9;&#9;connection2:disconnect()
&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;end)
&#9;&#9;--end)
&#9;end,
&#9;GetBanned = function(self)
&#9;&#9;return Banned
&#9;end,
&#9;WhileSlideOrChange = function(self, Button, TheFunction, Minimum, Maximum, Current)
&#9;&#9;local CurrentVal = Minimum
&#9;&#9;if Current then
&#9;&#9;&#9;CurrentVal = Current();
&#9;&#9;end
&#9;&#9;print(&quot;Setup &apos;WhileSliderOrChange&apos;&quot;)
&#9;&#9;Button.MouseButton1Click:connect(function()
&#9;&#9;&#9;if Current then
&#9;&#9;&#9;&#9;CurrentVal = Current();
&#9;&#9;&#9;end
&#9;&#9;&#9;Gui:ShowSlider()
&#9;&#9;&#9;Gui:HideApplicationFrame();
&#9;&#9;&#9;SlideMax.Text = Maximum
&#9;&#9;&#9;SlideMin.Text = Minimum
&#9;&#9;&#9;SlideCurr.Text = Minimum
&#9;&#9;&#9;local NewSlider, Position = RbxGui.CreateSlider(math.abs(Maximum-Minimum), SliderFrame.AbsoluteSize.X, UDim2.new(0,0,0.5,-2))
&#9;&#9;&#9;NewSlider.Parent = SliderFrame
&#9;&#9;&#9;NewSlider.Size = UDim2.new(1, 0, 0, 2)
&#9;&#9;&#9;local Connection1 = Position.Changed:connect(function()
&#9;&#9;&#9;&#9;--print(&quot;Changed &quot;..Position.Value)
&#9;&#9;&#9;&#9;SlideCurr.Text = Position.Value
&#9;&#9;&#9;&#9;coroutine.resume(coroutine.create(function() TheFunction(Position.Value, SlideCurr) end))
&#9;&#9;&#9;end)
&#9;&#9;&#9;Position.Value = CurrentVal
&#9;&#9;&#9;repeat wait() until not SliderVisible 
&#9;&#9;&#9;print(&quot;Hidden&quot;)
&#9;&#9;&#9;if NewSlider then
&#9;&#9;&#9;&#9;NewSlider:Destroy()
&#9;&#9;&#9;end
&#9;&#9;&#9;Connection1:disconnect();
&#9;&#9;end)
&#9;end,
&#9;WhileColorOrChange = function(self, Button, TheFunction, Current)
&#9;&#9;
&#9;&#9;Button.MouseButton1Click:connect(function()
&#9;&#9;&#9;Gui:ShowColorSelect()
&#9;&#9;&#9;Gui:HideApplicationFrame();


&#9;&#9;&#9;local Connection1 = CurrColorValue.Changed:connect(function()
&#9;&#9;&#9;&#9;coroutine.resume(coroutine.create(function() TheFunction(CurrColorValue.Value) end))
&#9;&#9;&#9;end)

&#9;&#9;&#9;ColorValue = Current()

&#9;&#9;&#9;repeat wait() until not ColorVisible 
&#9;&#9;&#9;print(&quot;Color not visible&quot;)
&#9;&#9;&#9;Connection1:disconnect();
&#9;&#9;end)
&#9;end,
&#9;WhileColorOrChangeWithPlayer = function(self, Button, TheFunction, Current)
&#9;&#9;
&#9;&#9;Button.MouseButton1Click:connect(function()
&#9;&#9;&#9;local SelectedPlayers
&#9;&#9;&#9;Gui:HideApplicationFrame();
&#9;&#9;&#9;Gui:GenerateListOfPlayers()
&#9;&#9;&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;&#9;&#9;Gui:HideApplicationFrame();
&#9;&#9;&#9;&#9;SelectedPlayers = player
&#9;&#9;&#9;&#9;connection:disconnect();
&#9;&#9;&#9;end)

&#9;&#9;&#9;repeat wait() until SelectedPlayers
&#9;&#9;&#9;if SelectedPlayers and type(SelectedPlayers) == &quot;table&quot; then
&#9;&#9;&#9;&#9;Gui:ShowColorSelect()

&#9;&#9;&#9;&#9;local Connection1 = CurrColorValue.Changed:connect(function()
&#9;&#9;&#9;&#9;&#9;for _, Player in pairs(SelectedPlayers) do
&#9;&#9;&#9;&#9;&#9;&#9;if Player and Player:IsA(&quot;Player&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;coroutine.resume(coroutine.create(function() TheFunction(CurrColorValue.Value, Player) end))
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end)

&#9;&#9;&#9;&#9;ColorValue = Current()

&#9;&#9;&#9;&#9;repeat wait() until not ColorVisible 
&#9;&#9;&#9;&#9;print(&quot;Color not visible&quot;)
&#9;&#9;&#9;&#9;Connection1:disconnect();
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;Invalid player input?&quot;)
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;end,
&#9;TagPlayer = function(self, Player, Type, Value, TagVal)
&#9;&#9;if Player and Player:IsA(&quot;Player&quot;) and Player:FindFirstChild(&quot;QuentyGUIAdminTags&quot;) then
&#9;&#9;&#9;--print(&quot;Creating new tag&quot;)
&#9;&#9;&#9;local Tag = Instance.new(Type, Player.QuentyGUIAdminTags)
&#9;&#9;&#9;Tag.Value = Value
&#9;&#9;&#9;Tag.Name = &quot;QuentyAdmin:Tag:&quot;..TagVal
&#9;&#9;&#9;--print(&quot;Done&quot;)
&#9;&#9;end
&#9;end,
&#9;TagPlayerWithChildren = function(self, Player, Type, Value, TagVal, NewTable)
&#9;&#9;if Player and Player:IsA(&quot;Player&quot;) and Player:FindFirstChild(&quot;QuentyGUIAdminTags&quot;) then
&#9;&#9;&#9;print(&quot;Creating new tag&quot;)
&#9;&#9;&#9;local Tag = Instance.new(Type, Player.QuentyGUIAdminTags)
&#9;&#9;&#9;Tag.Value = Value
&#9;&#9;&#9;Tag.Name = &quot;QuentyAdmin:Tag:&quot;..TagVal
&#9;&#9;&#9;for _, Item in pairs(NewTable) do
&#9;&#9;&#9;&#9;Item.Parent = Tag
&#9;&#9;&#9;end
&#9;&#9;&#9;print(&quot;Done&quot;)
&#9;&#9;end
&#9;end,
&#9;TagPlayerOfChoiceWithStringInput = function(self, Button, TagVal, Header)
&#9;&#9;Header = Header or &quot;&quot;
&#9;&#9;Button.MouseButton1Click:connect(function()
&#9;&#9;&#9;&#9;Gui:GetUserTextInput(function(Input, connection2)
&#9;&#9;&#9;&#9;&#9;if Input then
&#9;&#9;&#9;&#9;&#9;&#9;Gui:GenerateListOfPlayers()
&#9;&#9;&#9;&#9;&#9;&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if player then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if Player and Player:IsA(&quot;Player&quot;) and Player:FindFirstChild(&quot;QuentyGUIAdminTags&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Creating new tag&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;local Tag = Instance.new(&quot;StringValue&quot;, Player.QuentyGUIAdminTags)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Tag.Value = Header..input
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Tag.Name = &quot;QuentyAdmin:Tag:&quot;..TagVal
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Done&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;Gui:HideApplicationFrame();
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;connection:disconnect()
&#9;&#9;&#9;&#9;connection2:disconnect()
&#9;&#9;&#9;end)
&#9;&#9;end)
&#9;end,
&#9;TagPlayerOfChoiceWithNumInput = function(self, Button, TagVal)
&#9;&#9;Button.MouseButton1Click:connect(function()
&#9;&#9;&#9;&#9;Gui:GetUserInput(function(Input, connection2)
&#9;&#9;&#9;&#9;&#9;if Input then
&#9;&#9;&#9;&#9;&#9;&#9;Gui:GenerateListOfPlayers()
&#9;&#9;&#9;&#9;&#9;&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if player then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if Player and Player:IsA(&quot;Player&quot;) and Player:FindFirstChild(&quot;QuentyGUIAdminTags&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Creating new tag&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;local Tag = Instance.new(&quot;NumberValue&quot;, Player.QuentyGUIAdminTags)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Tag.Value = Input
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Tag.Name = &quot;QuentyAdmin:Tag:&quot;..TagVal
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Done&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;Gui:HideApplicationFrame();
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;connection:disconnect()
&#9;&#9;&#9;&#9;connection2:disconnect()
&#9;&#9;&#9;end)
&#9;&#9;end)
&#9;end,
&#9;TagPlayerOfChoice = function(self, Button, TagVal)
&#9;&#9;Button.MouseButton1Click:connect(function()
&#9;&#9;&#9;Gui:GenerateListOfPlayers()
&#9;&#9;&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;&#9;&#9;if player then
&#9;&#9;&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if Player and Player:IsA(&quot;Player&quot;) and Player:FindFirstChild(&quot;QuentyGUIAdminTags&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Creating new tag. :D&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Setting tag too: &quot;..&quot;QuentyAdmin:Tag:&quot;..TagVal)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;local Tag = Instance.new(&quot;StringValue&quot;, Player.QuentyGUIAdminTags)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Tag.Name = &quot;QuentyAdmin:Tag:&quot;..TagVal
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Done&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end)
&#9;&#9;&#9;connection:disconnect()
&#9;&#9;end)
&#9;end,
&#9;DetagPlayerOfChoice = function(self, Button, TagVal)
&#9;&#9;Button.MouseButton1Click:connect(function()
&#9;&#9;&#9;Gui:GenerateListOfPlayers()
&#9;&#9;&#9;Gui:PlayerChoiceSelected(function(player, connection)
&#9;&#9;&#9;&#9;if player then
&#9;&#9;&#9;&#9;&#9;if type(player) == &quot;table&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;for _, Player in pairs(player) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if Player and Player:IsA(&quot;Player&quot;) and Player:FindFirstChild(&quot;QuentyGUIAdminTags&quot;) and Player.QuentyGUIAdminTags:FindFirstChild(&quot;QuentyAdmin:Tag:&quot;..TagVal) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Removing a tag&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Player.QuentyGUIAdminTags:FindFirstChild(&quot;QuentyAdmin:Tag:&quot;..TagVal):Destroy();
&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Player does not have tag. &quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;print(&quot;Error&quot;)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;print(&quot;Error2&quot;)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end)
&#9;&#9;&#9;connection:disconnect()
&#9;&#9;end)
&#9;end,
&#9;TagCurrentPlayerWithString = function(self, Button, TagVal, Header)
&#9;&#9;Header = Header or &quot;&quot;
&#9;&#9;Button.MouseButton1Click:connect(function()
&#9;&#9;&#9;Gui:GetUserTextInput(function(Input, connection)
&#9;&#9;&#9;&#9;if Input then
&#9;&#9;&#9;&#9;&#9;print(&quot;Creating new tag&quot;)
&#9;&#9;&#9;&#9;&#9;local Tag = Instance.new(&quot;StringValue&quot;, AdminTag)
&#9;&#9;&#9;&#9;&#9;Tag.Value = Header..Input
&#9;&#9;&#9;&#9;&#9;Tag.Name = &quot;QuentyAdmin:Tag:&quot;..TagVal
&#9;&#9;&#9;&#9;&#9;print(&quot;Done&quot;)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;Gui:ShowApplicationFrame()
&#9;&#9;&#9;&#9;connection:disconnect()
&#9;&#9;&#9;end)
&#9;&#9;end)
&#9;end,
&#9;TagCurrentPlayer = function(self, Button, TagVal, Value)
&#9;&#9;print(&quot;Creating new tag&quot;)
&#9;&#9;local Tag = Instance.new(&quot;StringValue&quot;, AdminTag)
&#9;&#9;Tag.Value = Value
&#9;&#9;Tag.Name = &quot;QuentyAdmin:Tag:&quot;..TagVal
&#9;&#9;print(&quot;Done&quot;)
&#9;end,
&#9;SetPlayerCharacterMaterial = function(self, Button, Material)
&#9;&#9;&#9;Gui:ApplyToEachCharacter(Button, function(Player) 
&#9;&#9;&#9;&#9;if Player.Character and Player.Character:FindFirstChild(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Humanoid&quot;):IsA(&quot;Humanoid&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character:FindFirstChild(&quot;Torso&quot;):IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;&#9;Gui:RemoveHats(Player)
&#9;&#9;&#9;&#9;&#9;for i,v in pairs(Player.Character:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;&#9;if v:IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;v.Material = Material
&#9;&#9;&#9;&#9;&#9;&#9;elseif --[[v:IsA(&quot;Hat&quot;) or--]] v:IsA(&quot;Shirt&quot;) or v:IsA(&quot;Pants&quot;) then 
&#9;&#9;&#9;&#9;&#9;&#9;&#9;v:Destroy()
&#9;&#9;&#9;&#9;&#9;&#9;elseif v:FindFirstChild(&quot;roblox&quot;) then 
&#9;&#9;&#9;&#9;&#9;&#9;&#9;v.roblox:Destroy()
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;print(&quot;Invalid&quot;)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end)
&#9;end,
&#9;RemoveTools = function(self, Player)
&#9;&#9;if Player and Player:IsA(&quot;Player&quot;) and Player:FindFirstChild(&quot;Backpack&quot;) then
&#9;&#9;&#9;if ToolCache:FindFirstChild(Player.Name) then
&#9;&#9;&#9;&#9;for _, Item in pairs(Player.Backpack:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;if Item:IsA(&quot;BackpackItem&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;Item.Parent = ToolCache[Player.Name]
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if Player and Player.Character then
&#9;&#9;&#9;&#9;&#9;for _, Item in pairs(Player.Character:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;&#9;if Item:IsA(&quot;BackpackItem&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Item.Parent = ToolCache[Player.Name]
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;Could not find cache for player. D:&quot;)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end,
&#9;RemoveHats = function(self, Player)
&#9;&#9;if Player and Player:IsA(&quot;Player&quot;) and Player.Character then
&#9;&#9;&#9;if HatCache:FindFirstChild(Player.Name) then
&#9;&#9;&#9;&#9;if Player and Player.Character then
&#9;&#9;&#9;&#9;&#9;for _, Item in pairs(Player.Character:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;&#9;if Item:IsA(&quot;Hat&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Item.Parent = HatCache[Player.Name]
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;Could not find hat cache for player. D:&quot;)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end,
&#9;RestoreHats = function(self, Player)
&#9;&#9;if Player and Player:IsA(&quot;Player&quot;) and Player.Character then
&#9;&#9;&#9;if HatCache:FindFirstChild(Player.Name) then
&#9;&#9;&#9;&#9;for _, Item in pairs(HatCache:FindFirstChild(Player.Name):GetChildren()) do
&#9;&#9;&#9;&#9;&#9;if Item:IsA(&quot;Hat&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;Item.Parent = Player.Character
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;Could not find cache for player. D:&quot;)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end,
&#9;RestoreTools = function(self, Player)
&#9;&#9;if Player and Player:IsA(&quot;Player&quot;) and Player:FindFirstChild(&quot;Backpack&quot;) then
&#9;&#9;&#9;if ToolCache:FindFirstChild(Player.Name) then
&#9;&#9;&#9;&#9;for _, Item in pairs(ToolCache:FindFirstChild(Player.Name):GetChildren()) do
&#9;&#9;&#9;&#9;&#9;if Item:IsA(&quot;BackpackItem&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;Item.Parent = Player.Backpack
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;print(&quot;Could not find cache for player. D:&quot;)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end,
&#9;ChangeGravity = function(self, Player, Gravity) -- Gravity coils, FTW
&#9;&#9;local EqualizingForce = 236 / 1.2 -- Amount of force required to levitate a mass
&#9;&#9;local GravityForce

&#9;&#9;local function RecursiveGetLift(node)
&#9;&#9;&#9;local m = 0
&#9;&#9;&#9;local c = node:GetChildren()
&#9;&#9;&#9;for i=1,#c do
&#9;&#9;&#9;&#9;if c[i]:IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;&#9;if c[i].Name == &quot;Handle&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;m = m + (c[i]:GetMass() * EqualizingForce * 1) -- Hack that makes hats weightless, so different hats don&apos;t change your jump height
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;m = m + (c[i]:GetMass() * EqualizingForce * Gravity)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;m = m + RecursiveGetLift(c[i])
&#9;&#9;&#9;end
&#9;&#9;&#9;return m;
&#9;&#9;end

&#9;&#9;local function OnMassChanged(Child, Char)
&#9;&#9;&#9;print(&quot;Mass changed:&quot; .. Child.Name .. &quot;    &quot; .. Char.Name)
&#9;&#9;&#9;if GravityForce and Char and Child then
&#9;&#9;&#9;&#9;GravityForce.force = Vector3.new(0, RecursiveGetLift(Char), 0)
&#9;&#9;&#9;end
&#9;&#9;end

&#9;&#9;if Player and Player.Character and Player.Character:FindFirstChild(&quot;Torso&quot;) then
&#9;&#9;&#9;GravityForce = Player.Character.Torso:FindFirstChild(&quot;QuentyAdminGravityForce&quot;)
&#9;&#9;&#9;if not GravityForce or not GravityForce:IsA(&quot;BodyForce&quot;) then
&#9;&#9;&#9;&#9;if GravityForce then
&#9;&#9;&#9;&#9;&#9;GravityForce:Destroy()
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;GravityForce = Instance.new(&quot;BodyForce&quot;, Player.Character.Torso)
&#9;&#9;&#9;&#9;GravityForce.Name = &quot;QuentyAdminGravityForce&quot;
&#9;&#9;&#9;end
&#9;&#9;&#9;GravityForce.force = Vector3.new(0, RecursiveGetLift(Player.Character) ,0)

&#9;&#9;&#9;local Connection1 = Player.Character.ChildAdded:connect(function(Child)
&#9;&#9;&#9;&#9;OnMassChanged(Child, Player.Character)
&#9;&#9;&#9;end)

&#9;&#9;&#9;local Connection2 = Player.Character.ChildRemoved:connect(function(Child)
&#9;&#9;&#9;&#9;OnMassChanged(Child, Player.Character)
&#9;&#9;&#9;end)

&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;repeat wait(0.05) until not (Player and Player.Character and Player.Character:FindFirstChild(&quot;Torso&quot;) and GravityForce and GravityForce.Parent and GravityForce.Parent.Parent)
&#9;&#9;&#9;&#9;print(&quot;Gravity force nilled; disconnecting&quot;)
&#9;&#9;&#9;&#9;Connection1:disconnect()
&#9;&#9;&#9;&#9;Connection2:disconnect()
&#9;&#9;&#9;end)
&#9;&#9;end
&#9;end,
&#9;RemoveGravity = function(self, Player)
&#9;&#9;if Player and Player.Character and Player.Character:FindFirstChild(&quot;Torso&quot;) then
&#9;&#9;&#9;local GravityForce = Player.Character.Torso:FindFirstChild(&quot;QuentyAdminGravityForce&quot;)
&#9;&#9;&#9;if GravityForce then
&#9;&#9;&#9;&#9;GravityForce:Destroy()
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end,
&#9;GetCurrGravity = function(self, Player)
&#9;&#9;if Player and Player.Character and Player.Character:FindFirstChild(&quot;Torso&quot;) and Player.Character.Torso:FindFirstChild(&quot;QuentyAdminGravityForce&quot;) and Player.Character.Torso.QuentyAdminGravityForce:IsA(&quot;BodyForce&quot;) then
&#9;&#9;&#9;return Player.Character.Torso.QuentyAdminGravityForce.force.Y;
&#9;&#9;end
&#9;&#9;print(&quot;Player had no gravity change&quot;)
&#9;&#9;return 0;
&#9;end
}

Gui.RenderTextBoxWithText(AboutText)
_G.Gui = Gui
_G.Gui.UpdateSec = 1
_G.Gui.LastUpdateTime = tick()</ProtectedString>
					</Properties>
				</Item>
				<Item class="Frame" referent="RBX468">
					<Properties>
						<bool name="Active">false</bool>
						<Color3 name="BackgroundColor3">4278190080</Color3>
						<float name="BackgroundTransparency">0.699999988</float>
						<Color3 name="BorderColor3">4279970357</Color3>
						<int name="BorderSizePixel">0</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<string name="Name">Color3Select</string>
						<UDim2 name="Position">
							<XS>0.5</XS>
							<XO>-300</XO>
							<YS>0</YS>
							<YO>-465</YO>
						</UDim2>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>600</XO>
							<YS>0</YS>
							<YO>400</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<token name="Style">0</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="TextButton" referent="RBX469">
						<Properties>
							<bool name="Active">true</bool>
							<bool name="AutoButtonColor">true</bool>
							<Color3 name="BackgroundColor3">4294901760</Color3>
							<float name="BackgroundTransparency">0.699999988</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">2</token>
							<bool name="Modal">false</bool>
							<string name="Name">TextButton.rbxm</string>
							<UDim2 name="Position">
								<XS>1</XS>
								<XO>-105</XO>
								<YS>1</YS>
								<YO>5</YO>
							</UDim2>
							<bool name="Selected">false</bool>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>100</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<string name="Text">Close</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">2</int>
						</Properties>
						<Item class="LocalScript" referent="RBX470">
							<Properties>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">ClosePlayerList.lua</string>
								<ProtectedString name="Source">repeat wait(0) until _G and _G.Gui and tick() - _G.Gui.LastUpdateTime &lt; _G.Gui.UpdateSec and _G.Gui.Verify() and script and script.Parent
local Gui = _G.Gui

script.Parent.MouseButton1Click:connect(function()
&#9;Gui:HideColorSelect()
&#9;Gui:ShowApplicationFrame()
end)</ProtectedString>
							</Properties>
						</Item>
						<Item class="Frame" referent="RBX471">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Decoration</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>0</XO>
									<YS>0.5</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
					</Item>
					<Item class="Frame" referent="RBX472">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4278190080</Color3>
							<float name="BackgroundTransparency">0.5</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<string name="Name">Title</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>5</XO>
								<YS>0</YS>
								<YO>-30</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>-5</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="Frame" referent="RBX473">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4278190080</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Title</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>-5</XO>
									<YS>0</YS>
									<YO>-10</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>10</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="Frame" referent="RBX474">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4294901760</Color3>
								<float name="BackgroundTransparency">0.300000012</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Frame</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>-5</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>5</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextLabel" referent="RBX475">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">1</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<string name="Name">TextLabel</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>8</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>-8</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<string name="Text">Select a Color</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">0</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
					</Item>
					<Item class="Frame" referent="RBX476">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4278190080</Color3>
							<float name="BackgroundTransparency">0.699999988</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<string name="Name">Frame</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>1</YS>
								<YO>0</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>40</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Frame" referent="RBX477">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4294242536</Color3>
							<float name="BackgroundTransparency">0.699999988</float>
							<Color3 name="BorderColor3">4286611584</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<string name="Name">Color3Dialog</string>
							<UDim2 name="Position">
								<XS>0.5</XS>
								<XO>-126</XO>
								<YS>0.5</YS>
								<YO>-134</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>252</XO>
								<YS>0</YS>
								<YO>269</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">7</int>
						</Properties>
						<Item class="Configuration" referent="RBX478">
							<Properties>
								<string name="Name">Config</string>
							</Properties>
							<Item class="Color3Value" referent="RBX479">
								<Properties>
									<string name="Name">Value</string>
									<Color3 name="Value">4285234533</Color3>
								</Properties>
							</Item>
							<Item class="Color3Value" referent="RBX480">
								<Properties>
									<string name="Name">Compare</string>
									<Color3 name="Value">4278190080</Color3>
								</Properties>
							</Item>
							<Item class="Color3Value" referent="RBX481">
								<Properties>
									<string name="Name">CurrValue</string>
									<Color3 name="Value">4285234533</Color3>
								</Properties>
							</Item>
						</Item>
						<Item class="LocalScript" referent="RBX482">
							<Properties>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">Program</string>
								<ProtectedString name="Source">wait(0.5)

local Dialog = script.Parent
local Config = Dialog.Config
local Design = Dialog.Design
local Color = Design.Color
local CDrag

local vValue&#9;= Config.Value
local vCompare&#9;= Config.Compare
local vHue&#9;&#9;= Dialog.HueNum.Config.Value
local vSat&#9;&#9;= Dialog.SatNum.Config.Value
local vLum&#9;&#9;= Dialog.LumNum.Config.Value
local vRed&#9;&#9;= Dialog.RedNum.Config.Value
local vGrn&#9;&#9;= Dialog.GrnNum.Config.Value
local vBlu&#9;&#9;= Dialog.BluNum.Config.Value
local CurrValue = Config.CurrValue

local V = vValue.Value
local H,S,L = 0,0,0
local R,B,G = 0,0,0
local internal = {
&#9;[vValue] = false;
&#9;[vHue] = false;
&#9;[vSat] = false;
&#9;[vLum] = false;
&#9;[vRed] = false;
&#9;[vGrn] = false;
&#9;[vBlu] = false;
}

event = {}
local function disconnect(set)
&#9;for _,index in pairs(set) do
&#9;&#9;if event[index] then
&#9;&#9;&#9;event[index]:disconnect()
&#9;&#9;&#9;event[index] = nil
&#9;&#9;end
&#9;end
end

Dialog.BorderColor3 = Color.Border.Value
Dialog.BackgroundColor3 = Color3.new(0.956863, 0.941177, 0.909804)
Dialog.ZIndex = 7
&#9;--[[local oDoneButton = Instance.new(&quot;TextButton&quot;)
&#9;oDoneButton.FontSize = Enum.FontSize.Size9
&#9;oDoneButton.archivable = false
&#9;oDoneButton.Size = UDim2.new(0.15476191043854, 0, 0.20817844569683, 0)
&#9;oDoneButton.Name = &quot;DoneButton&quot;
&#9;oDoneButton.TextColor3 = Color.Text.Value
&#9;oDoneButton.BorderColor3 = Color.Border.Value
&#9;oDoneButton.AutoButtonColor = false
&#9;oDoneButton.Text = &quot;Done&quot;
&#9;oDoneButton.Position = UDim2.new(0.82539683580399, 0, 0.77323418855667, 0)
&#9;oDoneButton.BackgroundColor3 = Color.Background.Value
&#9;oDoneButton.ZIndex = 7
&#9;oDoneButton.Parent = Dialog--]]
&#9;local oHueSatSelect = Instance.new(&quot;ImageButton&quot;)
&#9;oHueSatSelect.Image = &quot;http://www.roblox.com/asset/?id=45858504&quot;
&#9;oHueSatSelect.archivable = false
&#9;oHueSatSelect.Size = UDim2.new(0.79365080595016, 0, 0.74349445104599, 0)
&#9;oHueSatSelect.Name = &quot;HueSatSelect&quot;
&#9;oHueSatSelect.BorderColor3 = Color.Hidden.Value
&#9;oHueSatSelect.AutoButtonColor = false
&#9;oHueSatSelect.Position = UDim2.new(0.015873016789556, 0, 0.014869888313115, 0)
&#9;oHueSatSelect.BorderSizePixel = 0
&#9;oHueSatSelect.BackgroundColor3 = Color.Hidden.Value
&#9;oHueSatSelect.ZIndex = 7
&#9;oHueSatSelect.Parent = Dialog
&#9;&#9;local oSatMarker = Instance.new(&quot;Frame&quot;)
&#9;&#9;oSatMarker.Size = UDim2.new(1, 0, 0, 1)
&#9;&#9;oSatMarker.Name = &quot;SatMarker&quot;
&#9;&#9;oSatMarker.BorderColor3 = Color.Hidden.Value
&#9;&#9;oSatMarker.Position = UDim2.new(0, 0, 0.5, 0)
&#9;&#9;oSatMarker.BorderSizePixel = 0
&#9;&#9;oSatMarker.BackgroundColor3 = Color3.new(1, 1, 1)
&#9;&#9;oSatMarker.ZIndex = 7
&#9;&#9;oSatMarker.Parent = oHueSatSelect
&#9;&#9;local oHueMarker = Instance.new(&quot;Frame&quot;)
&#9;&#9;oHueMarker.Size = UDim2.new(0, 1, 1, 0)
&#9;&#9;oHueMarker.Name = &quot;HueMarker&quot;
&#9;&#9;oHueMarker.BorderColor3 = Color.Hidden.Value
&#9;&#9;oHueMarker.Position = UDim2.new(0.5, 0, 0, 0)
&#9;&#9;oHueMarker.BorderSizePixel = 0
&#9;&#9;oHueMarker.BackgroundColor3 = Color3.new(1, 1, 1)
&#9;&#9;oHueMarker.ZIndex = 7
&#9;&#9;oHueMarker.Parent = oHueSatSelect
&#9;local oHueSatColor = Instance.new(&quot;Frame&quot;)
&#9;oHueSatColor.archivable = false
&#9;oHueSatColor.Size = UDim2.new(0.095238097012043, 0, 0.74349445104599, 0)
&#9;oHueSatColor.Name = &quot;HueSatColor&quot;
&#9;oHueSatColor.BorderColor3 = Color.Hidden.Value
&#9;oHueSatColor.Position = UDim2.new(0.85714286565781, 0, 0.014869888313115, 0)
&#9;oHueSatColor.BorderSizePixel = 0
&#9;oHueSatColor.ZIndex = 7
&#9;oHueSatColor.Parent = Dialog
&#9;local oLumSelect = Instance.new(&quot;ImageButton&quot;)
&#9;oLumSelect.Image = &quot;http://www.roblox.com/asset/?id=45858510&quot;
&#9;oLumSelect.archivable = false
&#9;oLumSelect.Size = UDim2.new(0.095238097012043, 0, 0.74349445104599, 0)
&#9;oLumSelect.Name = &quot;LumSelect&quot;
&#9;oLumSelect.BorderColor3 = Color.Hidden.Value
&#9;oLumSelect.AutoButtonColor = false
&#9;oLumSelect.BackgroundTransparency = 1
&#9;oLumSelect.Position = UDim2.new(0.85714286565781, 0, 0.014869888313115, 0)
&#9;oLumSelect.BorderSizePixel = 0
&#9;oLumSelect.BackgroundColor3 = Color.Hidden.Value
&#9;oLumSelect.ZIndex = 7
&#9;oLumSelect.Parent = Dialog
&#9;&#9;local oLumMarker = Instance.new(&quot;Frame&quot;)
&#9;&#9;oLumMarker.Size = UDim2.new(1, 0, 0, 1)
&#9;&#9;oLumMarker.Name = &quot;LumMarker&quot;
&#9;&#9;oLumMarker.BorderColor3 = Color.Hidden.Value
&#9;&#9;oLumMarker.Position = UDim2.new(0, 0, 0.5, 0)
&#9;&#9;oLumMarker.BorderSizePixel = 0
&#9;&#9;oLumMarker.ZIndex = 7
&#9;&#9;oLumMarker.Parent = oLumSelect
&#9;&#9;&#9;local oArrowIcon = Instance.new(&quot;ImageLabel&quot;)
&#9;&#9;&#9;oArrowIcon.Image = Design.ArrowIcon.Value
&#9;&#9;&#9;oArrowIcon.Size = UDim2.new(0, 12, 0, 12)
&#9;&#9;&#9;oArrowIcon.Name = &quot;ArrowIcon&quot;
&#9;&#9;&#9;oArrowIcon.BorderColor3 = Color.Hidden.Value
&#9;&#9;&#9;oArrowIcon.BackgroundTransparency = 1
&#9;&#9;&#9;oArrowIcon.Position = UDim2.new(1, 0, 0, -6)
&#9;&#9;&#9;oArrowIcon.BorderSizePixel = 0
&#9;&#9;&#9;oArrowIcon.BackgroundColor3 = Color.Hidden.Value
&#9;&#9;&#9;oArrowIcon.ZIndex = 7
&#9;&#9;&#9;oArrowIcon.Parent = oLumMarker
&#9;local oColorBorder = Instance.new(&quot;Frame&quot;)
&#9;oColorBorder.archivable = false
&#9;oColorBorder.Size = UDim2.new(0.23015873134136, 0, 0.2156133800745, 0)
&#9;oColorBorder.Name = &quot;ColorBorder&quot;
&#9;oColorBorder.BorderColor3 = Color.Hidden.Value
&#9;oColorBorder.Position = UDim2.new(0.015873016789556, 0, 0.77323418855667, 0)
&#9;oColorBorder.BorderSizePixel = 0
&#9;oColorBorder.BackgroundColor3 = Color3.new(0, 0, 0)
&#9;oColorBorder.ZIndex = 7
&#9;oColorBorder.Parent = Dialog
&#9;local oHueLabel = Instance.new(&quot;TextLabel&quot;)
&#9;oHueLabel.FontSize = Enum.FontSize.Size9
&#9;oHueLabel.archivable = false
&#9;oHueLabel.Size = UDim2.new(0.063492067158222, 0, 0.059479553252459, 0)
&#9;oHueLabel.Name = &quot;HueLabel&quot;
&#9;oHueLabel.TextColor3 = Color.Text.Value
&#9;oHueLabel.BorderColor3 = Color.Hidden.Value
&#9;oHueLabel.Text = &quot;H:&quot;
&#9;oHueLabel.BackgroundTransparency = 1
&#9;oHueLabel.Position = UDim2.new(0.25396826863289, 0, 0.77323418855667, 0)
&#9;oHueLabel.BorderSizePixel = 0
&#9;oHueLabel.BackgroundColor3 = Color.Hidden.Value
&#9;oHueLabel.ZIndex = 7
&#9;oHueLabel.Parent = Dialog
&#9;local oSatLabel = Instance.new(&quot;TextLabel&quot;)
&#9;oSatLabel.FontSize = Enum.FontSize.Size9
&#9;oSatLabel.archivable = false
&#9;oSatLabel.Size = UDim2.new(0.063492067158222, 0, 0.059479553252459, 0)
&#9;oSatLabel.Name = &quot;SatLabel&quot;
&#9;oSatLabel.TextColor3 = Color.Text.Value
&#9;oSatLabel.BorderColor3 = Color.Hidden.Value
&#9;oSatLabel.Text = &quot;S:&quot;
&#9;oSatLabel.BackgroundTransparency = 1
&#9;oSatLabel.Position = UDim2.new(0.25396826863289, 0, 0.84758365154266, 0)
&#9;oSatLabel.BorderSizePixel = 0
&#9;oSatLabel.BackgroundColor3 = Color.Hidden.Value
&#9;oSatLabel.ZIndex = 7
&#9;oSatLabel.Parent = Dialog
&#9;local oLumLabel = Instance.new(&quot;TextLabel&quot;)
&#9;oLumLabel.FontSize = Enum.FontSize.Size9
&#9;oLumLabel.archivable = false
&#9;oLumLabel.Size = UDim2.new(0.063492067158222, 0, 0.059479553252459, 0)
&#9;oLumLabel.Name = &quot;LumLabel&quot;
&#9;oLumLabel.TextColor3 = Color.Text.Value
&#9;oLumLabel.BorderColor3 = Color.Hidden.Value
&#9;oLumLabel.Text = &quot;L:&quot;
&#9;oLumLabel.BackgroundTransparency = 1
&#9;oLumLabel.Position = UDim2.new(0.25396826863289, 0, 0.92193311452866, 0)
&#9;oLumLabel.BorderSizePixel = 0
&#9;oLumLabel.BackgroundColor3 = Color.Hidden.Value
&#9;oLumLabel.ZIndex = 7
&#9;oLumLabel.Parent = Dialog
&#9;local oRedLabel = Instance.new(&quot;TextLabel&quot;)
&#9;oRedLabel.FontSize = Enum.FontSize.Size9
&#9;oRedLabel.archivable = false
&#9;oRedLabel.Size = UDim2.new(0.063492067158222, 0, 0.059479553252459, 0)
&#9;oRedLabel.Name = &quot;RedLabel&quot;
&#9;oRedLabel.TextColor3 = Color.Text.Value
&#9;oRedLabel.BorderColor3 = Color.Hidden.Value
&#9;oRedLabel.Text = &quot;R:&quot;
&#9;oRedLabel.BackgroundTransparency = 1
&#9;oRedLabel.Position = UDim2.new(0.53571426868439, 0, 0.77323418855667, 0)
&#9;oRedLabel.BorderSizePixel = 0
&#9;oRedLabel.BackgroundColor3 = Color.Hidden.Value
&#9;oRedLabel.ZIndex = 7
&#9;oRedLabel.Parent = Dialog
&#9;local oGrnLabel = Instance.new(&quot;TextLabel&quot;)
&#9;oGrnLabel.FontSize = Enum.FontSize.Size9
&#9;oGrnLabel.archivable = false
&#9;oGrnLabel.Size = UDim2.new(0.063492067158222, 0, 0.059479553252459, 0)
&#9;oGrnLabel.Name = &quot;GrnLabel&quot;
&#9;oGrnLabel.TextColor3 = Color.Text.Value
&#9;oGrnLabel.BorderColor3 = Color.Hidden.Value
&#9;oGrnLabel.Text = &quot;G:&quot;
&#9;oGrnLabel.BackgroundTransparency = 1
&#9;oGrnLabel.Position = UDim2.new(0.53571426868439, 0, 0.84758365154266, 0)
&#9;oGrnLabel.BorderSizePixel = 0
&#9;oGrnLabel.BackgroundColor3 = Color.Hidden.Value
&#9;oGrnLabel.ZIndex = 7
&#9;oGrnLabel.Parent = Dialog
&#9;local oBluLabel = Instance.new(&quot;TextLabel&quot;)
&#9;oBluLabel.FontSize = Enum.FontSize.Size9
&#9;oBluLabel.archivable = false
&#9;oBluLabel.Size = UDim2.new(0.063492067158222, 0, 0.059479553252459, 0)
&#9;oBluLabel.Name = &quot;BluLabel&quot;
&#9;oBluLabel.TextColor3 = Color.Text.Value
&#9;oBluLabel.BorderColor3 = Color.Hidden.Value
&#9;oBluLabel.Text = &quot;B:&quot;
&#9;oBluLabel.BackgroundTransparency = 1
&#9;oBluLabel.Position = UDim2.new(0.53571426868439, 0, 0.92193311452866, 0)
&#9;oBluLabel.BorderSizePixel = 0
&#9;oBluLabel.BackgroundColor3 = Color.Hidden.Value
&#9;oBluLabel.ZIndex = 7
&#9;oBluLabel.Parent = Dialog
&#9;local oFinalColor = Instance.new(&quot;Frame&quot;)
&#9;oFinalColor.archivable = false
&#9;oFinalColor.Size = UDim2.new(0.22222222387791, 0, 0.10408922284842, 0)
&#9;oFinalColor.Name = &quot;FinalColor&quot;
&#9;oFinalColor.BorderColor3 = Color.Hidden.Value
&#9;oFinalColor.Position = UDim2.new(0.019841270521283, 0, 0.77695167064667, 0)
&#9;oFinalColor.BorderSizePixel = 0
&#9;oFinalColor.ZIndex = 7
&#9;oFinalColor.Parent = Dialog
&#9;local oLastColor = Instance.new(&quot;Frame&quot;)
&#9;oLastColor.archivable = false
&#9;oLastColor.Size = UDim2.new(0.22222222387791, 0, 0.10408922284842, 0)
&#9;oLastColor.Name = &quot;LastColor&quot;
&#9;oLastColor.BorderColor3 = Color.Hidden.Value
&#9;oLastColor.Position = UDim2.new(0.019841270521283, 0, 0.88104087114334, 0)
&#9;oLastColor.BorderSizePixel = 0
&#9;oLastColor.ZIndex = 7
&#9;oLastColor.Parent = Dialog

local function GetCDrag(object)
&#9;local screen = object
&#9;repeat
&#9;&#9;screen = screen.Parent
&#9;&#9;if screen == nil then return false, object.Name .. &quot; is not descendent of ScreenGui&quot; end
&#9;until screen:IsA&quot;ScreenGui&quot;
&#9;local cdrag = screen:FindFirstChild(&quot;CDrag&quot;)
&#9;if not cdrag then
&#9;&#9;cdrag = Instance.new(&quot;ImageButton&quot;)
&#9;&#9;cdrag.Active = false
&#9;&#9;cdrag.Visible = false
&#9;&#9;cdrag.ZIndex = 8
&#9;&#9;cdrag.BorderSizePixel = 0
&#9;&#9;cdrag.Size = UDim2.new(1.5, 0, 1.5, 0)
&#9;&#9;cdrag.BorderColor3 = Color3.new(0, 0, 0)
&#9;&#9;cdrag.AutoButtonColor = false
&#9;&#9;cdrag.BackgroundTransparency = 1
&#9;&#9;cdrag.Position = UDim2.new(-0.25, 0, -0.25, 0)
&#9;&#9;cdrag.Name = &quot;CDrag&quot;
&#9;&#9;cdrag.BackgroundColor3 = Color3.new(0, 0, 0)
&#9;&#9;cdrag.Parent = screen
&#9;end
&#9;return cdrag
end

function InternalSync(type,value)
&#9;internal[type] = true
&#9;type.Value = value
&#9;internal[type] = false
end

function round(n)
&#9;return math.floor(n+0.5)
end

function InvC3(c3)
&#9;return Color3.new(1 - c3.r, 1 - c3.g, 1 - c3.b)
end

function C3toByte(c3)
&#9;return round(c3.r*255),round(c3.g*255),round(c3.b*255)
end

local function RGBtoHSL(R,G,B)
&#9;local Min,Max = math.min(R,G,B),math.max(R,G,B)
&#9;local dMax = Max - Min
&#9;local H,S,L = 0,0,(Max + Min)/2
&#9;if dMax ~= 0 then
&#9;&#9;if L &lt; 0.5 then
&#9;&#9;&#9;S = dMax/(Max + Min)
&#9;&#9;else
&#9;&#9;&#9;S = dMax/(2 - Max - Min)
&#9;&#9;end
&#9;&#9;local dR = (((Max-R)/6)+(dMax/2))/dMax
&#9;&#9;local dG = (((Max-G)/6)+(dMax/2))/dMax
&#9;&#9;local dB = (((Max-B)/6)+(dMax/2))/dMax
&#9;&#9;if R == Max then
&#9;&#9;&#9;H = dB - dG
&#9;&#9;elseif G == Max then
&#9;&#9;&#9;H = (1/3)+dR-dB
&#9;&#9;elseif B == Max then
&#9;&#9;&#9;H = (2/3)+dG-dR
&#9;&#9;end

&#9;&#9;if H &lt; 0 then H = H+1 end
&#9;&#9;if H &gt; 1 then H = H-1 end
&#9;end
&#9;return H,S,L
end

local function Hue_to_RGB(v1,v2,vH)
   if vH &lt; 0 then vH = vH + 1 end
   if vH &gt; 1 then vH = vH - 1 end
   if 6*vH &lt; 1 then return v1+(v2-v1)*6*vH end
   if 2*vH &lt; 1 then return v2 end
   if 3*vH &lt; 2 then return v1+(v2-v1)*((2/3)-vH)*6 end
   return v1
end

local function HSLtoRGB(H,S,L)
&#9;local R,G,B
&#9;if S == 0 then
&#9;&#9;return L,L,L
&#9;else
&#9;&#9;local v2 = L &lt; 0.5 and L*(1+S) or (L+S)-(S*L)
&#9;&#9;local v1 = 2*L-v2
&#9;&#9;return
&#9;&#9;&#9;Hue_to_RGB(v1,v2,H+(1/3)),
&#9;&#9;&#9;Hue_to_RGB(v1,v2,H),
&#9;&#9;&#9;Hue_to_RGB(v1,v2,H-(1/3))
&#9;end
end

function HSDrag(X,Y)
&#9;local mod = (Vector2.new(X,Y)-oHueSatSelect.AbsolutePosition)/oHueSatSelect.AbsoluteSize
&#9;vHue.Value = round(mod.x*255)
&#9;vSat.Value = round((1-mod.y)*255)
end

function HSUp()
&#9;disconnect{&quot;hsdrag&quot;;&quot;hsup&quot;;&quot;hscdrag&quot;;&quot;hscup&quot;}
&#9;CDrag.Visible = false
end

function LDrag(X,Y)
&#9;local mod = (Y-oLumSelect.AbsolutePosition.y)/oLumSelect.AbsoluteSize.y
&#9;vLum.Value = round((1-mod)*255)
end

function LUp()
&#9;disconnect{&quot;ldrag&quot;;&quot;lup&quot;;&quot;lcdrag&quot;;&quot;lcup&quot;}
&#9;CDrag.Visible = false
end

function Update()
&#9;oSatMarker.Position = UDim2.new(0,0,1-S,0)
&#9;oHueMarker.Position = UDim2.new(H,0,0,0)
&#9;oHueSatColor.BackgroundColor3 = Color3.new(HSLtoRGB(H,S,0.5))
&#9;oLumMarker.Position = UDim2.new(0,0,1-L,0)
&#9;oLumMarker.BackgroundColor3 = InvC3(V)
&#9;oFinalColor.BackgroundColor3 = V
&#9;CurrValue.Value = V
end

function ValueChanged(new,int)
&#9;if internal[vValue] then return end
&#9;V = new
&#9;if int then
&#9;&#9;InternalSync(vValue,new)
&#9;else
&#9;&#9;local h,s,l = RGBtoHSL(new.r,new.g,new.b)
&#9;&#9;HueChanged(h*255,true)
&#9;&#9;SatChanged(s*255,true)
&#9;&#9;LumChanged(l*255,true)
&#9;&#9;RedChanged(new.r*255,true)
&#9;&#9;GrnChanged(new.g*255,true)
&#9;&#9;BluChanged(new.b*255,true)
&#9;&#9;Update()
&#9;end
end

function CompareChanged(new)
&#9;oLastColor.BackgroundColor3 = new
end

function HueChanged(new,int)
&#9;if internal[vHue] then return end
&#9;new = new &gt; 255 and 255 or new &lt; 0 and 0 or new
&#9;H = new/255
&#9;if int then
&#9;&#9;InternalSync(vHue,round(new))
&#9;else
&#9;&#9;local r,g,b = HSLtoRGB(H,S,L)
&#9;&#9;RedChanged(r*255,true)
&#9;&#9;GrnChanged(g*255,true)
&#9;&#9;BluChanged(b*255,true)
&#9;&#9;ValueChanged(Color3.new(r,g,b),true)
&#9;&#9;Update()
&#9;end
end

function SatChanged(new,int)
&#9;if internal[vSat] then return end
&#9;new = new &gt; 255 and 255 or new &lt; 0 and 0 or new
&#9;S = new/255
&#9;if int then
&#9;&#9;InternalSync(vSat,round(new))
&#9;else
&#9;&#9;local r,g,b = HSLtoRGB(H,S,L)
&#9;&#9;RedChanged(r*255,true)
&#9;&#9;GrnChanged(g*255,true)
&#9;&#9;BluChanged(b*255,true)
&#9;&#9;ValueChanged(Color3.new(r,g,b),true)
&#9;&#9;Update()
&#9;end
end

function LumChanged(new,int)
&#9;if internal[vLum] then return end
&#9;new = new &gt; 255 and 255 or new &lt; 0 and 0 or new
&#9;L = new/255
&#9;if int then
&#9;&#9;InternalSync(vLum,round(new))
&#9;else
&#9;&#9;local r,g,b = HSLtoRGB(H,S,L)
&#9;&#9;RedChanged(r*255,true)
&#9;&#9;GrnChanged(g*255,true)
&#9;&#9;BluChanged(b*255,true)
&#9;&#9;ValueChanged(Color3.new(r,g,b),true)
&#9;&#9;Update()
&#9;end
end

function RedChanged(new,int)
&#9;if internal[vRed] then return end
&#9;new = new &gt; 255 and 255 or new &lt; 0 and 0 or new
&#9;R = new/255
&#9;if int then
&#9;&#9;InternalSync(vRed,round(new))
&#9;else
&#9;&#9;local h,s,l = RGBtoHSL(R,G,B)
&#9;&#9;HueChanged(h*255,true)
&#9;&#9;SatChanged(s*255,true)
&#9;&#9;LumChanged(l*255,true)
&#9;&#9;ValueChanged(Color3.new(R,G,B),true)
&#9;&#9;Update()
&#9;end
end

function GrnChanged(new,int)
&#9;if internal[vGrn] then return end
&#9;new = new &gt; 255 and 255 or new &lt; 0 and 0 or new
&#9;G = new/255
&#9;if int then
&#9;&#9;InternalSync(vGrn,round(new))
&#9;else
&#9;&#9;local h,s,l = RGBtoHSL(R,G,B)
&#9;&#9;HueChanged(h*255,true)
&#9;&#9;SatChanged(s*255,true)
&#9;&#9;LumChanged(l*255,true)
&#9;&#9;ValueChanged(Color3.new(R,G,B),true)
&#9;&#9;Update()
&#9;end
end

function BluChanged(new,int)
&#9;if internal[vBlu] then return end
&#9;new = new &gt; 255 and 255 or new &lt; 0 and 0 or new
&#9;B = new/255
&#9;if int then
&#9;&#9;InternalSync(vBlu,round(new))
&#9;else
&#9;&#9;local h,s,l = RGBtoHSL(R,G,B)
&#9;&#9;HueChanged(h*255,true)
&#9;&#9;SatChanged(s*255,true)
&#9;&#9;LumChanged(l*255,true)
&#9;&#9;ValueChanged(Color3.new(R,G,B),true)
&#9;&#9;Update()
&#9;end
end

CDrag = GetCDrag(Dialog)

vValue.Changed:connect(ValueChanged)
vCompare.Changed:connect(CompareChanged)
vHue.Changed:connect(HueChanged)
vSat.Changed:connect(SatChanged)
vLum.Changed:connect(LumChanged)
vRed.Changed:connect(RedChanged)
vGrn.Changed:connect(GrnChanged)
vBlu.Changed:connect(BluChanged)

oHueSatSelect.MouseButton1Down:connect(function(X,Y)
&#9;event.hscdrag = CDrag.MouseMoved:connect(HSDrag)
&#9;event.hscup = CDrag.MouseButton1Up:connect(HSUp)
&#9;CDrag.Visible = true
&#9;HSDrag(X,Y)
end)

oLumSelect.MouseButton1Down:connect(function(X,Y)
&#9;event.lcdrag = CDrag.MouseMoved:connect(LDrag)
&#9;event.lcup = CDrag.MouseButton1Up:connect(LUp)
&#9;CDrag.Visible = true
&#9;LDrag(X,Y)
end)

CompareChanged(vCompare.Value)
ValueChanged(V)</ProtectedString>
							</Properties>
						</Item>
						<Item class="Frame" referent="RBX483">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4286611584</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">HueNum</string>
								<UDim2 name="Position">
									<XS>0.325396836</XS>
									<XO>0</XO>
									<YS>0.773234189</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>0.198412701</XS>
									<XO>0</XO>
									<YS>0.0594795533</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">7</int>
							</Properties>
							<Item class="Configuration" referent="RBX484">
								<Properties>
									<string name="Name">Config</string>
								</Properties>
								<Item class="NumberValue" referent="RBX485">
									<Properties>
										<string name="Name">Minimum</string>
										<double name="Value">0</double>
									</Properties>
								</Item>
								<Item class="NumberValue" referent="RBX486">
									<Properties>
										<string name="Name">Value</string>
										<double name="Value">75</double>
									</Properties>
								</Item>
								<Item class="NumberValue" referent="RBX487">
									<Properties>
										<string name="Name">Increment</string>
										<double name="Value">1</double>
									</Properties>
								</Item>
								<Item class="NumberValue" referent="RBX488">
									<Properties>
										<string name="Name">Maximum</string>
										<double name="Value">255</double>
									</Properties>
								</Item>
							</Item>
							<Item class="Configuration" referent="RBX489">
								<Properties>
									<string name="Name">Design</string>
								</Properties>
								<Item class="Configuration" referent="RBX490">
									<Properties>
										<string name="Name">Color</string>
									</Properties>
									<Item class="Color3Value" referent="RBX491">
										<Properties>
											<string name="Name">Window</string>
											<Color3 name="Value">4294967295</Color3>
										</Properties>
									</Item>
									<Item class="Color3Value" referent="RBX492">
										<Properties>
											<string name="Name">Hidden</string>
											<Color3 name="Value">4278190080</Color3>
										</Properties>
									</Item>
									<Item class="Color3Value" referent="RBX493">
										<Properties>
											<string name="Name">Background</string>
											<Color3 name="Value">4294967295</Color3>
										</Properties>
									</Item>
									<Item class="Color3Value" referent="RBX494">
										<Properties>
											<string name="Name">Border</string>
											<Color3 name="Value">4294967295</Color3>
										</Properties>
									</Item>
									<Item class="Color3Value" referent="RBX495">
										<Properties>
											<string name="Name">WindowText</string>
											<Color3 name="Value">4278190080</Color3>
										</Properties>
									</Item>
								</Item>
								<Item class="StringValue" referent="RBX496">
									<Properties>
										<string name="Name">UpIcon</string>
										<string name="Value">http://www.roblox.com/asset/?id=36307823</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX497">
									<Properties>
										<string name="Name">DownIcon</string>
										<string name="Value">http://www.roblox.com/asset/?id=36307827</string>
									</Properties>
								</Item>
							</Item>
							<Item class="Script" referent="RBX498">
								<Properties>
									<bool name="Disabled">true</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Documentation</string>
									<ProtectedString name="Source">--[==[

&#9;::NumericUpDown::

&#9;&#9;A NumericUpDown can be used to increment or decrement a number by a defined amount.

&#9;::Size/Position::

&#9;&#9;This script&apos;s parent acts as a placeholder while the game isn&apos;t running, and is used to determine the size and position of this control when it runs.

&#9;::Config::
&#9;&#9;There are various values which can be used to configure and modify the behavior of this control.

&#9;&#9;Increment
&#9;&#9;&#9;The amount to increment/decrement by.

&#9;&#9;Maximum
&#9;&#9;&#9;The maximum value.

&#9;&#9;Minimum
&#9;&#9;&#9;The minimum value.

&#9;&#9;Value
&#9;&#9;&#9;The current value.

&#9;::Design::

&#9;&#9;This control follows a design scheme, which can be used to easily change its color and other displays.
&#9;&#9;Unlike Config, modifying these values after this control is running may not have any effect on it.

&#9;&#9;DownIcon
&#9;&#9;&#9;The url of the down icon.

&#9;&#9;UpIcon
&#9;&#9;&#9;The url of the up icon.

&#9;&#9;::Color::
&#9;&#9;&#9;Background
&#9;&#9;&#9;Border
&#9;&#9;&#9;Hidden
&#9;&#9;&#9;Window
&#9;&#9;&#9;WindowText
]==]</ProtectedString>
								</Properties>
							</Item>
							<Item class="StringValue" referent="RBX499">
								<Properties>
									<string name="Name">Version</string>
									<string name="Value">2.0.3</string>
								</Properties>
							</Item>
							<Item class="LocalScript" referent="RBX500">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Program</string>
									<ProtectedString name="Source">local Control = script.Parent
local Config = Control.Config
local Design = Control.Design
local Color = Design.Color
local CDrag

local vIncrement = Config.Increment
local vMaximum = Config.Maximum
local vMinimum = Config.Minimum
local vValue = Config.Value

local value = vValue.Value
local max = vMaximum.Value
local min = vMinimum.Value
local range = max - min
local inc = vIncrement.Value
local spinning = tick()
local internal = {
&#9;[vIncrement]=false;
&#9;[vMinimum]=false;
&#9;[vMaximum]=false;
&#9;[vValue]=false;
}

event = {}
function disconnect(set)
&#9;for _,index in pairs(set) do
&#9;&#9;if event[index] then
&#9;&#9;&#9;event[index]:disconnect()
&#9;&#9;&#9;event[index] = nil
&#9;&#9;end
&#9;end
end

Control.BorderColor3 = Color.Border.Value
Control.BackgroundColor3 = Color.Window.Value
Control.ZIndex = 7
&#9;local oScroll = Instance.new(&quot;Frame&quot;)
&#9;oScroll.Size = UDim2.new(0, 16, 1, 0)
&#9;oScroll.BorderColor3 = Color.Border.Value
&#9;oScroll.Position = UDim2.new(1, -16, 0, 0)
&#9;oScroll.Name = &quot;Scroll&quot;
&#9;oScroll.BackgroundColor3 = Color.Background.Value
&#9;oScroll.archivable = false
&#9;oScroll.ZIndex = 7
&#9;oScroll.Parent = Control
&#9;&#9;local oUp = Instance.new(&quot;ImageButton&quot;)
&#9;&#9;oUp.Image = Design.UpIcon.Value
&#9;&#9;oUp.Size = UDim2.new(1, 0, 0.5, 0)
&#9;&#9;oUp.BorderColor3 = Color.Border.Value
&#9;&#9;oUp.AutoButtonColor = false
&#9;&#9;oUp.Name = &quot;Up&quot;
&#9;&#9;oUp.BackgroundColor3 = Color.Background.Value
&#9;&#9;oUp.archivable = false
&#9;&#9;oUp.ZIndex = 7
&#9;&#9;oUp.Parent = oScroll
&#9;&#9;local oDown = Instance.new(&quot;ImageButton&quot;)
&#9;&#9;oDown.Image = Design.DownIcon.Value
&#9;&#9;oDown.Size = UDim2.new(1, 0, 0.5, 0)
&#9;&#9;oDown.BorderColor3 = Color.Border.Value
&#9;&#9;oDown.AutoButtonColor = false
&#9;&#9;oDown.Position = UDim2.new(0, 0, 0.5, 0)
&#9;&#9;oDown.Name = &quot;Down&quot;
&#9;&#9;oDown.BackgroundColor3 = Color.Background.Value
&#9;&#9;oDown.archivable = false
&#9;&#9;oDown.ZIndex = 7
&#9;&#9;oDown.Parent = oScroll
&#9;local oText = Instance.new(&quot;TextLabel&quot;)
&#9;oText.FontSize = Enum.FontSize.Size9
&#9;oText.BorderSizePixel = 0
&#9;oText.Size = UDim2.new(1, -19, 1, 0)
&#9;oText.TextColor3 = Color.WindowText.Value
&#9;oText.BorderColor3 = Color.Border.Value
&#9;oText.Text = &quot;0&quot;
&#9;oText.TextXAlignment = Enum.TextXAlignment.Left
&#9;oText.BackgroundTransparency = 1
&#9;oText.Position = UDim2.new(0, 3, 0, 0)
&#9;oText.TextWrap = true
&#9;oText.Name = &quot;Text&quot;
&#9;oText.BackgroundColor3 = Color.Hidden.Value
&#9;oText.archivable = false
&#9;oText.ZIndex = 7
&#9;oText.Parent = Control

function GetCDrag(object)
&#9;local screen = object
&#9;repeat
&#9;&#9;screen = screen.Parent
&#9;&#9;if screen == nil then return false, object.Name .. &quot; is not descendent of ScreenGui&quot; end
&#9;until screen:IsA&quot;ScreenGui&quot;
&#9;local cdrag = screen:FindFirstChild(&quot;CDrag&quot;)
&#9;if not cdrag then
&#9;&#9;cdrag = Instance.new(&quot;ImageButton&quot;)
&#9;&#9;cdrag.Active = false
&#9;&#9;cdrag.Visible = false
&#9;&#9;cdrag.ZIndex = 8
&#9;&#9;cdrag.BorderSizePixel = 0
&#9;&#9;cdrag.Size = UDim2.new(1.5, 0, 1.5, 0)
&#9;&#9;cdrag.BorderColor3 = Color3.new(0, 0, 0)
&#9;&#9;cdrag.AutoButtonColor = false
&#9;&#9;cdrag.BackgroundTransparency = 1
&#9;&#9;cdrag.Position = UDim2.new(-0.25, 0, -0.25, 0)
&#9;&#9;cdrag.Name = &quot;CDrag&quot;
&#9;&#9;cdrag.BackgroundColor3 = Color3.new(0, 0, 0)
&#9;&#9;cdrag.Parent = screen
&#9;end
&#9;return cdrag
end

function InternalSync(type,value)
&#9;internal[type] = true
&#9;type.Value = value
&#9;internal[type] = false
end

function Spin(mod)
&#9;local current = tick()
&#9;spinning = current
&#9;event.unclick = CDrag.MouseButton1Up:connect(function()
&#9;&#9;disconnect{&quot;unclick&quot;}
&#9;&#9;spinning = tick()
&#9;&#9;CDrag.Visible = false
&#9;end)
&#9;CDrag.Visible = true
&#9;local t = 0.3
&#9;while current == spinning do
&#9;&#9;vValue.Value = value + inc * mod
&#9;&#9;wait(t)
&#9;&#9;t = 0.05
&#9;end
end

function IncrementChanged(new)
&#9;if internal[vIncrement] then return end
&#9;if new &gt; range then InternalSync(vIncrement,inc) end
&#9;inc = vIncrement.Value
end

function MaximumChanged(new)
&#9;if internal[vMaximum] then return end
&#9;if new &lt; min then InternalSync(vMaximum,max) end
&#9;max = vMaximum.Value
&#9;range = max - min
&#9;vValue.Value = value &gt; max and max or value
end

function MinimumChanged(new)
&#9;if internal[vMinimum] then return end
&#9;if new &gt; max then InternalSync(vMinimum,min) end
&#9;min = vMinimum.Value
&#9;range = max - min
&#9;vValue.Value = value &lt; min and min or value
end

function ValueChanged(new)
&#9;if internal[vValue] then return end
&#9;if new &gt; max then
&#9;&#9;value = max
&#9;&#9;InternalSync(vValue,value)
&#9;end
&#9;if new &lt; min then
&#9;&#9;value = min
&#9;&#9;InternalSync(vValue,value)
&#9;end
&#9;value = vValue.Value
&#9;oText.Text = value
end

CDrag = GetCDrag(Control)

oText.Text = value

vIncrement.Changed:connect(IncrementChanged)
vMaximum.Changed:connect(MaximumChanged)
vMinimum.Changed:connect(MinimumChanged)
vValue.Changed:connect(ValueChanged)

oUp.MouseButton1Down:connect(function() Spin(1) end)
oDown.MouseButton1Down:connect(function() Spin(-1) end)</ProtectedString>
								</Properties>
							</Item>
						</Item>
						<Item class="Frame" referent="RBX501">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4286611584</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">SatNum</string>
								<UDim2 name="Position">
									<XS>0.325396836</XS>
									<XO>0</XO>
									<YS>0.847583652</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>0.198412701</XS>
									<XO>0</XO>
									<YS>0.0594795533</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">7</int>
							</Properties>
							<Item class="Configuration" referent="RBX502">
								<Properties>
									<string name="Name">Config</string>
								</Properties>
								<Item class="NumberValue" referent="RBX503">
									<Properties>
										<string name="Name">Minimum</string>
										<double name="Value">0</double>
									</Properties>
								</Item>
								<Item class="NumberValue" referent="RBX504">
									<Properties>
										<string name="Name">Value</string>
										<double name="Value">27</double>
									</Properties>
								</Item>
								<Item class="NumberValue" referent="RBX505">
									<Properties>
										<string name="Name">Increment</string>
										<double name="Value">1</double>
									</Properties>
								</Item>
								<Item class="NumberValue" referent="RBX506">
									<Properties>
										<string name="Name">Maximum</string>
										<double name="Value">255</double>
									</Properties>
								</Item>
							</Item>
							<Item class="Configuration" referent="RBX507">
								<Properties>
									<string name="Name">Design</string>
								</Properties>
								<Item class="Configuration" referent="RBX508">
									<Properties>
										<string name="Name">Color</string>
									</Properties>
									<Item class="Color3Value" referent="RBX509">
										<Properties>
											<string name="Name">Window</string>
											<Color3 name="Value">4294967295</Color3>
										</Properties>
									</Item>
									<Item class="Color3Value" referent="RBX510">
										<Properties>
											<string name="Name">Hidden</string>
											<Color3 name="Value">4278190080</Color3>
										</Properties>
									</Item>
									<Item class="Color3Value" referent="RBX511">
										<Properties>
											<string name="Name">Background</string>
											<Color3 name="Value">4294967295</Color3>
										</Properties>
									</Item>
									<Item class="Color3Value" referent="RBX512">
										<Properties>
											<string name="Name">Border</string>
											<Color3 name="Value">4294967295</Color3>
										</Properties>
									</Item>
									<Item class="Color3Value" referent="RBX513">
										<Properties>
											<string name="Name">WindowText</string>
											<Color3 name="Value">4278190080</Color3>
										</Properties>
									</Item>
								</Item>
								<Item class="StringValue" referent="RBX514">
									<Properties>
										<string name="Name">UpIcon</string>
										<string name="Value">http://www.roblox.com/asset/?id=36307823</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX515">
									<Properties>
										<string name="Name">DownIcon</string>
										<string name="Value">http://www.roblox.com/asset/?id=36307827</string>
									</Properties>
								</Item>
							</Item>
							<Item class="Script" referent="RBX516">
								<Properties>
									<bool name="Disabled">true</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Documentation</string>
									<ProtectedString name="Source">--[==[

&#9;::NumericUpDown::

&#9;&#9;A NumericUpDown can be used to increment or decrement a number by a defined amount.

&#9;::Size/Position::

&#9;&#9;This script&apos;s parent acts as a placeholder while the game isn&apos;t running, and is used to determine the size and position of this control when it runs.

&#9;::Config::
&#9;&#9;There are various values which can be used to configure and modify the behavior of this control.

&#9;&#9;Increment
&#9;&#9;&#9;The amount to increment/decrement by.

&#9;&#9;Maximum
&#9;&#9;&#9;The maximum value.

&#9;&#9;Minimum
&#9;&#9;&#9;The minimum value.

&#9;&#9;Value
&#9;&#9;&#9;The current value.

&#9;::Design::

&#9;&#9;This control follows a design scheme, which can be used to easily change its color and other displays.
&#9;&#9;Unlike Config, modifying these values after this control is running may not have any effect on it.

&#9;&#9;DownIcon
&#9;&#9;&#9;The url of the down icon.

&#9;&#9;UpIcon
&#9;&#9;&#9;The url of the up icon.

&#9;&#9;::Color::
&#9;&#9;&#9;Background
&#9;&#9;&#9;Border
&#9;&#9;&#9;Hidden
&#9;&#9;&#9;Window
&#9;&#9;&#9;WindowText
]==]</ProtectedString>
								</Properties>
							</Item>
							<Item class="StringValue" referent="RBX517">
								<Properties>
									<string name="Name">Version</string>
									<string name="Value">2.0.3</string>
								</Properties>
							</Item>
							<Item class="LocalScript" referent="RBX518">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Program</string>
									<ProtectedString name="Source">local Control = script.Parent
local Config = Control.Config
local Design = Control.Design
local Color = Design.Color
local CDrag

local vIncrement = Config.Increment
local vMaximum = Config.Maximum
local vMinimum = Config.Minimum
local vValue = Config.Value

local value = vValue.Value
local max = vMaximum.Value
local min = vMinimum.Value
local range = max - min
local inc = vIncrement.Value
local spinning = tick()
local internal = {
&#9;[vIncrement]=false;
&#9;[vMinimum]=false;
&#9;[vMaximum]=false;
&#9;[vValue]=false;
}

event = {}
function disconnect(set)
&#9;for _,index in pairs(set) do
&#9;&#9;if event[index] then
&#9;&#9;&#9;event[index]:disconnect()
&#9;&#9;&#9;event[index] = nil
&#9;&#9;end
&#9;end
end

Control.BorderColor3 = Color.Border.Value
Control.BackgroundColor3 = Color.Window.Value
Control.ZIndex = 7
&#9;local oScroll = Instance.new(&quot;Frame&quot;)
&#9;oScroll.Size = UDim2.new(0, 16, 1, 0)
&#9;oScroll.BorderColor3 = Color.Border.Value
&#9;oScroll.Position = UDim2.new(1, -16, 0, 0)
&#9;oScroll.Name = &quot;Scroll&quot;
&#9;oScroll.BackgroundColor3 = Color.Background.Value
&#9;oScroll.archivable = false
&#9;oScroll.ZIndex = 7
&#9;oScroll.Parent = Control
&#9;&#9;local oUp = Instance.new(&quot;ImageButton&quot;)
&#9;&#9;oUp.Image = Design.UpIcon.Value
&#9;&#9;oUp.Size = UDim2.new(1, 0, 0.5, 0)
&#9;&#9;oUp.BorderColor3 = Color.Border.Value
&#9;&#9;oUp.AutoButtonColor = false
&#9;&#9;oUp.Name = &quot;Up&quot;
&#9;&#9;oUp.BackgroundColor3 = Color.Background.Value
&#9;&#9;oUp.archivable = false
&#9;&#9;oUp.ZIndex = 7
&#9;&#9;oUp.Parent = oScroll
&#9;&#9;local oDown = Instance.new(&quot;ImageButton&quot;)
&#9;&#9;oDown.Image = Design.DownIcon.Value
&#9;&#9;oDown.Size = UDim2.new(1, 0, 0.5, 0)
&#9;&#9;oDown.BorderColor3 = Color.Border.Value
&#9;&#9;oDown.AutoButtonColor = false
&#9;&#9;oDown.Position = UDim2.new(0, 0, 0.5, 0)
&#9;&#9;oDown.Name = &quot;Down&quot;
&#9;&#9;oDown.BackgroundColor3 = Color.Background.Value
&#9;&#9;oDown.archivable = false
&#9;&#9;oDown.ZIndex = 7
&#9;&#9;oDown.Parent = oScroll
&#9;local oText = Instance.new(&quot;TextLabel&quot;)
&#9;oText.FontSize = Enum.FontSize.Size9
&#9;oText.BorderSizePixel = 0
&#9;oText.Size = UDim2.new(1, -19, 1, 0)
&#9;oText.TextColor3 = Color.WindowText.Value
&#9;oText.BorderColor3 = Color.Border.Value
&#9;oText.Text = &quot;0&quot;
&#9;oText.TextXAlignment = Enum.TextXAlignment.Left
&#9;oText.BackgroundTransparency = 1
&#9;oText.Position = UDim2.new(0, 3, 0, 0)
&#9;oText.TextWrap = true
&#9;oText.Name = &quot;Text&quot;
&#9;oText.BackgroundColor3 = Color.Hidden.Value
&#9;oText.archivable = false
&#9;oText.ZIndex = 7
&#9;oText.Parent = Control

function GetCDrag(object)
&#9;local screen = object
&#9;repeat
&#9;&#9;screen = screen.Parent
&#9;&#9;if screen == nil then return false, object.Name .. &quot; is not descendent of ScreenGui&quot; end
&#9;until screen:IsA&quot;ScreenGui&quot;
&#9;local cdrag = screen:FindFirstChild(&quot;CDrag&quot;)
&#9;if not cdrag then
&#9;&#9;cdrag = Instance.new(&quot;ImageButton&quot;)
&#9;&#9;cdrag.Active = false
&#9;&#9;cdrag.Visible = false
&#9;&#9;cdrag.ZIndex = 8
&#9;&#9;cdrag.BorderSizePixel = 0
&#9;&#9;cdrag.Size = UDim2.new(1.5, 0, 1.5, 0)
&#9;&#9;cdrag.BorderColor3 = Color3.new(0, 0, 0)
&#9;&#9;cdrag.AutoButtonColor = false
&#9;&#9;cdrag.BackgroundTransparency = 1
&#9;&#9;cdrag.Position = UDim2.new(-0.25, 0, -0.25, 0)
&#9;&#9;cdrag.Name = &quot;CDrag&quot;
&#9;&#9;cdrag.BackgroundColor3 = Color3.new(0, 0, 0)
&#9;&#9;cdrag.Parent = screen
&#9;end
&#9;return cdrag
end

function InternalSync(type,value)
&#9;internal[type] = true
&#9;type.Value = value
&#9;internal[type] = false
end

function Spin(mod)
&#9;local current = tick()
&#9;spinning = current
&#9;event.unclick = CDrag.MouseButton1Up:connect(function()
&#9;&#9;disconnect{&quot;unclick&quot;}
&#9;&#9;spinning = tick()
&#9;&#9;CDrag.Visible = false
&#9;end)
&#9;CDrag.Visible = true
&#9;local t = 0.3
&#9;while current == spinning do
&#9;&#9;vValue.Value = value + inc * mod
&#9;&#9;wait(t)
&#9;&#9;t = 0.05
&#9;end
end

function IncrementChanged(new)
&#9;if internal[vIncrement] then return end
&#9;if new &gt; range then InternalSync(vIncrement,inc) end
&#9;inc = vIncrement.Value
end

function MaximumChanged(new)
&#9;if internal[vMaximum] then return end
&#9;if new &lt; min then InternalSync(vMaximum,max) end
&#9;max = vMaximum.Value
&#9;range = max - min
&#9;vValue.Value = value &gt; max and max or value
end

function MinimumChanged(new)
&#9;if internal[vMinimum] then return end
&#9;if new &gt; max then InternalSync(vMinimum,min) end
&#9;min = vMinimum.Value
&#9;range = max - min
&#9;vValue.Value = value &lt; min and min or value
end

function ValueChanged(new)
&#9;if internal[vValue] then return end
&#9;if new &gt; max then
&#9;&#9;value = max
&#9;&#9;InternalSync(vValue,value)
&#9;end
&#9;if new &lt; min then
&#9;&#9;value = min
&#9;&#9;InternalSync(vValue,value)
&#9;end
&#9;value = vValue.Value
&#9;oText.Text = value
end

CDrag = GetCDrag(Control)

oText.Text = value

vIncrement.Changed:connect(IncrementChanged)
vMaximum.Changed:connect(MaximumChanged)
vMinimum.Changed:connect(MinimumChanged)
vValue.Changed:connect(ValueChanged)

oUp.MouseButton1Down:connect(function() Spin(1) end)
oDown.MouseButton1Down:connect(function() Spin(-1) end)</ProtectedString>
								</Properties>
							</Item>
						</Item>
						<Item class="Frame" referent="RBX519">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4286611584</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">LumNum</string>
								<UDim2 name="Position">
									<XS>0.325396836</XS>
									<XO>0</XO>
									<YS>0.921933115</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>0.198412701</XS>
									<XO>0</XO>
									<YS>0.0594795533</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">7</int>
							</Properties>
							<Item class="Configuration" referent="RBX520">
								<Properties>
									<string name="Name">Config</string>
								</Properties>
								<Item class="NumberValue" referent="RBX521">
									<Properties>
										<string name="Name">Minimum</string>
										<double name="Value">0</double>
									</Properties>
								</Item>
								<Item class="NumberValue" referent="RBX522">
									<Properties>
										<string name="Name">Value</string>
										<double name="Value">113</double>
									</Properties>
								</Item>
								<Item class="NumberValue" referent="RBX523">
									<Properties>
										<string name="Name">Increment</string>
										<double name="Value">1</double>
									</Properties>
								</Item>
								<Item class="NumberValue" referent="RBX524">
									<Properties>
										<string name="Name">Maximum</string>
										<double name="Value">255</double>
									</Properties>
								</Item>
							</Item>
							<Item class="Configuration" referent="RBX525">
								<Properties>
									<string name="Name">Design</string>
								</Properties>
								<Item class="Configuration" referent="RBX526">
									<Properties>
										<string name="Name">Color</string>
									</Properties>
									<Item class="Color3Value" referent="RBX527">
										<Properties>
											<string name="Name">Window</string>
											<Color3 name="Value">4294967295</Color3>
										</Properties>
									</Item>
									<Item class="Color3Value" referent="RBX528">
										<Properties>
											<string name="Name">Hidden</string>
											<Color3 name="Value">4278190080</Color3>
										</Properties>
									</Item>
									<Item class="Color3Value" referent="RBX529">
										<Properties>
											<string name="Name">Background</string>
											<Color3 name="Value">4294967295</Color3>
										</Properties>
									</Item>
									<Item class="Color3Value" referent="RBX530">
										<Properties>
											<string name="Name">Border</string>
											<Color3 name="Value">4294967295</Color3>
										</Properties>
									</Item>
									<Item class="Color3Value" referent="RBX531">
										<Properties>
											<string name="Name">WindowText</string>
											<Color3 name="Value">4278190080</Color3>
										</Properties>
									</Item>
								</Item>
								<Item class="StringValue" referent="RBX532">
									<Properties>
										<string name="Name">UpIcon</string>
										<string name="Value">http://www.roblox.com/asset/?id=36307823</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX533">
									<Properties>
										<string name="Name">DownIcon</string>
										<string name="Value">http://www.roblox.com/asset/?id=36307827</string>
									</Properties>
								</Item>
							</Item>
							<Item class="Script" referent="RBX534">
								<Properties>
									<bool name="Disabled">true</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Documentation</string>
									<ProtectedString name="Source">--[==[

&#9;::NumericUpDown::

&#9;&#9;A NumericUpDown can be used to increment or decrement a number by a defined amount.

&#9;::Size/Position::

&#9;&#9;This script&apos;s parent acts as a placeholder while the game isn&apos;t running, and is used to determine the size and position of this control when it runs.

&#9;::Config::
&#9;&#9;There are various values which can be used to configure and modify the behavior of this control.

&#9;&#9;Increment
&#9;&#9;&#9;The amount to increment/decrement by.

&#9;&#9;Maximum
&#9;&#9;&#9;The maximum value.

&#9;&#9;Minimum
&#9;&#9;&#9;The minimum value.

&#9;&#9;Value
&#9;&#9;&#9;The current value.

&#9;::Design::

&#9;&#9;This control follows a design scheme, which can be used to easily change its color and other displays.
&#9;&#9;Unlike Config, modifying these values after this control is running may not have any effect on it.

&#9;&#9;DownIcon
&#9;&#9;&#9;The url of the down icon.

&#9;&#9;UpIcon
&#9;&#9;&#9;The url of the up icon.

&#9;&#9;::Color::
&#9;&#9;&#9;Background
&#9;&#9;&#9;Border
&#9;&#9;&#9;Hidden
&#9;&#9;&#9;Window
&#9;&#9;&#9;WindowText
]==]</ProtectedString>
								</Properties>
							</Item>
							<Item class="StringValue" referent="RBX535">
								<Properties>
									<string name="Name">Version</string>
									<string name="Value">2.0.3</string>
								</Properties>
							</Item>
							<Item class="LocalScript" referent="RBX536">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Program</string>
									<ProtectedString name="Source">local Control = script.Parent
local Config = Control.Config
local Design = Control.Design
local Color = Design.Color
local CDrag

local vIncrement = Config.Increment
local vMaximum = Config.Maximum
local vMinimum = Config.Minimum
local vValue = Config.Value

local value = vValue.Value
local max = vMaximum.Value
local min = vMinimum.Value
local range = max - min
local inc = vIncrement.Value
local spinning = tick()
local internal = {
&#9;[vIncrement]=false;
&#9;[vMinimum]=false;
&#9;[vMaximum]=false;
&#9;[vValue]=false;
}

event = {}
function disconnect(set)
&#9;for _,index in pairs(set) do
&#9;&#9;if event[index] then
&#9;&#9;&#9;event[index]:disconnect()
&#9;&#9;&#9;event[index] = nil
&#9;&#9;end
&#9;end
end

Control.BorderColor3 = Color.Border.Value
Control.BackgroundColor3 = Color.Window.Value
Control.ZIndex = 7
&#9;local oScroll = Instance.new(&quot;Frame&quot;)
&#9;oScroll.Size = UDim2.new(0, 16, 1, 0)
&#9;oScroll.BorderColor3 = Color.Border.Value
&#9;oScroll.Position = UDim2.new(1, -16, 0, 0)
&#9;oScroll.Name = &quot;Scroll&quot;
&#9;oScroll.BackgroundColor3 = Color.Background.Value
&#9;oScroll.archivable = false
&#9;oScroll.ZIndex = 7
&#9;oScroll.Parent = Control
&#9;&#9;local oUp = Instance.new(&quot;ImageButton&quot;)
&#9;&#9;oUp.Image = Design.UpIcon.Value
&#9;&#9;oUp.Size = UDim2.new(1, 0, 0.5, 0)
&#9;&#9;oUp.BorderColor3 = Color.Border.Value
&#9;&#9;oUp.AutoButtonColor = false
&#9;&#9;oUp.Name = &quot;Up&quot;
&#9;&#9;oUp.BackgroundColor3 = Color.Background.Value
&#9;&#9;oUp.archivable = false
&#9;&#9;oUp.ZIndex = 7
&#9;&#9;oUp.Parent = oScroll
&#9;&#9;local oDown = Instance.new(&quot;ImageButton&quot;)
&#9;&#9;oDown.Image = Design.DownIcon.Value
&#9;&#9;oDown.Size = UDim2.new(1, 0, 0.5, 0)
&#9;&#9;oDown.BorderColor3 = Color.Border.Value
&#9;&#9;oDown.AutoButtonColor = false
&#9;&#9;oDown.Position = UDim2.new(0, 0, 0.5, 0)
&#9;&#9;oDown.Name = &quot;Down&quot;
&#9;&#9;oDown.BackgroundColor3 = Color.Background.Value
&#9;&#9;oDown.archivable = false
&#9;&#9;oDown.ZIndex = 7
&#9;&#9;oDown.Parent = oScroll
&#9;local oText = Instance.new(&quot;TextLabel&quot;)
&#9;oText.FontSize = Enum.FontSize.Size9
&#9;oText.BorderSizePixel = 0
&#9;oText.Size = UDim2.new(1, -19, 1, 0)
&#9;oText.TextColor3 = Color.WindowText.Value
&#9;oText.BorderColor3 = Color.Border.Value
&#9;oText.Text = &quot;0&quot;
&#9;oText.TextXAlignment = Enum.TextXAlignment.Left
&#9;oText.BackgroundTransparency = 1
&#9;oText.Position = UDim2.new(0, 3, 0, 0)
&#9;oText.TextWrap = true
&#9;oText.Name = &quot;Text&quot;
&#9;oText.BackgroundColor3 = Color.Hidden.Value
&#9;oText.archivable = false
&#9;oText.ZIndex = 7
&#9;oText.Parent = Control

function GetCDrag(object)
&#9;local screen = object
&#9;repeat
&#9;&#9;screen = screen.Parent
&#9;&#9;if screen == nil then return false, object.Name .. &quot; is not descendent of ScreenGui&quot; end
&#9;until screen:IsA&quot;ScreenGui&quot;
&#9;local cdrag = screen:FindFirstChild(&quot;CDrag&quot;)
&#9;if not cdrag then
&#9;&#9;cdrag = Instance.new(&quot;ImageButton&quot;)
&#9;&#9;cdrag.Active = false
&#9;&#9;cdrag.Visible = false
&#9;&#9;cdrag.ZIndex = 8
&#9;&#9;cdrag.BorderSizePixel = 0
&#9;&#9;cdrag.Size = UDim2.new(1.5, 0, 1.5, 0)
&#9;&#9;cdrag.BorderColor3 = Color3.new(0, 0, 0)
&#9;&#9;cdrag.AutoButtonColor = false
&#9;&#9;cdrag.BackgroundTransparency = 1
&#9;&#9;cdrag.Position = UDim2.new(-0.25, 0, -0.25, 0)
&#9;&#9;cdrag.Name = &quot;CDrag&quot;
&#9;&#9;cdrag.BackgroundColor3 = Color3.new(0, 0, 0)
&#9;&#9;cdrag.Parent = screen
&#9;end
&#9;return cdrag
end

function InternalSync(type,value)
&#9;internal[type] = true
&#9;type.Value = value
&#9;internal[type] = false
end

function Spin(mod)
&#9;local current = tick()
&#9;spinning = current
&#9;event.unclick = CDrag.MouseButton1Up:connect(function()
&#9;&#9;disconnect{&quot;unclick&quot;}
&#9;&#9;spinning = tick()
&#9;&#9;CDrag.Visible = false
&#9;end)
&#9;CDrag.Visible = true
&#9;local t = 0.3
&#9;while current == spinning do
&#9;&#9;vValue.Value = value + inc * mod
&#9;&#9;wait(t)
&#9;&#9;t = 0.05
&#9;end
end

function IncrementChanged(new)
&#9;if internal[vIncrement] then return end
&#9;if new &gt; range then InternalSync(vIncrement,inc) end
&#9;inc = vIncrement.Value
end

function MaximumChanged(new)
&#9;if internal[vMaximum] then return end
&#9;if new &lt; min then InternalSync(vMaximum,max) end
&#9;max = vMaximum.Value
&#9;range = max - min
&#9;vValue.Value = value &gt; max and max or value
end

function MinimumChanged(new)
&#9;if internal[vMinimum] then return end
&#9;if new &gt; max then InternalSync(vMinimum,min) end
&#9;min = vMinimum.Value
&#9;range = max - min
&#9;vValue.Value = value &lt; min and min or value
end

function ValueChanged(new)
&#9;if internal[vValue] then return end
&#9;if new &gt; max then
&#9;&#9;value = max
&#9;&#9;InternalSync(vValue,value)
&#9;end
&#9;if new &lt; min then
&#9;&#9;value = min
&#9;&#9;InternalSync(vValue,value)
&#9;end
&#9;value = vValue.Value
&#9;oText.Text = value
end

CDrag = GetCDrag(Control)

oText.Text = value

vIncrement.Changed:connect(IncrementChanged)
vMaximum.Changed:connect(MaximumChanged)
vMinimum.Changed:connect(MinimumChanged)
vValue.Changed:connect(ValueChanged)

oUp.MouseButton1Down:connect(function() Spin(1) end)
oDown.MouseButton1Down:connect(function() Spin(-1) end)</ProtectedString>
								</Properties>
							</Item>
						</Item>
						<Item class="Frame" referent="RBX537">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4286611584</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">RedNum</string>
								<UDim2 name="Position">
									<XS>0.607142866</XS>
									<XO>0</XO>
									<YS>0.773234189</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>0.198412701</XS>
									<XO>0</XO>
									<YS>0.0594795533</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">7</int>
							</Properties>
							<Item class="Configuration" referent="RBX538">
								<Properties>
									<string name="Name">Config</string>
								</Properties>
								<Item class="NumberValue" referent="RBX539">
									<Properties>
										<string name="Name">Minimum</string>
										<double name="Value">0</double>
									</Properties>
								</Item>
								<Item class="NumberValue" referent="RBX540">
									<Properties>
										<string name="Name">Value</string>
										<double name="Value">107</double>
									</Properties>
								</Item>
								<Item class="NumberValue" referent="RBX541">
									<Properties>
										<string name="Name">Increment</string>
										<double name="Value">1</double>
									</Properties>
								</Item>
								<Item class="NumberValue" referent="RBX542">
									<Properties>
										<string name="Name">Maximum</string>
										<double name="Value">255</double>
									</Properties>
								</Item>
							</Item>
							<Item class="Configuration" referent="RBX543">
								<Properties>
									<string name="Name">Design</string>
								</Properties>
								<Item class="Configuration" referent="RBX544">
									<Properties>
										<string name="Name">Color</string>
									</Properties>
									<Item class="Color3Value" referent="RBX545">
										<Properties>
											<string name="Name">Window</string>
											<Color3 name="Value">4294967295</Color3>
										</Properties>
									</Item>
									<Item class="Color3Value" referent="RBX546">
										<Properties>
											<string name="Name">Hidden</string>
											<Color3 name="Value">4278190080</Color3>
										</Properties>
									</Item>
									<Item class="Color3Value" referent="RBX547">
										<Properties>
											<string name="Name">Background</string>
											<Color3 name="Value">4294967295</Color3>
										</Properties>
									</Item>
									<Item class="Color3Value" referent="RBX548">
										<Properties>
											<string name="Name">Border</string>
											<Color3 name="Value">4294967295</Color3>
										</Properties>
									</Item>
									<Item class="Color3Value" referent="RBX549">
										<Properties>
											<string name="Name">WindowText</string>
											<Color3 name="Value">4278190080</Color3>
										</Properties>
									</Item>
								</Item>
								<Item class="StringValue" referent="RBX550">
									<Properties>
										<string name="Name">UpIcon</string>
										<string name="Value">http://www.roblox.com/asset/?id=36307823</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX551">
									<Properties>
										<string name="Name">DownIcon</string>
										<string name="Value">http://www.roblox.com/asset/?id=36307827</string>
									</Properties>
								</Item>
							</Item>
							<Item class="Script" referent="RBX552">
								<Properties>
									<bool name="Disabled">true</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Documentation</string>
									<ProtectedString name="Source">--[==[

&#9;::NumericUpDown::

&#9;&#9;A NumericUpDown can be used to increment or decrement a number by a defined amount.

&#9;::Size/Position::

&#9;&#9;This script&apos;s parent acts as a placeholder while the game isn&apos;t running, and is used to determine the size and position of this control when it runs.

&#9;::Config::
&#9;&#9;There are various values which can be used to configure and modify the behavior of this control.

&#9;&#9;Increment
&#9;&#9;&#9;The amount to increment/decrement by.

&#9;&#9;Maximum
&#9;&#9;&#9;The maximum value.

&#9;&#9;Minimum
&#9;&#9;&#9;The minimum value.

&#9;&#9;Value
&#9;&#9;&#9;The current value.

&#9;::Design::

&#9;&#9;This control follows a design scheme, which can be used to easily change its color and other displays.
&#9;&#9;Unlike Config, modifying these values after this control is running may not have any effect on it.

&#9;&#9;DownIcon
&#9;&#9;&#9;The url of the down icon.

&#9;&#9;UpIcon
&#9;&#9;&#9;The url of the up icon.

&#9;&#9;::Color::
&#9;&#9;&#9;Background
&#9;&#9;&#9;Border
&#9;&#9;&#9;Hidden
&#9;&#9;&#9;Window
&#9;&#9;&#9;WindowText
]==]</ProtectedString>
								</Properties>
							</Item>
							<Item class="StringValue" referent="RBX553">
								<Properties>
									<string name="Name">Version</string>
									<string name="Value">2.0.3</string>
								</Properties>
							</Item>
							<Item class="LocalScript" referent="RBX554">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Program</string>
									<ProtectedString name="Source">local Control = script.Parent
local Config = Control.Config
local Design = Control.Design
local Color = Design.Color
local CDrag

local vIncrement = Config.Increment
local vMaximum = Config.Maximum
local vMinimum = Config.Minimum
local vValue = Config.Value

local value = vValue.Value
local max = vMaximum.Value
local min = vMinimum.Value
local range = max - min
local inc = vIncrement.Value
local spinning = tick()
local internal = {
&#9;[vIncrement]=false;
&#9;[vMinimum]=false;
&#9;[vMaximum]=false;
&#9;[vValue]=false;
}

event = {}
function disconnect(set)
&#9;for _,index in pairs(set) do
&#9;&#9;if event[index] then
&#9;&#9;&#9;event[index]:disconnect()
&#9;&#9;&#9;event[index] = nil
&#9;&#9;end
&#9;end
end

Control.BorderColor3 = Color.Border.Value
Control.BackgroundColor3 = Color.Window.Value
Control.ZIndex = 7
&#9;local oScroll = Instance.new(&quot;Frame&quot;)
&#9;oScroll.Size = UDim2.new(0, 16, 1, 0)
&#9;oScroll.BorderColor3 = Color.Border.Value
&#9;oScroll.Position = UDim2.new(1, -16, 0, 0)
&#9;oScroll.Name = &quot;Scroll&quot;
&#9;oScroll.BackgroundColor3 = Color.Background.Value
&#9;oScroll.archivable = false
&#9;oScroll.ZIndex = 7
&#9;oScroll.Parent = Control
&#9;&#9;local oUp = Instance.new(&quot;ImageButton&quot;)
&#9;&#9;oUp.Image = Design.UpIcon.Value
&#9;&#9;oUp.Size = UDim2.new(1, 0, 0.5, 0)
&#9;&#9;oUp.BorderColor3 = Color.Border.Value
&#9;&#9;oUp.AutoButtonColor = false
&#9;&#9;oUp.Name = &quot;Up&quot;
&#9;&#9;oUp.BackgroundColor3 = Color.Background.Value
&#9;&#9;oUp.archivable = false
&#9;&#9;oUp.ZIndex = 7
&#9;&#9;oUp.Parent = oScroll
&#9;&#9;local oDown = Instance.new(&quot;ImageButton&quot;)
&#9;&#9;oDown.Image = Design.DownIcon.Value
&#9;&#9;oDown.Size = UDim2.new(1, 0, 0.5, 0)
&#9;&#9;oDown.BorderColor3 = Color.Border.Value
&#9;&#9;oDown.AutoButtonColor = false
&#9;&#9;oDown.Position = UDim2.new(0, 0, 0.5, 0)
&#9;&#9;oDown.Name = &quot;Down&quot;
&#9;&#9;oDown.BackgroundColor3 = Color.Background.Value
&#9;&#9;oDown.archivable = false
&#9;&#9;oDown.ZIndex = 7
&#9;&#9;oDown.Parent = oScroll
&#9;local oText = Instance.new(&quot;TextLabel&quot;)
&#9;oText.FontSize = Enum.FontSize.Size9
&#9;oText.BorderSizePixel = 0
&#9;oText.Size = UDim2.new(1, -19, 1, 0)
&#9;oText.TextColor3 = Color.WindowText.Value
&#9;oText.BorderColor3 = Color.Border.Value
&#9;oText.Text = &quot;0&quot;
&#9;oText.TextXAlignment = Enum.TextXAlignment.Left
&#9;oText.BackgroundTransparency = 1
&#9;oText.Position = UDim2.new(0, 3, 0, 0)
&#9;oText.TextWrap = true
&#9;oText.Name = &quot;Text&quot;
&#9;oText.BackgroundColor3 = Color.Hidden.Value
&#9;oText.archivable = false
&#9;oText.ZIndex = 7
&#9;oText.Parent = Control

function GetCDrag(object)
&#9;local screen = object
&#9;repeat
&#9;&#9;screen = screen.Parent
&#9;&#9;if screen == nil then return false, object.Name .. &quot; is not descendent of ScreenGui&quot; end
&#9;until screen:IsA&quot;ScreenGui&quot;
&#9;local cdrag = screen:FindFirstChild(&quot;CDrag&quot;)
&#9;if not cdrag then
&#9;&#9;cdrag = Instance.new(&quot;ImageButton&quot;)
&#9;&#9;cdrag.Active = false
&#9;&#9;cdrag.Visible = false
&#9;&#9;cdrag.ZIndex = 8
&#9;&#9;cdrag.BorderSizePixel = 0
&#9;&#9;cdrag.Size = UDim2.new(1.5, 0, 1.5, 0)
&#9;&#9;cdrag.BorderColor3 = Color3.new(0, 0, 0)
&#9;&#9;cdrag.AutoButtonColor = false
&#9;&#9;cdrag.BackgroundTransparency = 1
&#9;&#9;cdrag.Position = UDim2.new(-0.25, 0, -0.25, 0)
&#9;&#9;cdrag.Name = &quot;CDrag&quot;
&#9;&#9;cdrag.BackgroundColor3 = Color3.new(0, 0, 0)
&#9;&#9;cdrag.Parent = screen
&#9;end
&#9;return cdrag
end

function InternalSync(type,value)
&#9;internal[type] = true
&#9;type.Value = value
&#9;internal[type] = false
end

function Spin(mod)
&#9;local current = tick()
&#9;spinning = current
&#9;event.unclick = CDrag.MouseButton1Up:connect(function()
&#9;&#9;disconnect{&quot;unclick&quot;}
&#9;&#9;spinning = tick()
&#9;&#9;CDrag.Visible = false
&#9;end)
&#9;CDrag.Visible = true
&#9;local t = 0.3
&#9;while current == spinning do
&#9;&#9;vValue.Value = value + inc * mod
&#9;&#9;wait(t)
&#9;&#9;t = 0.05
&#9;end
end

function IncrementChanged(new)
&#9;if internal[vIncrement] then return end
&#9;if new &gt; range then InternalSync(vIncrement,inc) end
&#9;inc = vIncrement.Value
end

function MaximumChanged(new)
&#9;if internal[vMaximum] then return end
&#9;if new &lt; min then InternalSync(vMaximum,max) end
&#9;max = vMaximum.Value
&#9;range = max - min
&#9;vValue.Value = value &gt; max and max or value
end

function MinimumChanged(new)
&#9;if internal[vMinimum] then return end
&#9;if new &gt; max then InternalSync(vMinimum,min) end
&#9;min = vMinimum.Value
&#9;range = max - min
&#9;vValue.Value = value &lt; min and min or value
end

function ValueChanged(new)
&#9;if internal[vValue] then return end
&#9;if new &gt; max then
&#9;&#9;value = max
&#9;&#9;InternalSync(vValue,value)
&#9;end
&#9;if new &lt; min then
&#9;&#9;value = min
&#9;&#9;InternalSync(vValue,value)
&#9;end
&#9;value = vValue.Value
&#9;oText.Text = value
end

CDrag = GetCDrag(Control)

oText.Text = value

vIncrement.Changed:connect(IncrementChanged)
vMaximum.Changed:connect(MaximumChanged)
vMinimum.Changed:connect(MinimumChanged)
vValue.Changed:connect(ValueChanged)

oUp.MouseButton1Down:connect(function() Spin(1) end)
oDown.MouseButton1Down:connect(function() Spin(-1) end)</ProtectedString>
								</Properties>
							</Item>
						</Item>
						<Item class="Frame" referent="RBX555">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4286611584</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">GrnNum</string>
								<UDim2 name="Position">
									<XS>0.607142866</XS>
									<XO>0</XO>
									<YS>0.847583652</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>0.198412701</XS>
									<XO>0</XO>
									<YS>0.0594795533</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">7</int>
							</Properties>
							<Item class="Configuration" referent="RBX556">
								<Properties>
									<string name="Name">Config</string>
								</Properties>
								<Item class="NumberValue" referent="RBX557">
									<Properties>
										<string name="Name">Minimum</string>
										<double name="Value">0</double>
									</Properties>
								</Item>
								<Item class="NumberValue" referent="RBX558">
									<Properties>
										<string name="Name">Value</string>
										<double name="Value">125</double>
									</Properties>
								</Item>
								<Item class="NumberValue" referent="RBX559">
									<Properties>
										<string name="Name">Increment</string>
										<double name="Value">1</double>
									</Properties>
								</Item>
								<Item class="NumberValue" referent="RBX560">
									<Properties>
										<string name="Name">Maximum</string>
										<double name="Value">255</double>
									</Properties>
								</Item>
							</Item>
							<Item class="Configuration" referent="RBX561">
								<Properties>
									<string name="Name">Design</string>
								</Properties>
								<Item class="Configuration" referent="RBX562">
									<Properties>
										<string name="Name">Color</string>
									</Properties>
									<Item class="Color3Value" referent="RBX563">
										<Properties>
											<string name="Name">Window</string>
											<Color3 name="Value">4294967295</Color3>
										</Properties>
									</Item>
									<Item class="Color3Value" referent="RBX564">
										<Properties>
											<string name="Name">Hidden</string>
											<Color3 name="Value">4278190080</Color3>
										</Properties>
									</Item>
									<Item class="Color3Value" referent="RBX565">
										<Properties>
											<string name="Name">Background</string>
											<Color3 name="Value">4294967295</Color3>
										</Properties>
									</Item>
									<Item class="Color3Value" referent="RBX566">
										<Properties>
											<string name="Name">Border</string>
											<Color3 name="Value">4294967295</Color3>
										</Properties>
									</Item>
									<Item class="Color3Value" referent="RBX567">
										<Properties>
											<string name="Name">WindowText</string>
											<Color3 name="Value">4278190080</Color3>
										</Properties>
									</Item>
								</Item>
								<Item class="StringValue" referent="RBX568">
									<Properties>
										<string name="Name">UpIcon</string>
										<string name="Value">http://www.roblox.com/asset/?id=36307823</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX569">
									<Properties>
										<string name="Name">DownIcon</string>
										<string name="Value">http://www.roblox.com/asset/?id=36307827</string>
									</Properties>
								</Item>
							</Item>
							<Item class="Script" referent="RBX570">
								<Properties>
									<bool name="Disabled">true</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Documentation</string>
									<ProtectedString name="Source">--[==[

&#9;::NumericUpDown::

&#9;&#9;A NumericUpDown can be used to increment or decrement a number by a defined amount.

&#9;::Size/Position::

&#9;&#9;This script&apos;s parent acts as a placeholder while the game isn&apos;t running, and is used to determine the size and position of this control when it runs.

&#9;::Config::
&#9;&#9;There are various values which can be used to configure and modify the behavior of this control.

&#9;&#9;Increment
&#9;&#9;&#9;The amount to increment/decrement by.

&#9;&#9;Maximum
&#9;&#9;&#9;The maximum value.

&#9;&#9;Minimum
&#9;&#9;&#9;The minimum value.

&#9;&#9;Value
&#9;&#9;&#9;The current value.

&#9;::Design::

&#9;&#9;This control follows a design scheme, which can be used to easily change its color and other displays.
&#9;&#9;Unlike Config, modifying these values after this control is running may not have any effect on it.

&#9;&#9;DownIcon
&#9;&#9;&#9;The url of the down icon.

&#9;&#9;UpIcon
&#9;&#9;&#9;The url of the up icon.

&#9;&#9;::Color::
&#9;&#9;&#9;Background
&#9;&#9;&#9;Border
&#9;&#9;&#9;Hidden
&#9;&#9;&#9;Window
&#9;&#9;&#9;WindowText
]==]</ProtectedString>
								</Properties>
							</Item>
							<Item class="StringValue" referent="RBX571">
								<Properties>
									<string name="Name">Version</string>
									<string name="Value">2.0.3</string>
								</Properties>
							</Item>
							<Item class="LocalScript" referent="RBX572">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Program</string>
									<ProtectedString name="Source">local Control = script.Parent
local Config = Control.Config
local Design = Control.Design
local Color = Design.Color
local CDrag

local vIncrement = Config.Increment
local vMaximum = Config.Maximum
local vMinimum = Config.Minimum
local vValue = Config.Value

local value = vValue.Value
local max = vMaximum.Value
local min = vMinimum.Value
local range = max - min
local inc = vIncrement.Value
local spinning = tick()
local internal = {
&#9;[vIncrement]=false;
&#9;[vMinimum]=false;
&#9;[vMaximum]=false;
&#9;[vValue]=false;
}

event = {}
function disconnect(set)
&#9;for _,index in pairs(set) do
&#9;&#9;if event[index] then
&#9;&#9;&#9;event[index]:disconnect()
&#9;&#9;&#9;event[index] = nil
&#9;&#9;end
&#9;end
end

Control.BorderColor3 = Color.Border.Value
Control.BackgroundColor3 = Color.Window.Value
Control.ZIndex = 7
&#9;local oScroll = Instance.new(&quot;Frame&quot;)
&#9;oScroll.Size = UDim2.new(0, 16, 1, 0)
&#9;oScroll.BorderColor3 = Color.Border.Value
&#9;oScroll.Position = UDim2.new(1, -16, 0, 0)
&#9;oScroll.Name = &quot;Scroll&quot;
&#9;oScroll.BackgroundColor3 = Color.Background.Value
&#9;oScroll.archivable = false
&#9;oScroll.ZIndex = 7
&#9;oScroll.Parent = Control
&#9;&#9;local oUp = Instance.new(&quot;ImageButton&quot;)
&#9;&#9;oUp.Image = Design.UpIcon.Value
&#9;&#9;oUp.Size = UDim2.new(1, 0, 0.5, 0)
&#9;&#9;oUp.BorderColor3 = Color.Border.Value
&#9;&#9;oUp.AutoButtonColor = false
&#9;&#9;oUp.Name = &quot;Up&quot;
&#9;&#9;oUp.BackgroundColor3 = Color.Background.Value
&#9;&#9;oUp.archivable = false
&#9;&#9;oUp.ZIndex = 7
&#9;&#9;oUp.Parent = oScroll
&#9;&#9;local oDown = Instance.new(&quot;ImageButton&quot;)
&#9;&#9;oDown.Image = Design.DownIcon.Value
&#9;&#9;oDown.Size = UDim2.new(1, 0, 0.5, 0)
&#9;&#9;oDown.BorderColor3 = Color.Border.Value
&#9;&#9;oDown.AutoButtonColor = false
&#9;&#9;oDown.Position = UDim2.new(0, 0, 0.5, 0)
&#9;&#9;oDown.Name = &quot;Down&quot;
&#9;&#9;oDown.BackgroundColor3 = Color.Background.Value
&#9;&#9;oDown.archivable = false
&#9;&#9;oDown.ZIndex = 7
&#9;&#9;oDown.Parent = oScroll
&#9;local oText = Instance.new(&quot;TextLabel&quot;)
&#9;oText.FontSize = Enum.FontSize.Size9
&#9;oText.BorderSizePixel = 0
&#9;oText.Size = UDim2.new(1, -19, 1, 0)
&#9;oText.TextColor3 = Color.WindowText.Value
&#9;oText.BorderColor3 = Color.Border.Value
&#9;oText.Text = &quot;0&quot;
&#9;oText.TextXAlignment = Enum.TextXAlignment.Left
&#9;oText.BackgroundTransparency = 1
&#9;oText.Position = UDim2.new(0, 3, 0, 0)
&#9;oText.TextWrap = true
&#9;oText.Name = &quot;Text&quot;
&#9;oText.BackgroundColor3 = Color.Hidden.Value
&#9;oText.archivable = false
&#9;oText.ZIndex = 7
&#9;oText.Parent = Control

function GetCDrag(object)
&#9;local screen = object
&#9;repeat
&#9;&#9;screen = screen.Parent
&#9;&#9;if screen == nil then return false, object.Name .. &quot; is not descendent of ScreenGui&quot; end
&#9;until screen:IsA&quot;ScreenGui&quot;
&#9;local cdrag = screen:FindFirstChild(&quot;CDrag&quot;)
&#9;if not cdrag then
&#9;&#9;cdrag = Instance.new(&quot;ImageButton&quot;)
&#9;&#9;cdrag.Active = false
&#9;&#9;cdrag.Visible = false
&#9;&#9;cdrag.ZIndex = 8
&#9;&#9;cdrag.BorderSizePixel = 0
&#9;&#9;cdrag.Size = UDim2.new(1.5, 0, 1.5, 0)
&#9;&#9;cdrag.BorderColor3 = Color3.new(0, 0, 0)
&#9;&#9;cdrag.AutoButtonColor = false
&#9;&#9;cdrag.BackgroundTransparency = 1
&#9;&#9;cdrag.Position = UDim2.new(-0.25, 0, -0.25, 0)
&#9;&#9;cdrag.Name = &quot;CDrag&quot;
&#9;&#9;cdrag.BackgroundColor3 = Color3.new(0, 0, 0)
&#9;&#9;cdrag.Parent = screen
&#9;end
&#9;return cdrag
end

function InternalSync(type,value)
&#9;internal[type] = true
&#9;type.Value = value
&#9;internal[type] = false
end

function Spin(mod)
&#9;local current = tick()
&#9;spinning = current
&#9;event.unclick = CDrag.MouseButton1Up:connect(function()
&#9;&#9;disconnect{&quot;unclick&quot;}
&#9;&#9;spinning = tick()
&#9;&#9;CDrag.Visible = false
&#9;end)
&#9;CDrag.Visible = true
&#9;local t = 0.3
&#9;while current == spinning do
&#9;&#9;vValue.Value = value + inc * mod
&#9;&#9;wait(t)
&#9;&#9;t = 0.05
&#9;end
end

function IncrementChanged(new)
&#9;if internal[vIncrement] then return end
&#9;if new &gt; range then InternalSync(vIncrement,inc) end
&#9;inc = vIncrement.Value
end

function MaximumChanged(new)
&#9;if internal[vMaximum] then return end
&#9;if new &lt; min then InternalSync(vMaximum,max) end
&#9;max = vMaximum.Value
&#9;range = max - min
&#9;vValue.Value = value &gt; max and max or value
end

function MinimumChanged(new)
&#9;if internal[vMinimum] then return end
&#9;if new &gt; max then InternalSync(vMinimum,min) end
&#9;min = vMinimum.Value
&#9;range = max - min
&#9;vValue.Value = value &lt; min and min or value
end

function ValueChanged(new)
&#9;if internal[vValue] then return end
&#9;if new &gt; max then
&#9;&#9;value = max
&#9;&#9;InternalSync(vValue,value)
&#9;end
&#9;if new &lt; min then
&#9;&#9;value = min
&#9;&#9;InternalSync(vValue,value)
&#9;end
&#9;value = vValue.Value
&#9;oText.Text = value
end

CDrag = GetCDrag(Control)

oText.Text = value

vIncrement.Changed:connect(IncrementChanged)
vMaximum.Changed:connect(MaximumChanged)
vMinimum.Changed:connect(MinimumChanged)
vValue.Changed:connect(ValueChanged)

oUp.MouseButton1Down:connect(function() Spin(1) end)
oDown.MouseButton1Down:connect(function() Spin(-1) end)</ProtectedString>
								</Properties>
							</Item>
						</Item>
						<Item class="Frame" referent="RBX573">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">0.699999988</float>
								<Color3 name="BorderColor3">4286611584</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">BluNum</string>
								<UDim2 name="Position">
									<XS>0.607142866</XS>
									<XO>0</XO>
									<YS>0.921933115</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>0.198412701</XS>
									<XO>0</XO>
									<YS>0.0594795533</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">7</int>
							</Properties>
							<Item class="Configuration" referent="RBX574">
								<Properties>
									<string name="Name">Config</string>
								</Properties>
								<Item class="NumberValue" referent="RBX575">
									<Properties>
										<string name="Name">Maximum</string>
										<double name="Value">255</double>
									</Properties>
								</Item>
								<Item class="NumberValue" referent="RBX576">
									<Properties>
										<string name="Name">Minimum</string>
										<double name="Value">0</double>
									</Properties>
								</Item>
								<Item class="NumberValue" referent="RBX577">
									<Properties>
										<string name="Name">Value</string>
										<double name="Value">101</double>
									</Properties>
								</Item>
								<Item class="NumberValue" referent="RBX578">
									<Properties>
										<string name="Name">Increment</string>
										<double name="Value">1</double>
									</Properties>
								</Item>
							</Item>
							<Item class="Configuration" referent="RBX579">
								<Properties>
									<string name="Name">Design</string>
								</Properties>
								<Item class="Configuration" referent="RBX580">
									<Properties>
										<string name="Name">Color</string>
									</Properties>
									<Item class="Color3Value" referent="RBX581">
										<Properties>
											<string name="Name">Window</string>
											<Color3 name="Value">4294967295</Color3>
										</Properties>
									</Item>
									<Item class="Color3Value" referent="RBX582">
										<Properties>
											<string name="Name">Hidden</string>
											<Color3 name="Value">4278190080</Color3>
										</Properties>
									</Item>
									<Item class="Color3Value" referent="RBX583">
										<Properties>
											<string name="Name">Background</string>
											<Color3 name="Value">4294967295</Color3>
										</Properties>
									</Item>
									<Item class="Color3Value" referent="RBX584">
										<Properties>
											<string name="Name">Border</string>
											<Color3 name="Value">4294967295</Color3>
										</Properties>
									</Item>
									<Item class="Color3Value" referent="RBX585">
										<Properties>
											<string name="Name">WindowText</string>
											<Color3 name="Value">4278190080</Color3>
										</Properties>
									</Item>
								</Item>
								<Item class="StringValue" referent="RBX586">
									<Properties>
										<string name="Name">UpIcon</string>
										<string name="Value">http://www.roblox.com/asset/?id=36307823</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX587">
									<Properties>
										<string name="Name">DownIcon</string>
										<string name="Value">http://www.roblox.com/asset/?id=36307827</string>
									</Properties>
								</Item>
							</Item>
							<Item class="Script" referent="RBX588">
								<Properties>
									<bool name="Disabled">true</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Documentation</string>
									<ProtectedString name="Source">--[==[

&#9;::NumericUpDown::

&#9;&#9;A NumericUpDown can be used to increment or decrement a number by a defined amount.

&#9;::Size/Position::

&#9;&#9;This script&apos;s parent acts as a placeholder while the game isn&apos;t running, and is used to determine the size and position of this control when it runs.

&#9;::Config::
&#9;&#9;There are various values which can be used to configure and modify the behavior of this control.

&#9;&#9;Increment
&#9;&#9;&#9;The amount to increment/decrement by.

&#9;&#9;Maximum
&#9;&#9;&#9;The maximum value.

&#9;&#9;Minimum
&#9;&#9;&#9;The minimum value.

&#9;&#9;Value
&#9;&#9;&#9;The current value.

&#9;::Design::

&#9;&#9;This control follows a design scheme, which can be used to easily change its color and other displays.
&#9;&#9;Unlike Config, modifying these values after this control is running may not have any effect on it.

&#9;&#9;DownIcon
&#9;&#9;&#9;The url of the down icon.

&#9;&#9;UpIcon
&#9;&#9;&#9;The url of the up icon.

&#9;&#9;::Color::
&#9;&#9;&#9;Background
&#9;&#9;&#9;Border
&#9;&#9;&#9;Hidden
&#9;&#9;&#9;Window
&#9;&#9;&#9;WindowText
]==]</ProtectedString>
								</Properties>
							</Item>
							<Item class="StringValue" referent="RBX589">
								<Properties>
									<string name="Name">Version</string>
									<string name="Value">2.0.3</string>
								</Properties>
							</Item>
							<Item class="LocalScript" referent="RBX590">
								<Properties>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Program</string>
									<ProtectedString name="Source">local Control = script.Parent
local Config = Control.Config
local Design = Control.Design
local Color = Design.Color
local CDrag

local vIncrement = Config.Increment
local vMaximum = Config.Maximum
local vMinimum = Config.Minimum
local vValue = Config.Value

local value = vValue.Value
local max = vMaximum.Value
local min = vMinimum.Value
local range = max - min
local inc = vIncrement.Value
local spinning = tick()
local internal = {
&#9;[vIncrement]=false;
&#9;[vMinimum]=false;
&#9;[vMaximum]=false;
&#9;[vValue]=false;
}

event = {}
function disconnect(set)
&#9;for _,index in pairs(set) do
&#9;&#9;if event[index] then
&#9;&#9;&#9;event[index]:disconnect()
&#9;&#9;&#9;event[index] = nil
&#9;&#9;end
&#9;end
end

Control.BorderColor3 = Color.Border.Value
Control.BackgroundColor3 = Color.Window.Value
Control.ZIndex = 7
&#9;local oScroll = Instance.new(&quot;Frame&quot;)
&#9;oScroll.Size = UDim2.new(0, 16, 1, 0)
&#9;oScroll.BorderColor3 = Color.Border.Value
&#9;oScroll.Position = UDim2.new(1, -16, 0, 0)
&#9;oScroll.Name = &quot;Scroll&quot;
&#9;oScroll.BackgroundColor3 = Color.Background.Value
&#9;oScroll.archivable = false
&#9;oScroll.ZIndex = 7
&#9;oScroll.Parent = Control
&#9;&#9;local oUp = Instance.new(&quot;ImageButton&quot;)
&#9;&#9;oUp.Image = Design.UpIcon.Value
&#9;&#9;oUp.Size = UDim2.new(1, 0, 0.5, 0)
&#9;&#9;oUp.BorderColor3 = Color.Border.Value
&#9;&#9;oUp.AutoButtonColor = false
&#9;&#9;oUp.Name = &quot;Up&quot;
&#9;&#9;oUp.BackgroundColor3 = Color.Background.Value
&#9;&#9;oUp.archivable = false
&#9;&#9;oUp.ZIndex = 7
&#9;&#9;oUp.Parent = oScroll
&#9;&#9;local oDown = Instance.new(&quot;ImageButton&quot;)
&#9;&#9;oDown.Image = Design.DownIcon.Value
&#9;&#9;oDown.Size = UDim2.new(1, 0, 0.5, 0)
&#9;&#9;oDown.BorderColor3 = Color.Border.Value
&#9;&#9;oDown.AutoButtonColor = false
&#9;&#9;oDown.Position = UDim2.new(0, 0, 0.5, 0)
&#9;&#9;oDown.Name = &quot;Down&quot;
&#9;&#9;oDown.BackgroundColor3 = Color.Background.Value
&#9;&#9;oDown.archivable = false
&#9;&#9;oDown.ZIndex = 7
&#9;&#9;oDown.Parent = oScroll
&#9;local oText = Instance.new(&quot;TextLabel&quot;)
&#9;oText.FontSize = Enum.FontSize.Size9
&#9;oText.BorderSizePixel = 0
&#9;oText.Size = UDim2.new(1, -19, 1, 0)
&#9;oText.TextColor3 = Color.WindowText.Value
&#9;oText.BorderColor3 = Color.Border.Value
&#9;oText.Text = &quot;0&quot;
&#9;oText.TextXAlignment = Enum.TextXAlignment.Left
&#9;oText.BackgroundTransparency = 1
&#9;oText.Position = UDim2.new(0, 3, 0, 0)
&#9;oText.TextWrap = true
&#9;oText.Name = &quot;Text&quot;
&#9;oText.BackgroundColor3 = Color.Hidden.Value
&#9;oText.archivable = false
&#9;oText.ZIndex = 7
&#9;oText.Parent = Control

function GetCDrag(object)
&#9;local screen = object
&#9;repeat
&#9;&#9;screen = screen.Parent
&#9;&#9;if screen == nil then return false, object.Name .. &quot; is not descendent of ScreenGui&quot; end
&#9;until screen:IsA&quot;ScreenGui&quot;
&#9;local cdrag = screen:FindFirstChild(&quot;CDrag&quot;)
&#9;if not cdrag then
&#9;&#9;cdrag = Instance.new(&quot;ImageButton&quot;)
&#9;&#9;cdrag.Active = false
&#9;&#9;cdrag.Visible = false
&#9;&#9;cdrag.ZIndex = 8
&#9;&#9;cdrag.BorderSizePixel = 0
&#9;&#9;cdrag.Size = UDim2.new(1.5, 0, 1.5, 0)
&#9;&#9;cdrag.BorderColor3 = Color3.new(0, 0, 0)
&#9;&#9;cdrag.AutoButtonColor = false
&#9;&#9;cdrag.BackgroundTransparency = 1
&#9;&#9;cdrag.Position = UDim2.new(-0.25, 0, -0.25, 0)
&#9;&#9;cdrag.Name = &quot;CDrag&quot;
&#9;&#9;cdrag.BackgroundColor3 = Color3.new(0, 0, 0)
&#9;&#9;cdrag.Parent = screen
&#9;end
&#9;return cdrag
end

function InternalSync(type,value)
&#9;internal[type] = true
&#9;type.Value = value
&#9;internal[type] = false
end

function Spin(mod)
&#9;local current = tick()
&#9;spinning = current
&#9;event.unclick = CDrag.MouseButton1Up:connect(function()
&#9;&#9;disconnect{&quot;unclick&quot;}
&#9;&#9;spinning = tick()
&#9;&#9;CDrag.Visible = false
&#9;end)
&#9;CDrag.Visible = true
&#9;local t = 0.3
&#9;while current == spinning do
&#9;&#9;vValue.Value = value + inc * mod
&#9;&#9;wait(t)
&#9;&#9;t = 0.05
&#9;end
end

function IncrementChanged(new)
&#9;if internal[vIncrement] then return end
&#9;if new &gt; range then InternalSync(vIncrement,inc) end
&#9;inc = vIncrement.Value
end

function MaximumChanged(new)
&#9;if internal[vMaximum] then return end
&#9;if new &lt; min then InternalSync(vMaximum,max) end
&#9;max = vMaximum.Value
&#9;range = max - min
&#9;vValue.Value = value &gt; max and max or value
end

function MinimumChanged(new)
&#9;if internal[vMinimum] then return end
&#9;if new &gt; max then InternalSync(vMinimum,min) end
&#9;min = vMinimum.Value
&#9;range = max - min
&#9;vValue.Value = value &lt; min and min or value
end

function ValueChanged(new)
&#9;if internal[vValue] then return end
&#9;if new &gt; max then
&#9;&#9;value = max
&#9;&#9;InternalSync(vValue,value)
&#9;end
&#9;if new &lt; min then
&#9;&#9;value = min
&#9;&#9;InternalSync(vValue,value)
&#9;end
&#9;value = vValue.Value
&#9;oText.Text = value
end

CDrag = GetCDrag(Control)

oText.Text = value

vIncrement.Changed:connect(IncrementChanged)
vMaximum.Changed:connect(MaximumChanged)
vMinimum.Changed:connect(MinimumChanged)
vValue.Changed:connect(ValueChanged)

oUp.MouseButton1Down:connect(function() Spin(1) end)
oDown.MouseButton1Down:connect(function() Spin(-1) end)</ProtectedString>
								</Properties>
							</Item>
						</Item>
						<Item class="Configuration" referent="RBX591">
							<Properties>
								<string name="Name">Design</string>
							</Properties>
							<Item class="Configuration" referent="RBX592">
								<Properties>
									<string name="Name">Color</string>
								</Properties>
								<Item class="Color3Value" referent="RBX593">
									<Properties>
										<string name="Name">Hidden</string>
										<Color3 name="Value">4278190080</Color3>
									</Properties>
								</Item>
								<Item class="Color3Value" referent="RBX594">
									<Properties>
										<string name="Name">Background</string>
										<Color3 name="Value">4294967295</Color3>
									</Properties>
								</Item>
								<Item class="Color3Value" referent="RBX595">
									<Properties>
										<string name="Name">Border</string>
										<Color3 name="Value">4294967295</Color3>
									</Properties>
								</Item>
								<Item class="Color3Value" referent="RBX596">
									<Properties>
										<string name="Name">Text</string>
										<Color3 name="Value">4278190080</Color3>
									</Properties>
								</Item>
							</Item>
							<Item class="StringValue" referent="RBX597">
								<Properties>
									<string name="Name">ArrowIcon</string>
									<string name="Value">http://www.roblox.com/asset/?id=44532699</string>
								</Properties>
							</Item>
						</Item>
						<Item class="StringValue" referent="RBX598">
							<Properties>
								<string name="Name">Version</string>
								<string name="Value">0.7.0</string>
							</Properties>
						</Item>
						<Item class="Script" referent="RBX599">
							<Properties>
								<bool name="Disabled">true</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">Documentation</string>
								<ProtectedString name="Source">--[==[

&#9;::Color3Dialog::

&#9;&#9;A Color3Dialog can be used to select a Color3 value.

&#9;::Size/Position::

&#9;&#9;This script&apos;s parent acts as a placeholder while the game isn&apos;t running, and is used to determine the size and position of this control when it runs.

&#9;::Config::
&#9;&#9;There are various values which can be used to configure and modify the behavior of this control.

&#9;&#9;Compare
&#9;&#9;&#9;Changes the control&apos;s comparison color.

&#9;&#9;Value
&#9;&#9;&#9;The control&apos;s input can output Color3 value.

&#9;::Design::

&#9;&#9;This control follows a design scheme, which can be used to easily change its color and other displays.
&#9;&#9;Unlike Config, modifying these values after this control is running may not have any effect on it.

&#9;&#9;ArrowIcon
&#9;&#9;&#9;The image to display next to the luminosity marker.

&#9;&#9;::Color::
&#9;&#9;&#9;Background
&#9;&#9;&#9;Border
&#9;&#9;&#9;Hidden
&#9;&#9;&#9;Text
]==]</ProtectedString>
							</Properties>
						</Item>
					</Item>
				</Item>
			</Item>
		</Item>
	</Item>
</roblox>